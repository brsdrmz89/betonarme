# app.py ‚Äî PART 1/3
# -*- coding: utf-8 -*-
from __future__ import annotations

import os, io, json, math, uuid, hashlib, requests
import numpy as np
import streamlit as st
import pandas as pd
from datetime import date, timedelta
from pandas import ExcelWriter
import matplotlib.pyplot as plt

# =============== 0) SABƒ∞TLER ===============
# NDFL: Net'ten br√ºt'e √ßevrimde kullanƒ±lƒ±yor; i≈üveren primleri "br√ºt"e uygulanƒ±r (br√ºt+NDFL DEƒûƒ∞L)
NDFL_RUS = 0.130
NDFL_SNG = 0.130
NDFL_TUR = 0.130  # VKS i√ßin sabit oran modu ba≈ülangƒ±cƒ±; progressive modda 13/15/18/20/22 kademeleri kullanƒ±lƒ±r

# ƒ∞≈üveren primleri (resmi BR√úT bazƒ±nda)
OPS = 0.220   # emeklilik
OSS = 0.029  # sosyal
OMS = 0.051  # saƒülƒ±k
NSIPZ_RISK_RUS_SNG = 0.009   # i≈ü kazasƒ±/meslek hast. (RUS+SNG i√ßin tipik risk katsayƒ±sƒ±)
NSIPZ_RISK_TUR_VKS  = 0.018  # VKS (TR) i√ßin i≈ü kazasƒ± riski

# Patent + resmi tabanlar (sade model)
SNG_PATENT_MONTH = 7000      # sabit aylƒ±k patent √∂demesi (√∂rn. Moskova ~8900 g√ºncel olabilir)
SNG_TAXED_BASE   = 33916     # resmi br√ºt tavan (aylƒ±k, sade model)
TUR_TAXED_BASE   = 167000    # VKS i√ßin resmi br√ºt tavan (aylƒ±k, sade model)

# Cash (elden) √∂deme komisyonu ‚Äî banka/√ßekim/kur riski gibi
CASH_COMMISSION_RATE = 0.235

# Varsayƒ±lan oranlar
OVERHEAD_RATE_DEFAULT = 15.0  # Y√ºzde olarak (15.0%)
OVERHEAD_RATE_MAX     = 25.0  # Y√ºzde olarak (25.0%)
CONSUMABLES_RATE_DEFAULT = 5.0  # Y√ºzde olarak (5.0%)

# =============== Yardƒ±mcƒ± Fonksiyonlar ===============
def ratio_to_pct(value):
    try:
        return float(value) * 100.0
    except Exception:
        return 0.0


def pct_to_ratio(value):
    try:
        return float(value) / 100.0
    except Exception:
        return 0.0


def eff(key: str, default):
    """CONST_OVERRIDES i√ßinden etkin deƒüeri getirir, yoksa varsayƒ±lanƒ± d√∂ner."""
    overrides = st.session_state.get("CONST_OVERRIDES", {})
    return overrides.get(key, default)

# --- Gruplu Sarf ve Genel Gider preset'leri ---
CONSUMABLES_PRESET = [
    ("Baƒü teli / tel sarf", 1.2),
    ("Kesme / ta≈ülama diskleri", 1.0),
    ("Gaz / oksijen (kaynak)", 0.8),
    ("Matkap/ucu/per√ßin sarfƒ±", 0.6),
    ("Kalƒ±p yaƒüƒ± / kimyasal", 0.7),
    ("Vibrat√∂r ≈üi≈üe/bakƒ±m sarf", 0.5),
    ("√áivi / d√ºbel / ankraj sarf", 0.6),
    ("Eldiven / k√º√ß√ºk el aleti sarf", 0.4),
]

OVERHEAD_GROUPS_PRESET = [
    ("≈ûantiye genel idare", 7.0),
    ("Ekipman/amortisman (k√º√ß√ºk alet)", 5.0),
    ("Lojistik/koordinasyon", 3.0),
    ("G√ºvenlik & ƒ∞SG idari", 2.0),
    ("Ofis/GSM/evrak/izin", 1.5),
]

# Indirect (≈üantiye hizmet/altyapƒ±) preset ‚Äî overhead ile √ßakƒ±≈ümayƒ± √∂nlemek i√ßin ayrƒ±≈ütƒ±rƒ±ldƒ±
INDIRECT_PRESET_DEFAULTS = {
    "≈ûantiye enerji-su (–≠–Ω–µ—Ä–≥–∏—è/–≤–æ–¥–∞ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ)": 2.0,
    "Ge√ßici yollar/eri≈üim (–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏/–ø–æ–¥—ä–µ–∑–¥—ã)": 1.0,
    "Aydƒ±nlatma/jenerat√∂r (–û—Å–≤–µ—â–µ–Ω–∏–µ/–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)": 1.0,
    "Ge√ßici ofis/soy. odalarƒ± (–í—Ä–µ–º. –æ—Ñ–∏—Å/—Ä–∞–∑–¥–µ–≤–∞–ª–∫–∏)": 0.8,
    "Depolama/√ßit/kapƒ± g√ºvenliƒüi (–°–∫–ª–∞–¥/–æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ/–æ—Ö—Ä–∞–Ω–∞)": 1.2,
    "Temizlik/√ß√∂p/saha bakƒ±m (–£–±–æ—Ä–∫–∞/–≤—ã–≤–æ–∑/–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ)": 1.0,
}

# Adam-saat normlarƒ±
SCENARIO_NORMS = {
    "ƒ∞deal":     {"Grobeton": 8.0,  "Rostverk": 12.0, "Temel": 14.0, "D√∂≈üeme": 15.0, "Perde": 18.0, "Merdiven": 22.0},
    "Ger√ßek√ßi":  {"Grobeton": 10.0, "Rostverk": 14.0, "Temel": 16.0, "D√∂≈üeme": 18.0, "Perde": 21.0, "Merdiven": 26.0},
    "K√∂t√º":      {"Grobeton": 12.0, "Rostverk": 16.0, "Temel": 19.0, "D√∂≈üeme": 22.0, "Perde": 26.0, "Merdiven": 32.0},
}

ELEMENT_ORDER = ["grobeton","rostverk","temel","doseme","perde","merdiven"]
LABELS = {
    "grobeton": "Grobeton (–ü–æ–¥–±–µ—Ç–æ–Ω–∫–∞)",
    "rostverk": "Rostverk (–†–æ—Å—Ç–≤–µ—Ä–∫)",
    "temel":    "Temel (–§—É–Ω–¥–∞–º–µ–Ω—Ç)",
    "doseme":   "D√∂≈üeme (–ü–ª–∏—Ç–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è)",
    "perde":    "Perde (–°—Ç–µ–Ω–∞/–¥–∏–∞—Ñ—Ä–∞–≥–º–∞)",
    "merdiven": "Merdiven (–õ–µ—Å—Ç–Ω–∏—Ü–∞)",
}

# =============== Basit Versiyon Kontrol ===============
VERSION_FILE = os.path.join(os.path.dirname(__file__), "version.json")

def _file_md5(path: str) -> str:
    h = hashlib.md5()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()

def _load_version() -> dict:
    try:
        with open(VERSION_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"version": "0.1.0", "code_hash": ""}

def _save_version(v: dict) -> None:
    try:
        with open(VERSION_FILE, "w", encoding="utf-8") as f:
            json.dump(v, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

def _bump_patch(ver: str) -> str:
    try:
        major, minor, patch = ver.split(".")
        return f"{major}.{minor}.{int(patch)+1}"
    except Exception:
        return "0.1.0"

def get_app_version(auto_bump: bool = True) -> str:
    state = _load_version()
    current_hash = _file_md5(__file__)
    if auto_bump and state.get("code_hash") != current_hash:
        state["version"] = _bump_patch(state.get("version", "0.1.0"))
        state["code_hash"] = current_hash
        _save_version(state)
    return state.get("version", "0.1.0")

# ---- Element key canon helpers (TR/RU/etiket -> kanonik anahtar) ----
CANON_KEYS = ("grobeton","rostverk","temel","doseme","perde","merdiven")

def get_tr_name_from_label(full_label: str) -> str:
    """'Grobeton (–ü–æ–¥–±–µ—Ç–æ–Ω–∫–∞)' -> 'Grobeton'"""
    return str(full_label).split(" (")[0].strip()

def canon_key(x) -> str | None:
    """Kullanƒ±cƒ±dan/State'ten gelen deƒüeri kanonik anahtara √ßevirir."""
    if x is None: return None
    s = str(x).strip()
    s_low = s.lower()

    # 1) Zaten kanonik mi?
    if s_low in CANON_KEYS:
        return s_low

    # 2) LABELS tam e≈üle≈üme (full label veya TR kƒ±smƒ±)
    try:
        for k, full in LABELS.items():
            if s == full or s_low == full.lower():
                return k
            if s_low == get_tr_name_from_label(full).lower():
                return k
    except Exception:
        pass

    # 3) √áƒ±kmazsa None
    return None

def safe_label_from_key(k: str) -> str:
    """Kanonik anahtar -> ekranda g√∂r√ºlen label. Yoksa anahtarƒ± d√∂nd√ºr√ºr."""
    try:
        return LABELS[k]
    except Exception:
        return str(k)

# Oran doƒürulamasƒ± i√ßin fallback kaynak
AUTO_RATE_SOURCES = [
    "https://raw.githubusercontent.com/bsrd-labs/ru-labor-rates/main/rates_latest.json",
    "https://raw.githubusercontent.com/bsrd-labs/ru-labor-rates/main/2024.json",
]

# OpenAI mevcut mu?
try:
    from openai import OpenAI
    _OPENAI_AVAILABLE = True
except Exception:
    _OPENAI_AVAILABLE = False

# =============== 1) SAYFA KONFƒ∞G√úRASYONU ===============
st.set_page_config(
    page_title="üèóÔ∏è Betonarme Hesaplama Mod√ºl√º",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =============== 2) MODERN STƒ∞L ===============
def inject_style():
    st.markdown("""
    <style>
        /* Ana tema renkleri */
        :root {
            --primary-color: #1f77b4;
            --secondary-color: #ff7f0e;
            --success-color: #2ca02c;
            --warning-color: #d62728;
            --info-color: #9467bd;
            --light-bg: #f8f9fa;
            --dark-bg: #343a40;
            --border-color: #dee2e6;
            --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            
            /* Font ailesi ve boyutlarƒ± */
            --font-primary: 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
            --font-secondary: 'SF Pro Display', 'Inter', 'Segoe UI', sans-serif;
            --font-mono: 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;
            
            /* Font boyutlarƒ± */
            --font-size-xs: 0.75rem;
            --font-size-sm: 0.875rem;
            --font-size-base: 1rem;
            --font-size-lg: 1.125rem;
            --font-size-xl: 1.25rem;
            --font-size-2xl: 1.5rem;
            --font-size-3xl: 1.875rem;
            --font-size-4xl: 2.25rem;
            
            /* Font aƒüƒ±rlƒ±klarƒ± */
            --font-light: 300;
            --font-normal: 400;
            --font-medium: 500;
            --font-semibold: 600;
            --font-bold: 700;
            --font-extrabold: 800;
        }
        
        /* Sayfa ba≈ülƒ±ƒüƒ± */
        .main-header {
            background: var(--gradient-primary);
            color: white;
            padding: 2.5rem;
            border-radius: 20px;
            margin-bottom: 2rem;
            text-align: center;
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        .main-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="10" r="0.5" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            opacity: 0.3;
        }
        
        .main-header h1 {
            font-family: var(--font-secondary);
            font-size: var(--font-size-4xl);
            font-weight: var(--font-extrabold);
            margin: 0;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            position: relative;
            z-index: 1;
            letter-spacing: -0.025em;
        }
        
        .main-header p {
            font-family: var(--font-primary);
            font-size: var(--font-size-lg);
            font-weight: var(--font-medium);
            margin: 0.5rem 0 0 0;
            opacity: 0.95;
            position: relative;
            z-index: 1;
            letter-spacing: 0.025em;
        }
        
        /* Sekme stilleri */
        .stTabs [data-baseweb="tab-list"] {
            gap: 12px;
            background: var(--light-bg);
            border-radius: 15px;
            padding: 12px;
            border: 1px solid var(--border-color);
        }
        
        .stTabs [data-baseweb="tab"] {
            font-family: var(--font-primary);
            font-weight: 600;
            letter-spacing: 0.01em;
            border-radius: 12px;
            background: white;
            border: 2px solid var(--border-color);
            padding: 8px 12px;
            min-width: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem; /* emoji boyutu */
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .stTabs [data-baseweb="tab"]::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: var(--gradient-primary);
            transition: left 0.4s ease;
            z-index: -1;
        }
        
        .stTabs [data-baseweb="tab"]:hover::before {
            left: 0;
        }
        
        .stTabs [data-baseweb="tab"]:hover {
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(31, 119, 180, 0.4);
            border-color: transparent;
        }
        
        .stTabs [aria-selected="true"] {
            background: var(--gradient-primary) !important;
            color: white !important;
            box-shadow: 0 8px 25px rgba(31, 119, 180, 0.5);
            border-color: transparent;
            transform: translateY(-2px);
        }
        
        /* Kart stilleri */
        .metric-card {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            border: 2px solid var(--border-color);
            box-shadow: 0 8px 25px rgba(0,0,0,0.08);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }
        
        .metric-card h3 {
            font-family: var(--font-secondary);
            font-size: var(--font-size-lg);
            font-weight: var(--font-semibold);
            color: #34495e;
            margin: 0 0 0.5rem 0;
            letter-spacing: 0.025em;
        }
        
        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--gradient-primary);
            transform: scaleY(0);
            transition: transform 0.3s ease;
        }
        
        .metric-card:hover::before {
            transform: scaleY(1);
        }
        
        .metric-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            border-color: var(--primary-color);
        }
        
        /* Buton stilleri */
        .stButton > button {
            border-radius: 30px;
            font-weight: 700;
            padding: 1rem 2.5rem;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: none;
            box-shadow: 0 6px 20px rgba(0,0,0,0.15);
            font-size: 1.1rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .stButton > button:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 30px rgba(0,0,0,0.25);
        }
        
        /* Hesapla butonu √∂zel stil */
        .hesapla-button {
            background: var(--gradient-primary);
            color: white;
            font-size: 1.4rem;
            padding: 1.5rem 4rem;
            border-radius: 40px;
            border: none;
            box-shadow: 0 12px 40px rgba(102, 126, 234, 0.5);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }
        
        .hesapla-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: var(--gradient-secondary);
            transition: left 0.4s ease;
            z-index: -1;
        }
        
        .hesapla-button:hover::before {
            left: 0;
        }
        
        .hesapla-button:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 50px rgba(102, 126, 234, 0.7);
        }
        
        /* Form elemanlarƒ± */
        .stNumberInput > div > div > input {
            border-radius: 15px;
            border: 2px solid var(--border-color);
            transition: all 0.3s ease;
            font-size: 1.1rem;
            padding: 12px 16px;
        }
        
        .stNumberInput > div > div > input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 4px rgba(31, 119, 180, 0.15);
            transform: scale(1.02);
        }
        
        /* Checkbox stilleri */
        .stCheckbox > label {
            font-weight: 600;
            color: var(--dark-bg);
            font-size: 1.1rem;
        }
        
        /* Dataframe stilleri */
        .stDataFrame {
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 12px 40px rgba(0,0,0,0.12);
            border: 2px solid var(--border-color);
            background: white;
            margin: 2rem 0;
            transition: all 0.3s ease;
        }
        
        .stDataFrame:hover {
            box-shadow: 0 16px 50px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }
        
        /* Info kutularƒ± */
        .stAlert {
            border-radius: 15px;
            border: none;
            box-shadow: 0 6px 20px rgba(0,0,0,0.08);
            border-left: 5px solid var(--info-color);
        }
        
        /* Sidebar stilleri */
        .css-1d391kg {
            background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);
        }
        
        /* Animasyonlar */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .fade-in-up {
            animation: fadeInUp 0.6s ease-out;
        }
        /* Responsive tasarƒ±m */
        @media (max-width: 768px) {
            .main-header h1 {
                font-size: 2.5rem;
            }
            
            .main-header p {
                font-size: 1.1rem;
            }
            
            .stTabs [data-baseweb="tab"] {
                padding: 12px 20px;
                font-size: 1rem;
            }
        }
        
        /* Eski stiller korundu */
        .big-title{font-size:30px;font-weight:800;letter-spacing:.3px}
        .gpt-badge{display:inline-block;background:#eef2ff;color:#4338ca;border:1px solid #c7d2fe;border-radius:8px;padding:2px 8px;font-size:12px;margin-bottom:6px}
        .gpt-proposal{border-left:4px solid #6366f1;padding-left:10px;margin:8px 0}
        .diff-del{color:#b91c1c;text-decoration:line-through;margin-right:6px}
        .diff-add{color:#065f46;font-weight:600}
        .subtle{color:#6b7280}
        .warn{background:#fff7ed;border:1px solid #fed7aa;padding:8px 10px;border-radius:8px}
        .muted{color:#9ca3af;font-size:12px}
        .rowcard{border:1px solid #e5e7eb;border-radius:12px;padding:8px 10px;margin-bottom:6px;background:#fff}
        .rowgrid{display:grid;grid-template-columns: 1fr 1fr 120px 120px 120px;gap:8px;align-items:center}
        .badge{display:inline-block;padding:2px 8px;border:1px solid #e5e7eb;border-radius:999px;background:#f8fafc;font-size:12px;margin-right:6px}
        
        /* Geli≈ümi≈ü font stilleri */
        .stMarkdown h3 {
            font-family: var(--font-secondary);
            font-size: var(--font-size-xl);
            font-weight: var(--font-bold);
            color: #1a202c;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 0.5rem;
            margin-bottom: 1.5rem;
        }
        
        .metric-card .val {
            font-family: var(--font-mono);
            font-size: var(--font-size-2xl);
            font-weight: var(--font-bold);
            color: var(--primary-color);
        }
        
        .stDataFrame th {
            font-family: var(--font-secondary);
            font-weight: var(--font-semibold);
            font-size: var(--font-size-sm);
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: #2d3748;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 16px 20px;
            border-bottom: 2px solid #dee2e6;
            text-align: left;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        .stDataFrame td {
            font-family: var(--font-primary);
            font-weight: var(--font-normal);
            font-size: var(--font-size-sm);
            color: #4a5568;
            padding: 14px 20px;
            border-bottom: 1px solid #f1f3f4;
            line-height: 1.4;
            letter-spacing: 0.01em;
        }
        
        .stDataFrame tr:hover {
            background-color: #f8f9fa;
            transition: background-color 0.2s ease;
        }
        
        .stDataFrame tr:hover td {
            color: #2d3748;
            font-weight: var(--font-medium);
        }
        
        /* Sayƒ±sal deƒüerler i√ßin √∂zel font */
        .stDataFrame td:not(:first-child) {
            font-family: var(--font-mono);
            font-weight: var(--font-medium);
            text-align: right;
            color: #2c5282;
        }
        
        /* ƒ∞lk s√ºtun (eleman/rol adlarƒ±) i√ßin √∂zel font */
        .stDataFrame td:first-child {
            font-family: var(--font-secondary);
            font-weight: var(--font-semibold);
            color: #1a202c;
            text-align: left;
        }
        
        /* Tablo ba≈ülƒ±ƒüƒ± i√ßin √∂zel stil */
        .stDataFrame h3 {
            font-family: var(--font-secondary);
            font-size: var(--font-size-xl);
            font-weight: var(--font-bold);
            color: #1a202c;
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 3px solid var(--primary-color);
            letter-spacing: -0.025em;
        }
        
        /* Y√ºzde deƒüerleri i√ßin √∂zel stil */
        .stDataFrame td:contains('%') {
            font-weight: var(--font-semibold);
            color: #805ad5;
        }
        
        /* Para birimi deƒüerleri i√ßin √∂zel stil */
        .stDataFrame td:contains('‚ÇΩ') {
            font-weight: var(--font-semibold);
            color: #38a169;
        }
        
        /* Metraj deƒüerleri i√ßin √∂zel stil */
        .stDataFrame td:contains('m¬≥') {
            font-weight: var(--font-semibold);
            color: #3182ce;
        }
        
        /* Tablo satƒ±rlarƒ± arasƒ± bo≈üluk */
        .stDataFrame tbody tr {
            transition: all 0.2s ease;
        }
        
        /* Zebra striping i√ßin alternatif satƒ±r renkleri */
        .stDataFrame tbody tr:nth-child(even) {
            background-color: #fafbfc;
        }
        
        .stDataFrame tbody tr:nth-child(even):hover {
            background-color: #f1f5f9;
        }
        
        /* Tablo ba≈ülƒ±klarƒ± i√ßin √∂zel stil */
        .table-header h3 {
            font-family: var(--font-secondary);
            font-size: var(--font-size-xl);
            font-weight: var(--font-bold);
            color: #1a202c;
            margin: 2rem 0 1rem 0;
            padding: 1rem 1.5rem;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 15px;
            border-left: 5px solid var(--primary-color);
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            letter-spacing: -0.025em;
            text-align: center;
        }
        
        .table-header h3:hover {
            transform: translateX(5px);
            transition: transform 0.3s ease;
        }
        
        /* Tablo i√ßi deƒüerler i√ßin ek g√ºzelle≈ütirmeler */
        .stDataFrame .dataframe {
            font-family: var(--font-primary) !important;
            border-collapse: collapse !important;
            width: 100% !important;
        }
        
        /* Sayƒ±sal deƒüerler i√ßin daha iyi hizalama */
        .stDataFrame td:not(:first-child) {
            text-align: right !important;
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            font-size: var(--font-size-sm) !important;
        }
        
        /* ƒ∞lk s√ºtun (isimler) i√ßin √∂zel stil */
        .stDataFrame td:first-child {
            text-align: left !important;
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
            font-size: var(--font-size-sm) !important;
        }
        
        /* Tablo satƒ±rlarƒ± i√ßin hover efekti */
        .stDataFrame tr:hover {
            background: linear-gradient(90deg, #f0f9ff 0%, #e0f2fe 100%) !important;
            transform: scale(1.01) !important;
            transition: all 0.2s ease !important;
        }
        
        /* Streamlit tablo override'larƒ± - Daha g√º√ßl√º */
        div[data-testid="stDataFrame"] {
            font-family: var(--font-primary) !important;
        }
        div[data-testid="stDataFrame"] table {
            font-family: var(--font-primary) !important;
        }
        
        div[data-testid="stDataFrame"] table th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            font-size: var(--font-size-sm) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            color: #2d3748 !important;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
            padding: 16px 20px !important;
            border-bottom: 2px solid #dee2e6 !important;
            text-align: left !important;
        }
        
        div[data-testid="stDataFrame"] table td {
            font-family: var(--font-primary) !important;
            font-weight: var(--font-normal) !important;
            font-size: var(--font-size-sm) !important;
            color: #4a5568 !important;
            padding: 14px 20px !important;
            border-bottom: 1px solid #f1f3f4 !important;
            line-height: 1.4 !important;
            letter-spacing: 0.01em !important;
        }
        
        div[data-testid="stDataFrame"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
        
        div[data-testid="stDataFrame"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
            text-align: left !important;
        }
        
        /* Ek tablo override'larƒ± */
        .stDataFrame div[data-testid="stDataFrame"] div[data-testid="stTable"] {
            font-family: var(--font-primary) !important;
        }
        
        .stDataFrame div[data-testid="stDataFrame"] div[data-testid="stTable"] table {
            font-family: var(--font-primary) !important;
        }
        
        .stDataFrame div[data-testid="stDataFrame"] div[data-testid="stTable"] table th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            font-size: var(--font-size-sm) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            color: #2d3748 !important;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
            padding: 16px 20px !important;
            border-bottom: 2px solid #dee2e6 !important;
            text-align: left !important;
        }
        
        .stDataFrame div[data-testid="stDataFrame"] div[data-testid="stTable"] table td {
            font-family: var(--font-primary) !important;
            font-weight: var(--font-normal) !important;
            font-size: var(--font-size-sm) !important;
            color: #4a5568 !important;
            padding: 14px 20px !important;
            border-bottom: 1px solid #f1f3f4 !important;
            line-height: 1.4 !important;
            letter-spacing: 0.01em !important;
        }
        
        .stDataFrame div[data-testid="stDataFrame"] div[data-testid="stTable"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
        
        .stDataFrame div[data-testid="stDataFrame"] div[data-testid="stTable"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
            text-align: left !important;
        }
        
        /* Streamlit tablo h√ºcrelerini zorla override et */
        [data-testid="stDataFrame"] table td {
            font-family: var(--font-primary) !important;
            font-weight: var(--font-normal) !important;
            font-size: var(--font-size-sm) !important;
            color: #4a5568 !important;
            padding: 14px 20px !important;
            border-bottom: 1px solid #f1f3f4 !important;
            line-height: 1.4 !important;
            letter-spacing: 0.01em !important;
        }
        
        [data-testid="stDataFrame"] table th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            font-size: var(--font-size-sm) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            color: #2d3748 !important;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
            padding: 16px 20px !important;
            border-bottom: 2px solid #dee2e6 !important;
            text-align: left !important;
        }
        
        /* ƒ∞lk s√ºtun (isimler) i√ßin zorla override */
        [data-testid="stDataFrame"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
            text-align: left !important;
        }
        
        /* Sayƒ±sal deƒüerler i√ßin zorla override */
        [data-testid="stDataFrame"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
        
        /* T√ºm tablo elementlerini zorla override et */
        [data-testid="stDataFrame"] * {
            font-family: var(--font-primary) !important;
        }
        
        [data-testid="stDataFrame"] table * {
            font-family: var(--font-primary) !important;
        }
        
        /* CSS specificity artƒ±rma */
        body [data-testid="stDataFrame"] table td {
            font-family: var(--font-primary) !important;
            font-weight: var(--font-normal) !important;
            font-size: var(--font-size-sm) !important;
            color: #4a5568 !important;
        }
        
        body [data-testid="stDataFrame"] table th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            font-size: var(--font-size-sm) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            color: #2d3748 !important;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
        }
        
        body [data-testid="stDataFrame"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
        }
        
        body [data-testid="stDataFrame"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
        
        /* En g√º√ßl√º override - Streamlit'in inline CSS'ini bile ge√ßersiz kƒ±l */
        html body [data-testid="stDataFrame"] table td {
            font-family: var(--font-primary) !important;
            font-weight: var(--font-normal) !important;
            font-size: var(--font-size-sm) !important;
            color: #4a5568 !important;
            padding: 14px 20px !important;
            border-bottom: 1px solid #f1f3f4 !important;
            line-height: 1.4 !important;
            letter-spacing: 0.01em !important;
        }
        
        html body [data-testid="stDataFrame"] table th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            font-size: var(--font-size-sm) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            color: #2d3748 !important;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
            padding: 16px 20px !important;
            border-bottom: 2px solid #dee2e6 !important;
            text-align: left !important;
        }
        
        html body [data-testid="stDataFrame"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
            text-align: left !important;
        }
        
        html body [data-testid="stDataFrame"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
        
        /* Streamlit'in kendi CSS'ini tamamen override et */
        .stDataFrame [data-testid="stDataFrame"] table td,
        .stDataFrame [data-testid="stDataFrame"] table th,
        [data-testid="stDataFrame"] table td,
        [data-testid="stDataFrame"] table th {
            font-family: var(--font-primary) !important;
        }
        
        /* H√ºcre i√ßi font override'larƒ± */
        .stDataFrame [data-testid="stDataFrame"] table td:first-child,
        [data-testid="stDataFrame"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
        }
        
        .stDataFrame [data-testid="stDataFrame"] table td:not(:first-child),
        [data-testid="stDataFrame"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
        }
        
        /* JavaScript ile CSS injection i√ßin hazƒ±rlƒ±k */
        .custom-table-fonts {
            font-family: var(--font-primary) !important;
        }
        
        .custom-table-fonts td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
        }
        
        .custom-table-fonts td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
        
        .custom-table-fonts th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
        }
        
        /* En g√º√ßl√º CSS override - Streamlit'in t√ºm CSS'ini ge√ßersiz kƒ±l */
        /* CSS specificity maksimum seviyede */
        html body div[data-testid="stDataFrame"] table td {
            font-family: var(--font-primary) !important;
            font-weight: var(--font-normal) !important;
            font-size: var(--font-size-sm) !important;
            color: #4a5568 !important;
            padding: 14px 20px !important;
            border-bottom: 1px solid #f1f3f4 !important;
            line-height: 1.4 !important;
            letter-spacing: 0.01em !important;
        }
        
        html body div[data-testid="stDataFrame"] table th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            font-size: var(--font-size-sm) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            color: #2d3748 !important;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
            padding: 16px 20px !important;
            border-bottom: 2px solid #dee2e6 !important;
            text-align: left !important;
        }
        
        html body div[data-testid="stDataFrame"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
            text-align: left !important;
        }
        
        html body div[data-testid="stDataFrame"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
        /* Streamlit'in kendi CSS'ini tamamen override et - T√ºm olasƒ± selector'lar */
        div[data-testid="stDataFrame"] table td,
        div[data-testid="stDataFrame"] table th,
        .stDataFrame table td,
        .stDataFrame table th,
        [data-testid="stDataFrame"] table td,
        [data-testid="stDataFrame"] table th {
            font-family: var(--font-primary) !important;
        }
        
        /* H√ºcre i√ßi font override'larƒ± - T√ºm olasƒ± selector'lar */
        div[data-testid="stDataFrame"] table td:first-child,
        .stDataFrame table td:first-child,
        [data-testid="stDataFrame"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
        }
        
        div[data-testid="stDataFrame"] table td:not(:first-child),
        .stDataFrame table td:not(:first-child),
        [data-testid="stDataFrame"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
        }
        
        /* CSS specificity maksimum seviyede - Streamlit'in t√ºm CSS'ini ge√ßersiz kƒ±l */
        /* En g√º√ßl√º selector'lar */
        html body div[data-testid="stDataFrame"] div[data-testid="stTable"] table td {
            font-family: var(--font-primary) !important;
            font-weight: var(--font-normal) !important;
            font-size: var(--font-size-sm) !important;
            color: #4a5568 !important;
            padding: 14px 20px !important;
            border-bottom: 1px solid #f1f3f4 !important;
            line-height: 1.4 !important;
            letter-spacing: 0.01em !important;
        }
        
        html body div[data-testid="stDataFrame"] div[data-testid="stTable"] table th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            font-size: var(--font-size-sm) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            color: #2d3748 !important;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
            padding: 16px 20px !important;
            border-bottom: 2px solid #dee2e6 !important;
            text-align: left !important;
        }
        
        html body div[data-testid="stDataFrame"] div[data-testid="stTable"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
            text-align: left !important;
        }
        
        html body div[data-testid="stDataFrame"] div[data-testid="stTable"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
        
        /* Ek g√º√ßl√º selector'lar */
        html body div[data-testid="stDataFrame"] div[data-testid="stTable"] div[data-testid="stTableCell"] {
            font-family: var(--font-primary) !important;
        }
        
        html body div[data-testid="stDataFrame"] div[data-testid="stTable"] div[data-testid="stTableCell"]:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
        }
        
        html body div[data-testid="stDataFrame"] div[data-testid="stTable"] div[data-testid="stTableCell"]:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
        }
        
        /* √ñzel tablo wrapper CSS'i - Maksimum g√º√ß */
        .custom-table-wrapper [data-testid="stDataFrame"] table td {
            font-family: var(--font-primary) !important;
            font-weight: var(--font-normal) !important;
            font-size: var(--font-size-sm) !important;
            color: #4a5568 !important;
            padding: 14px 20px !important;
            border-bottom: 1px solid #f1f3f4 !important;
            line-height: 1.4 !important;
            letter-spacing: 0.01em !important;
        }
        
        .custom-table-wrapper [data-testid="stDataFrame"] table th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            font-size: var(--font-size-sm) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            color: #2d3748 !important;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
            padding: 16px 20px !important;
            border-bottom: 2px solid #dee2e6 !important;
            text-align: left !important;
        }
        
        .custom-table-wrapper [data-testid="stDataFrame"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
            text-align: left !important;
        }
        
        .custom-table-wrapper [data-testid="stDataFrame"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
        
        /* En g√º√ßl√º CSS override - Streamlit'in t√ºm CSS'ini ge√ßersiz kƒ±l */
        /* CSS specificity maksimum seviyede */
        html body .custom-table-wrapper [data-testid="stDataFrame"] table td {
            font-family: var(--font-primary) !important;
            font-weight: var(--font-normal) !important;
            font-size: var(--font-size-sm) !important;
            color: #4a5568 !important;
            padding: 14px 20px !important;
            border-bottom: 1px solid #f1f3f4 !important;
            line-height: 1.4 !important;
            letter-spacing: 0.01em !important;
        }
        
        html body .custom-table-wrapper [data-testid="stDataFrame"] table th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            font-size: var(--font-size-sm) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            color: #2d3748 !important;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
            padding: 16px 20px !important;
            border-bottom: 2px solid #dee2e6 !important;
            text-align: left !important;
        }
        
        html body .custom-table-wrapper [data-testid="stDataFrame"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
            text-align: left !important;
        }
        
        html body .custom-table-wrapper [data-testid="stDataFrame"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
        
        /* Ek g√º√ßl√º selector'lar */
        html body .custom-table-wrapper [data-testid="stDataFrame"] div[data-testid="stTable"] table td {
            font-family: var(--font-primary) !important;
            font-weight: var(--font-normal) !important;
            font-size: var(--font-size-sm) !important;
            color: #4a5568 !important;
        }
        
        html body .custom-table-wrapper [data-testid="stDataFrame"] div[data-testid="stTable"] table th {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            font-size: var(--font-size-sm) !important;
            text-transform: uppercase !important;
            letter-spacing: 0.05em !important;
            color: #2d3748 !important;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
        }
        
        html body .custom-table-wrapper [data-testid="stDataFrame"] div[data-testid="stTable"] table td:first-child {
            font-family: var(--font-secondary) !important;
            font-weight: var(--font-semibold) !important;
            color: #1a202c !important;
        }
        
        html body .custom-table-wrapper [data-testid="stDataFrame"] div[data-testid="stTable"] table td:not(:first-child) {
            font-family: var(--font-mono) !important;
            font-weight: var(--font-medium) !important;
            color: #2c5282 !important;
            text-align: right !important;
        }
    </style>
    """, unsafe_allow_html=True)

# =============== 2) ORTAK YARDIMCILAR ===============

# ---- Loading placeholder helpers (idempotent, session-safe) ----
def get_loading_placeholder():
    """Tek bir loading placeholder d√∂nd√ºr√ºr. Yoksa olu≈üturur."""
    key = "__loading_ph__"
    ph = st.session_state.get(key)
    if ph is None:
        st.session_state[key] = st.empty()
        ph = st.session_state[key]
    return ph

def clear_loading_placeholder():
    """Varsa placeholder'ƒ± temizler; yoksa sessizce ge√ßer."""
    ph = st.session_state.get("__loading_ph__")
    if ph is not None:
        try:
            ph.empty()
        except Exception:
            pass

# --- Price & difficulty helpers (centralized) ---
SCENARIO_BASELINE = "Ger√ßek√ßi"  # referans senaryo

# Override'lƒ± senaryo normlarƒ± okuma helper'ƒ±
def get_effective_scenario_norms() -> dict:
    """SCENARIO_NORMS √ºzerine override varsa onu d√∂nd√ºr√ºr."""
    try:
        ovr = st.session_state.get("SCENARIO_NORMS_OVR")
        if isinstance(ovr, dict) and ovr:
            return ovr
    except Exception:
        pass
    return SCENARIO_NORMS

def get_scenario_multiplier_for_price(current_scenario: str) -> float:
    # Temel (Ger√ßek√ßi) ile mevcut senaryonun 'Temel' normunu oranla
    try:
        norms_map = get_effective_scenario_norms()
        ref = float(norms_map.get(SCENARIO_BASELINE, SCENARIO_NORMS["Ger√ßek√ßi"]) ["Temel"])
        cur = float(norms_map.get(current_scenario, SCENARIO_NORMS["Ger√ßek√ßi"]) ["Temel"])
        return (cur / ref) if ref > 0 else 1.0
    except Exception:
        return 1.0

def _update_diff_cache():
    # Zorluk UI/State: her rerun'da taze hesapla ve cache'e yaz
    keys = ["f_winter", "f_heavy", "f_repeat", "f_shared", "f_cong", "f_pump"]
    z = 1.0
    for k in keys:
        try:
            v = float(st.session_state.get(k, 0.0) or 0.0)
        except Exception:
            v = 0.0
        # v √∂rn. 0.20 ise +%20 verimsizlik => 1.20
        z *= (1.0 + v)
    st.session_state["_diff_total_mult_cache"] = z
    return z

def get_difficulty_multiplier_cached() -> float:
    # Fiyat/hesap tarafƒ± buradan okusun (yoksa 1.0)
    try:
        return float(st.session_state.get("_diff_total_mult_cache", 1.0))
    except Exception:
        return 1.0

@st.cache_data(ttl=3600)  # 1 saat cache
def get_default_metraj_df(selected_elements):
    """Metraj tablosu i√ßin varsayƒ±lan DataFrame'i cache'le"""
    rows = []
    for k in selected_elements:
        if k in LABELS:
            rows.append({"Eleman (–≠–ª–µ–º–µ–Ω—Ç)": LABELS[k], "Metraj (m¬≥) (–û–±—ä—ë–º, –º¬≥)": 1.0})
        else:
            st.warning(f"Tanƒ±msƒ±z eleman anahtarƒ± atlandƒ±: {k}")
    return pd.DataFrame(rows)

@st.cache_data(ttl=3600)  # 1 saat cache
def get_default_roles_df():
    """Roller tablosu i√ßin varsayƒ±lan DataFrame'i cache'le"""
    return pd.DataFrame([
        {"Rol (–†–æ–ª—å)":"brigadir","Aƒüƒ±rlƒ±k (–í–µ—Å)":0.10,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":120000,"%RUS":100,"%SNG":0,"%TUR":0},
        {"Rol (–†–æ–ª—å)":"kalfa","Aƒüƒ±rlƒ±k (–í–µ—Å)":0.20,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":110000,"%RUS":20,"%SNG":60,"%TUR":20},
        {"Rol (–†–æ–ª—å)":"usta_demirci","Aƒüƒ±rlƒ±k (–í–µ—Å)":0.60,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":100000,"%RUS":10,"%SNG":70,"%TUR":20},
        {"Rol (–†–æ–ª—å)":"usta_kalipci","Aƒüƒ±rlƒ±k (–í–µ—Å)":0.60,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":100000,"%RUS":10,"%SNG":70,"%TUR":20},
        {"Rol (–†–æ–ª—å)":"betoncu","Aƒüƒ±rlƒ±k (–í–µ—Å)":1.00,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":90000,"%RUS":10,"%SNG":70,"%TUR":20},
        {"Rol (–†–æ–ª—å)":"duz_isci","Aƒüƒ±rlƒ±k (–í–µ—Å)":0.50,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":80000,"%RUS":10,"%SNG":70,"%TUR":20},
    ])

def gross_from_net(net: float, ndfl_rate: float) -> float:
    return float(net) if ndfl_rate<=0 else float(net)/(1.0-ndfl_rate)

def employer_cost_for_gross(gross: float, ops: float, oss: float, oms: float, nsipz: float) -> float:
    return float(gross)*(1.0+ops+oss+oms+nsipz)

# --- Progressive NDFL helpers (resident brackets 2025) ---
def _resident_ndfl_brackets_2025() -> list[tuple[float|None, float]]:
    """Returns [(upper_limit, rate), ...] with last upper_limit=None as infinity."""
    # Annual thresholds (RUB) and rates
    return [
        (2_400_000.0, 0.13),
        (5_000_000.0, 0.15),
        (20_000_000.0, 0.18),
        (50_000_000.0, 0.20),
        (None, 0.22),
    ]

def gross_from_net_progressive_resident(net_annual: float) -> float:
    """Invert progressive tax to get annual gross from annual net, using resident brackets 2025."""
    try:
        target_net = max(0.0, float(net_annual))
    except Exception:
        target_net = 0.0
    if target_net <= 0.0:
        return 0.0

    brackets = _resident_ndfl_brackets_2025()
    gross_accum = 0.0
    net_remaining = target_net
    prev_limit = 0.0

    for upper, rate in brackets:
        segment_width = (upper - prev_limit) if upper is not None else None
        segment_net_cap = (segment_width * (1.0 - rate)) if segment_width is not None else None

        if segment_width is None:
            # infinite top bracket
            gross_accum += net_remaining / (1.0 - rate)
            net_remaining = 0.0
            break

        if net_remaining >= segment_net_cap - 1e-9:
            # fill entire segment
            gross_accum += segment_width
            net_remaining -= segment_net_cap
            prev_limit = upper
            continue
        else:
            # partial in this segment
            gross_accum += net_remaining / (1.0 - rate)
            net_remaining = 0.0
            break

    return gross_accum

def try_fetch_json(url:str):
    try:
        r=requests.get(url, timeout=8, headers={"User-Agent":"Mozilla/5.0"})
        r.raise_for_status()
        return r.json()
    except Exception:
        return None

def auto_fetch_rates():
    for u in AUTO_RATE_SOURCES:
        js=try_fetch_json(u)
        if isinstance(js,dict) and js: return js,u
    return None,None

def workdays_between(start: date, end: date, mode: str) -> int:
    if end < start: return 0
    total=0
    for i in range((end-start).days+1):
        d = start + timedelta(days=i)
        wd = d.weekday()
        if mode=="tam_calisma": total+=1
        elif mode=="her_pazar": total += (wd!=6)
        elif mode=="hafta_sonu_tatil": total += (wd not in (5,6))
        elif mode=="iki_haftada_bir_pazar":
            if wd==6:
                week_idx=((d-start).days//7)
                if (week_idx%2)==1: continue
            total+=1
        else: total+=(wd!=6)
    
    return total

def month_start(d: date)->date: return d.replace(day=1)
def next_month(d: date)->date:
    return d.replace(year=d.year+1, month=1, day=1) if d.month==12 else d.replace(month=d.month+1, day=1)
def last_day_of_month(d: date)->date: return next_month(d)-timedelta(days=1)

def iter_months(start:date,end:date):
    cur=month_start(start)
    while cur<=end:
        yield cur
        cur=next_month(cur)

def workdays_in_month_range(start: date, end: date, mode: str) -> pd.DataFrame:
    rows=[]
    for m0 in iter_months(start,end):
        m1=last_day_of_month(m0)
        a,b=max(start,m0),min(end,m1)
        if a>b: continue
        rows.append({"Ay (–ú–µ—Å—è—Ü)":m0.strftime("%Y-%m"),"ƒ∞≈ü G√ºn√º (–†–∞–±. –¥–µ–Ω—å)":workdays_between(a,b,mode)})
    return pd.DataFrame(rows)

def percent_input(label:str, default_pct:float, min_val:float=0.0, max_val:float=100.0, help:str="", key:str|None=None, disabled:bool=False)->float:
    # Basit widget, session_state otomatik g√ºncellenir
    v = st.number_input(
        label, 
        min_value=min_val, 
        max_value=max_val, 
        value=default_pct, 
        step=0.5, 
        help=help, 
        key=key, 
        disabled=disabled
    )
    
    return v/100.0  # y√ºzde ‚Üí oran
def round_preserve_sum(values):
    vals=[float(x) for x in values]
    floors=[math.floor(x) for x in vals]
    rem=int(round(sum(vals)))-sum(floors)
    fracs=[(i, vals[i]-floors[i]) for i in range(len(vals))]
    fracs.sort(key=lambda t:t[1], reverse=True)
    res=floors[:]
    for i,_ in fracs[:max(0,rem)]:
        res[i]+=1
    return res
# =============== 3) ƒ∞≈ûVEREN MALƒ∞YETƒ∞ (RUS/SNG/TUR) ===============
def monthly_role_cost_multinational(row: pd.Series, prim_sng: bool, prim_tur: bool, extras_person_ex_vat: float) -> dict:
    """
    √ñNEMLƒ∞:
    - ƒ∞≈üveren primleri, yalnƒ±z RESMƒ∞ BR√úT tutara uygulanƒ±r (OPS/OSS/OMS + NSiPZ). Br√ºt+NDFL deƒüil.
    - 'Gayriresm√Æ/Elden' (nakit) kƒ±sma hi√ßbir vergi/prim eklenmez; sadece komisyon (CASH_COMMISSION_RATE) eklenir.
    - SNG (patent): resmi br√ºt, SNG_TAXED_BASE ile sƒ±nƒ±rlanƒ±r; + aylƒ±k patent tutarƒ± eklenir.
    - VKS (TR): yalnƒ±z NSiPZ uygulanƒ±r (OPS/OSS/OMS = 0).
    """
    net=float(row["Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)"])

    # Get constants with override support
    OVR = st.session_state.get("CONST_OVERRIDES", {})
    ndfl_rus = OVR.get("NDFL_RUS", NDFL_RUS)
    ndfl_sng = OVR.get("NDFL_SNG", NDFL_SNG)
    ndfl_tur = OVR.get("NDFL_TUR", NDFL_TUR)
    ops = OVR.get("OPS", OPS)
    oss = OVR.get("OSS", OSS)
    oms = OVR.get("OMS", OMS)
    nsipz_risk_rus_sng = OVR.get("NSIPZ_RISK_RUS_SNG", NSIPZ_RISK_RUS_SNG)
    nsipz_risk_tur_vks = OVR.get("NSIPZ_RISK_TUR_VKS", NSIPZ_RISK_TUR_VKS)
    sng_patent_month = OVR.get("SNG_PATENT_MONTH", SNG_PATENT_MONTH)
    sng_taxed_base = OVR.get("SNG_TAXED_BASE", SNG_TAXED_BASE)
    tur_taxed_base = OVR.get("TUR_TAXED_BASE", TUR_TAXED_BASE)
    cash_commission_rate = OVR.get("CASH_COMMISSION_RATE", CASH_COMMISSION_RATE)

    # Vergi rejimi: Artan (2025) mƒ±, sabit oran mƒ±?
    use_progressive_ndfl = bool(st.session_state.get("use_progressive_ndfl", True))

    # RUS (tam sigortalƒ±)
    if use_progressive_ndfl:
        gross_rus = gross_from_net_progressive_resident(net*12.0) / 12.0
    else:
        gross_rus = gross_from_net(net, ndfl_rus)
    per_rus   = employer_cost_for_gross(gross_rus, ops, oss, oms, nsipz_risk_rus_sng) + extras_person_ex_vat

    # SNG (patent; t√ºm sigorta sistemleri + patent; resmi br√ºt asgariyi saƒülar)
    if use_progressive_ndfl:
        # 2025 kademeli NDFL'i yƒ±llƒ±k bazda uygula (patent avansƒ± mahsup edilmez ‚Äî sade model)
        gross_sng_full = gross_from_net_progressive_resident(net*12.0) / 12.0
    else:
        gross_sng_full = gross_from_net(net, ndfl_sng)
    # Resmi br√ºt asgariyi saƒüla
    min_off_sng = float(sng_taxed_base)
    if gross_sng_full < min_off_sng:
        gross_sng_full = min_off_sng
    if prim_sng:
        gross_sng_off = min_off_sng                               # resmi br√ºt en az asgari
        prim_amount   = max(gross_sng_full - gross_sng_off, 0.0)   # elden kƒ±sƒ±m (vergisiz/primsiz)
        commission    = prim_amount * cash_commission_rate
    else:
        gross_sng_off = gross_sng_full                             # prim yoksa tamamƒ± resmi olabilir
        prim_amount   = 0.0
        commission    = 0.0
    per_sng = employer_cost_for_gross(gross_sng_off, ops, oss, oms, nsipz_risk_rus_sng) \
              + sng_patent_month + extras_person_ex_vat + prim_amount + commission

    # TUR (VKS; yalnƒ±z i≈ü kazasƒ± primi; resmi br√ºt asgariyi saƒülar)
    if use_progressive_ndfl:
        # VKS (TR) ‚Äî progressive NDFL resident brackets on annualized basis (12 aylƒ±k varsayƒ±m)
        gross_tur_full = gross_from_net_progressive_resident(net*12.0) / 12.0
    else:
        gross_tur_full = gross_from_net(net, ndfl_tur)
    # Resmi br√ºt asgariyi saƒüla
    min_off_tur = float(tur_taxed_base)
    if gross_tur_full < min_off_tur:
        gross_tur_full = min_off_tur
    if prim_tur:
        gross_tur_off = min_off_tur
        prim_tr       = max(gross_tur_full - gross_tur_off, 0.0)
        comm_tr       = prim_tr * cash_commission_rate
    else:
        gross_tur_off = gross_tur_full
        prim_tr       = 0.0
        comm_tr       = 0.0
    per_tur = employer_cost_for_gross(gross_tur_off, 0.0,0.0,0.0,nsipz_risk_tur_vks) \
              + extras_person_ex_vat + prim_tr + comm_tr

    # Uzaktan √ßalƒ±≈üma senaryolarƒ± kaldƒ±rƒ±ldƒ± ‚Äî standart yerinde √ßalƒ±≈üma varsayƒ±mƒ±

    # √úlke karmasƒ±
    p_rus=max(float(row["%RUS"]),0.0); p_sng=max(float(row["%SNG"]),0.0); p_tur=max(float(row["%TUR"]),0.0)
    tot=p_rus+p_sng+p_tur or 100.0
    p_rus,p_sng,p_tur = p_rus/tot, p_sng/tot, p_tur/tot
    blended=p_rus*per_rus+p_sng*per_sng+p_tur*per_tur

    return {"per_person":{"RUS":per_rus,"SNG":per_sng,"TUR":per_tur,"BLENDED":blended}}

# =============== 4) NORM OLU≈ûTURMA ===============
def build_norms_for_scenario(scenario: str, selected_elements: list[str]) -> tuple[float, dict[str, float]]:
    """
    - selected_elements i√ßindeki her girdiyi 'canon_key' ile normalize eder.
    - SCENARIO_NORMS'tan TR isimle okur (√∂rn: 'Grobeton', 'Temel' vs).
    - Bulunamayan anahtar/etiketlerde hata fƒ±rlatmaz; uyarƒ± g√∂sterir ve o kalemi atlar.
    - √áƒ±kƒ±≈ü: (Temel normu, {FULL_LABEL -> relatif √ßarpan})
    """
    norms_map = get_effective_scenario_norms()
    norms = norms_map.get(scenario) or SCENARIO_NORMS["Ger√ßek√ßi"]
    n_temel = float(norms["Temel"])

    # 1) ge√ßerli kanonik anahtar listesi
    canon_list: list[str] = []
    for raw in (selected_elements or []):
        k = canon_key(raw)
        if not k:
            st.warning(f"Tanƒ±msƒ±z eleman anahtarƒ± atlandƒ±: {raw}")
            continue
        if k not in CANON_KEYS:
            st.warning(f"Kanonik listede yok, atlandƒ±: {raw}")
            continue
        canon_list.append(k)

    # Hi√ß eleman kalmadƒ±ysa, t√ºm√ºn√º varsay
    if not canon_list:
        canon_list = list(CANON_KEYS)

    # 2) relatif katsayƒ±larƒ± hesaplamak i√ßin referanslar
    rel_vals = []
    for k in canon_list:
        tr_name = get_tr_name_from_label(safe_label_from_key(k))
        if tr_name not in norms:
            st.warning(f"SCENARIO_NORMS i√ßinde bulunamadƒ±: {tr_name}")
            continue
        rel_vals.append(norms[tr_name] / n_temel)

    avg_rel = (sum(rel_vals) / len(rel_vals)) if rel_vals else 1.0

    # 3) √ßƒ±kƒ±≈ü haritasƒ±
    k_norm: dict[str, float] = {}
    for k in canon_list:
        full_label = safe_label_from_key(k)
        tr_name = get_tr_name_from_label(full_label)
        base = norms.get(tr_name, n_temel) / n_temel
        k_norm[full_label] = base / (avg_rel or 1.0)

    return n_temel, k_norm

def apply_overhead_on_core(core_cost:float, p:float)->float:
    p=min(max(p,0.0),OVERHEAD_RATE_MAX)
    return p*core_cost

# =============== 5) GPT / √ñNERƒ∞ / ORAN KONTROL ===============
def extract_json_block(text: str) -> str:
    """```json ... ``` i√ßinden ham JSON'u temizle."""
    if text is None: return ""
    t = text.strip()
    if "```" in t:
        t = t.split("```", 1)[1] if t.startswith("```") else t
        t = t.replace("json", "", 1) if t.lstrip().lower().startswith("json") else t
        t = t.split("```")[0]
    return t.strip()

def get_openai_client():
    api_key = (st.session_state.get("OPENAI_API_KEY","") or os.getenv("OPENAI_API_KEY",""))
    if not (_OPENAI_AVAILABLE and api_key): return None
    return OpenAI(api_key=api_key)

def gpt_propose_params(payload: dict, model: str = "gpt-4o-mini") -> dict|None:
    client = get_openai_client()
    if client is None: return None
    system = "Kƒ±demli ≈üantiye maliyet ≈üefisin. Sadece JSON yanƒ±t ver. Y√ºzdeler 0-100 sayƒ±."
    user = ("A≈üaƒüƒ±daki proje parametrelerine g√∂re makul ayar √∂ner.\n"
            '≈ûema: {"consumables_pct": number, "overhead_pct": number, "hours_per_day": number, '
            '"scenario": "ƒ∞deal|Ger√ßek√ßi|K√∂t√º", '
            '"reasons": {"consumables": string, "overhead": string, "hours": string, "scenario": string}}\n\n'
            f"VERƒ∞: {json.dumps(payload, ensure_ascii=False)}")
    try:
        r = client.chat.completions.create(
            model=model, temperature=0.2,
            messages=[{"role":"system","content":system},{"role":"user","content":user}]
        )
        return json.loads(extract_json_block(r.choices[0].message.content))
    except Exception:
        return None

def gpt_verify_rates_via_web(queries: list[str], model: str="gpt-4o-mini") -> dict|None:
    client = get_openai_client()
    if client is None: return None
    tavily_key = (st.session_state.get("TAVILY_API_KEY","") or os.getenv("TAVILY_API_KEY",""))
    snippets=[]
    if tavily_key:
        try:
            for q in queries:
                resp=requests.post("https://api.tavily.com/search",
                    json={"api_key":tavily_key,"query":q,"search_depth":"basic","max_results":3},timeout=12).json()
                for it in resp.get("results",[]):
                    snippets.append(f"{it.get('url','')} ‚Äî {it.get('content','')[:800]}")
        except Exception:
            pass
    if not snippets:
        remote,src=auto_fetch_rates()
        if not remote: return None
        snippets=[json.dumps(remote,ensure_ascii=False), f"KAYNAK: {src}"]
    corpus="\n\n---\n\n".join(snippets)
    system=("A≈üaƒüƒ±daki metinden Rusya 2024/25 i≈ü√ßilik vergi/prim oranlarƒ±nƒ± √ßƒ±kar. "
            'JSON anahtarlarƒ±: ["NDFL_RUS","NDFL_SNG","NDFL_TUR","OPS","OSS","OMS","NSIPZ_RISK_RUS_SNG","NSIPZ_RISK_TUR_VKS",'
            '"SNG_PATENT_MONTH","SNG_TAXED_BASE","TUR_TAXED_BASE","CASH_COMMISSION_RATE"] ‚Äî y√ºzdeler 0-1 oran.')
    try:
        r=client.chat.completions.create(model=model,temperature=0.0,
              messages=[{"role":"system","content":system},{"role":"user","content":corpus}])
        return json.loads(extract_json_block(r.choices[0].message.content))
    except Exception:
        return None

# =============== 6) RAG (Y√ºkle-ƒ∞ndeksle-Ara) ===============
RAG_DIR  = "rag_data"
RAG_FILE = os.path.join(RAG_DIR, "store.jsonl")  # {id, text, embedding, meta}

def ensure_rag_dir():
    os.makedirs(RAG_DIR, exist_ok=True)
    if not os.path.exists(RAG_FILE): open(RAG_FILE, "a", encoding="utf-8").close()

def iter_rag_store():
    ensure_rag_dir()
    with open(RAG_FILE,"r",encoding="utf-8") as f:
        for line in f:
            line=line.strip()
            if not line: continue
            try: yield json.loads(line)
            except Exception: continue

def load_rag_in_memory():
    items=list(iter_rag_store())
    embeds=[np.array(it["embedding"],dtype=np.float32) for it in items]
    return items, embeds

def save_rag_records(recs:list[dict]):
    ensure_rag_dir()
    with open(RAG_FILE,"a",encoding="utf-8") as f:
        for r in recs: f.write(json.dumps(r,ensure_ascii=False)+"\n")

def chunk_text(s: str, max_words: int=220):
    words=s.split()
    return [" ".join(words[i:i+max_words]) for i in range(0,len(words),max_words)]

def file_to_chunks(uploaded) -> list[dict]:
    name=uploaded.name; ext=name.lower().split(".")[-1]; chunks=[]
    try:
        if ext=="txt":
            txt=uploaded.read().decode("utf-8","ignore")
            for i,ch in enumerate(chunk_text(txt)): chunks.append({"text":ch,"meta":{"filename":name,"kind":"txt","part":i}})
        elif ext=="csv":
            df=pd.read_csv(uploaded)
            for i,row in df.iterrows():
                s=", ".join(f"{c}={row[c]}" for c in df.columns)
                for j,ch in enumerate(chunk_text(s,120)):
                    chunks.append({"text":ch,"meta":{"filename":name,"kind":"csv","row":int(i),"part":j}})
        elif ext in ("xlsx","xls"):
            df=pd.read_excel(uploaded)
            for i,row in df.iterrows():
                s=", ".join(f"{c}={row[c]}" for c in df.columns)
                for j,ch in enumerate(chunk_text(s,120)):
                    chunks.append({"text":ch,"meta":{"filename":name,"kind":"xlsx","row":int(i),"part":j}})
        else:
            chunks.append({"text":f"[desteklenmeyen t√ºr] {name}","meta":{"filename":name,"kind":ext}})
    except Exception as e:
        chunks.append({"text":f"[okuma hatasƒ±: {e}]","meta":{"filename":name,"kind":"err"}})
    return chunks

def embed_texts(texts:list[str]) -> list[list[float]]|None:
    client=get_openai_client()
    if client is None: return None
    try:
        res=client.embeddings.create(model="text-embedding-3-small", input=texts)
        return [d.embedding for d in res.data]
    except Exception:
        return None

def cosine_sim(a: np.ndarray, b: np.ndarray) -> float:
    na=np.linalg.norm(a); nb=np.linalg.norm(b)
    if na==0 or nb==0: return 0.0
    return float(np.dot(a,b)/(na*nb))

def rag_search(query:str, topk:int=5):
    items, embeds = load_rag_in_memory()
    q_embs = embed_texts([query])
    if not q_embs: return []
    q = np.array(q_embs[0], dtype=np.float32)
    scored=[]
    for it, e in zip(items, embeds):
        scored.append((cosine_sim(q,e), it))
    scored.sort(key=lambda t:t[0], reverse=True)
    return [it for s,it in scored[:topk] if s>0.15]

def controller_chat(current_state: dict):
    """Betonarme mod√ºl√ºyle sƒ±nƒ±rlƒ± AI denetleyicisi ‚Äî √∂nerir, onayƒ±nla uygular."""
    st.markdown("### üß† RAG + AI Denetleyici (Betonarme Mod√ºl√º)")
    client = get_openai_client()
    if client is None:
        st.info("OpenAI anahtarƒ± yok ‚Üí denetleyici devre dƒ±≈üƒ±.")
        return

    if "ctrl_msgs" not in st.session_state:
        st.session_state["ctrl_msgs"] = [
            {"role":"system","content":(
                "Rol√ºn: Betonarme i≈ü√ßilik mod√ºl√º asistanƒ±. Sadece bu mod√ºlden konu≈ü. "
                "Deƒüi≈üiklik √∂nereceksen SADECE ≈üu JSON ≈üemasƒ±nƒ± d√∂nd√ºr:\n"
                '{"proposal_id":"uuid","notes":"...","changes":[\n'
                ' {"key":"consumables_rate_pct","new_value":number,"why":"..."},\n'
                ' {"key":"overhead_rate_pct","new_value":number,"why":"..."},\n'
                ' {"key":"hours_per_day","new_value":number,"why":"..."},\n'
                ' {"key":"scenario","new_value":"ƒ∞deal|Ger√ßek√ßi|K√∂t√º","why":"..."}\n]}'
            )}
        ]

    with st.expander("üìö Bilgi Bankasƒ±ndan baƒülam (RAG)", expanded=False):
        q = st.text_input("Sorgu")
        if st.button("üîé Ara") and q.strip():
            hits = rag_search(q.strip(), topk=6)
            st.session_state["rag_hits"] = hits or []
            st.success(f"{len(hits or [])} par√ßa.")
        for it in st.session_state.get("rag_hits", []):
            st.caption(f"‚Ä¢ {it.get('meta',{}).get('filename','?')} ‚Äî {it.get('meta',{})}")
            st.code(it.get("text","")[:700])

    user_msg = st.chat_input("Mesajƒ±nƒ±z‚Ä¶")
    if user_msg:
        st.session_state["ctrl_msgs"].append({"role":"user","content":user_msg})
        rag_snips = "\n\n".join(
            [f"[{i+1}] {it['meta'].get('filename','?')}: {it['text'][:600]}"
             for i,it in enumerate(st.session_state.get("rag_hits", []))]
        )
        prompt = f"STATE:\n{json.dumps(current_state,ensure_ascii=False)}\n\nRAG:\n{rag_snips or '(yok)'}\n"
        try:
            r = client.chat.completions.create(
                model="gpt-4o-mini", temperature=0.2,
                messages=st.session_state["ctrl_msgs"] + [{"role":"user","content":prompt}]
            )
            reply = r.choices[0].message.content or ""
        except Exception as e:
            reply = f"Hata: {e}"

        with st.chat_message("assistant"):
            st.write(reply)

        try: st.session_state["last_controller_proposal"] = json.loads(extract_json_block(reply))
        except Exception: pass

    prop = st.session_state.get("last_controller_proposal")
    if prop and isinstance(prop, dict) and "changes" in prop:
        st.markdown("üìù AI teklifi")
        st.code(json.dumps(prop, ensure_ascii=False, indent=2), language="json")
        if st.button("‚úÖ √ñnerileri uygula"):
            cons_target=None; over_target=None
            for ch in prop.get("changes", []):
                if ch.get("key")=="consumables_rate_pct":
                    st.session_state["consumables_rate"] = float(ch.get("new_value",0.0))
                if ch.get("key")=="overhead_rate_pct":
                    st.session_state["overhead_rate"] = float(ch.get("new_value",0.0))
                if ch.get("key")=="hours_per_day":
                    st.session_state["hours_per_day"]=float(ch.get("new_value"))
                if ch.get("key")=="scenario":
                    st.session_state["scenario"]=str(ch.get("new_value"))
            st.success("Uygulandƒ±. Deƒüi≈üiklikler aktif.")
            # Tablolarƒ± korumak i√ßin rerun kullanmƒ±yoruz

# ========= PART 2/3 ‚Äî UI (UPDATED): tabs, inputs, pretty matrix, RAG, GPT Dev Console =========

# Helper function for setting defaults only once
def _set_once(k, v):
    if k not in st.session_state:
        st.session_state[k] = v

# Basit TR/RU birle≈ütirici
def bi(tr_text: str, ru_text: str) -> str:
    try:
        return f"{tr_text} / {ru_text}"
    except Exception:
        return str(tr_text)

# Ba≈ülƒ±k ve metin i√ßin daha ho≈ü TR+RU yerle≈üim yardƒ±mcƒ±larƒ±
def bih(tr: str, ru: str, level: int = 3):
    lvl = max(1, min(level, 6))
    st.markdown(f"{'#'*lvl} {tr}")
    st.caption(ru)

def bitr(tr: str, ru: str):
    st.markdown(tr)
    st.caption(ru)

st.set_page_config(page_title="Betonarme ƒ∞≈ü√ßilik (RUB/m¬≥) ‚Äî –†–∞—Å—á—ë—Ç –º–æ–Ω–æ–ª–∏—Ç", layout="wide")
inject_style()

# ---------- Modern Sidebar: API anahtarlarƒ± (isteƒüe baƒülƒ±) ----------
with st.sidebar:
    st.markdown("""
    <div style="text-align: center; padding: 1rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px; margin-bottom: 1rem;">
        <h3 style="margin: 0; color: white;">üîê Entegrasyonlar</h3>
        <p style="margin: 0.5rem 0 0 0; opacity: 0.9; font-size: 0.9rem;">API anahtarlarƒ± ile geli≈ümi≈ü √∂zellikler</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.caption(bi("üí° Anahtar girmezsen GPT/RAG √∂zellikleri √ßalƒ±≈ümaz.", "üí° –ë–µ–∑ –∫–ª—é—á–µ–π API —Ñ—É–Ω–∫—Ü–∏–∏ GPT/RAG –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç."))

    # Versiyon kutusu (compact, styled)
    with st.container(border=True):
        cols = st.columns([0.6,0.4])
        with cols[0]:
            st.caption(bi("S√ºr√ºm","–í–µ—Ä—Å–∏—è"))
            st.markdown(f"<div style='display:inline-block;padding:2px 8px;border-radius:9999px;background:#eef2ff;border:1px solid #c7d2fe;color:#3730a3;font-weight:600;'>v{get_app_version(auto_bump=True)}</div>", unsafe_allow_html=True)
        with cols[1]:
            if st.button("Patch ‚Üë", help=bi("Patch s√ºr√ºm√ºn√º artƒ±r","–£–≤–µ–ª–∏—á–∏—Ç—å patch-–≤–µ—Ä—Å–∏—é")):
                state = _load_version()
                state["version"] = _bump_patch(state.get("version","0.1.0"))
                state.setdefault("code_hash", _file_md5(__file__))
                _save_version(state)
                st.toast(bi("S√ºr√ºm g√ºncellendi","–í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"))
    
    st.markdown(bi("**ü§ñ OpenAI API Key**", "**ü§ñ –ö–ª—é—á OpenAI API**"))
    st.session_state["OPENAI_API_KEY"] = st.text_input(
        "OpenAI API Key", 
        type="password",
        value=st.session_state.get("OPENAI_API_KEY",""),
        help="GPT √∂nerileri i√ßin gerekli",
        placeholder="sk-..."
    )
    
    st.markdown(bi("**üåê Tavily API Key**", "**üåê –ö–ª—é—á Tavily API**"))
    st.session_state["TAVILY_API_KEY"] = st.text_input(
        "Tavily API Key (opsiyonel)", 
        type="password",
        value=st.session_state.get("TAVILY_API_KEY",""),
        help="Web arama ve doƒürulama i√ßin",
        placeholder="tvly-..."
    )
    
    # Sidebar alt bilgi
    st.markdown("---")
    # Alt bilgi kaldƒ±rƒ±ldƒ± (tekrarlƒ± s√ºr√ºm g√∂sterimini sadele≈ütiriyoruz)

# Modern ba≈ülƒ±k
st.markdown("""
<div class="main-header">
    <h1>üèóÔ∏è Betonarme Hesaplama Mod√ºl√º</h1>
    <p>Reinforced Concrete Labor Cost Calculator ‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç</p>
</div>
""", unsafe_allow_html=True)

st.markdown("""
<div style="text-align: center; margin-bottom: 2rem;">
    <p style="font-size: 1.2rem; color: #666; font-weight: 500;">
        üéØ Normalize Edilmi≈ü Normlar  üåç RUS/SNG/VKS Algorƒ±tmalarƒ±  üí∞ Gayriresm√Æ/Elden Vergisiz Kƒ±sƒ±m Dahil  üìä Sorumluluk Matrisi  üéì RAG GPT Eƒüitim Sistemi  üß† GPT Dev Console
    </p>
</div>
""", unsafe_allow_html=True)

# ---------- Modern Sekmeler ----------
tab_mantik, tab_sabitler, tab_genel, tab_eleman, tab_roller, tab_gider, tab_matris, tab_sonuclar, tab_asistan, tab_import = st.tabs([
    f"üßÆ {bi('Mantƒ±k','–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è')}",
    f"‚öôÔ∏è {bi('Sabitler','–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã')}",
    f"üöÄ {bi('Genel','–û–±—â–∏–µ')}", 
    f"üß© {bi('Eleman & Metraj','–≠–ª. –∏ –æ–±—ä—ë–º—ã')}", 
    f"üë• {bi('Roller','–†–æ–ª–∏')}", 
    f"üí∞ {bi('Giderler','–ó–∞—Ç—Ä–∞—Ç—ã')}", 
    f"üìã {bi('Matris','–ú–∞—Ç—Ä–∏—Ü–∞')}", 
    f"üìä {bi('Sonu√ßlar','–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')}", 
    f"ü§ñ {bi('Asistan','–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')}",
    f"üì• {bi('Import','–ò–º–ø–æ—Ä—Ç')}"
])
with tab_mantik:
    bih("üßÆ Hesap Mantƒ±ƒüƒ± ve Metodoloji","üßÆ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞—Å—á—ë—Ç–∞", level=3)
    bitr("Bu b√∂l√ºm, yazƒ±lƒ±mƒ±n neyi, nasƒ±l ve hangi sƒ±rayla hesapladƒ±ƒüƒ±nƒ± en sade haliyle a√ßƒ±klar.",
         "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –∏ –∫–∞–∫ —Å—á–∏—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞.")

    # 1) Terminoloji
    bih("1) Terminoloji","1) –¢–µ—Ä–º–∏–Ω—ã", level=4)
    st.markdown(
        """
        - **N**: Net maa≈ü (√ßalƒ±≈üanƒ±n eline ge√ßen, aylƒ±k)
        - **G**: Resmi br√ºt (aylƒ±k)
        - **r_NDFL**: Gelir vergisi oranƒ±. 2025 i√ßin artan kademeli (rezident): 13/15/18/20/22
        - **OPS/OSS/OMS**: Emeklilik/Sosyal/Saƒülƒ±k i≈üveren prim oranlarƒ± (yalnƒ±z resmi br√ºte)
        - **–ù–°–∏–ü–ó**: ƒ∞≈ü kazasƒ±/meslek hastalƒ±ƒüƒ± primi (i≈üveren)
        - **B_SNG**, **B_TUR**: Resmi br√ºt tavanlarƒ± (SNG ve VKS i√ßin)
        - **P**: Patent aylƒ±k sabit bedeli (SNG)
        - **k_cash**: Elden kƒ±sƒ±m komisyon oranƒ±
        - **E**: Elden (resmi tavanƒ±n √ºst√º) kƒ±sƒ±m (varsa)
        - **extras**: Ki≈üi ba≈üƒ± sabit ekstralar (yemek, barƒ±nma vb., KDV uygun ≈üekilde ayrƒ±≈ütƒ±rƒ±lƒ±r)
        """
    )

    # 2) Net‚ÜíBr√ºt (artan NDFL)
    bih("2) Net ‚Üí Br√ºt (Artan NDFL 2025)", "2) –ù–µ—Ç ‚Üí –ë—Ä—É—Ç—Ç–æ (–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ù–î–§–õ 2025)", level=4)
    st.markdown(
        """
        - Aylƒ±k net, yƒ±llƒ±kla≈ütƒ±rƒ±lƒ±r: 12 √ó N.
        - 2025 kademeleri (rezident): 2.4M/5M/20M/50M (‚ÇΩ) e≈üikleri, oranlar 13/15/18/20/22.
        - Yƒ±llƒ±k netten yƒ±llƒ±k br√ºte, her kademedeki net=br√ºt√ó(1‚àír) ili≈ükisiyle ters gidilerek ula≈üƒ±lƒ±r; aylƒ±k br√ºt = yƒ±llƒ±k br√ºt √∑ 12.
        - Bu mantƒ±k hem SNG (patent) hem VKS (TR) i√ßin uygulanƒ±r.
        """
    )

    # 3) SNG (patent) maliyeti
    bih("3) SNG (Patent) ‚Äî ƒ∞≈üveren Maliyeti","3) –°–ù–ì (–ø–∞—Ç–µ–Ω—Ç) ‚Äî –∑–∞—Ç—Ä–∞—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è", level=4)
    st.markdown(
        """
        1) Netten br√ºte: G = ProgressiveInverse(12√óN)/12.
        2) Resmi br√ºt ve elden:
           - G_official = min(G, B_SNG)
           - E = max(G ‚àí B_SNG, 0)
        3) Komisyon: C = E √ó k_cash
        4) ƒ∞≈üveren primli resmi kƒ±sƒ±m: G_official √ó (1 + OPS + OSS + OMS + –ù–°–∏–ü–ó)
        5) Toplam i≈üveren maliyeti (SNG):
        """
    )
    st.latex(r"\text{Cost}_{SNG} = G_{off}\,(1+OPS+OSS+OMS+HS) + P + extras + E + C")
    st.markdown("Burada HS = –ù–°–∏–ü–ó. Not: P (patent) NDFL'den mahsup edilmez ‚Äî sabit gider olarak eklenir.")

    # 4) VKS (TR) maliyeti
    bih("4) VKS (TR) ‚Äî ƒ∞≈üveren Maliyeti","4) –í–ö–° (–¢—É—Ä—Ü–∏—è) ‚Äî –∑–∞—Ç—Ä–∞—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è", level=4)
    st.markdown(
        """
        1) Netten br√ºte: G = ProgressiveInverse(12√óN)/12.
        2) Resmi br√ºt ve elden:
           - G_official = min(G, B_TUR)
           - E = max(G ‚àí B_TUR, 0)
        3) Komisyon: C = E √ó k_cash (VKS i√ßin kullanƒ±lmƒ±yorsa 0)
        4) ƒ∞≈üveren primleri: yalnƒ±z –ù–°–∏–ü–ó
        """
    )
    st.latex(r"\text{Cost}_{VKS} = G_{off}\,(1+HS) + extras + E + C")

    # 5) √úlke karmasƒ± (role bazƒ±nda)
    bih("5) √úlke Karmasƒ± (Rol bazƒ±nda)","5) –°–º–µ—à–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω (–ø–æ —Ä–æ–ª–∏)", level=4)
    st.markdown(
        """
        Her rol satƒ±rƒ± i√ßin √ºlke paylarƒ± y√ºzdesel olarak verilir ve 1'e normalize edilir.
        """
    )
    st.latex(r"\text{Cost}_{per\,person} = p_{RUS}\,Cost_{RUS} + p_{SNG}\,Cost_{SNG} + p_{TUR}\,Cost_{VKS}")

    # 6) Normlar, senaryo ve zorluk
    bih("6) Normlar, Senaryo ve Zorluk","6) –ù–æ—Ä–º—ã, —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å", level=4)
    st.markdown(
        """
        - Temel norm (senaryo = Ger√ßek√ßi) eleman "Temel" i√ßin n_ref alƒ±nƒ±r.
        - Se√ßilen senaryonun "Temel" deƒüeri ile oranlanarak senaryo √ßarpanƒ± s hesaplanƒ±r.
        - Eleman g√∂reli katsayƒ±larƒ± k_e normalize edilerek ortalamasƒ± 1 yapƒ±lƒ±r.
        - Zorluk √ßarpanƒ± z, girilen fakt√∂rlerden √ßarpƒ±mla olu≈üur: z = ‚àè(1+f_i).
        - Eleman normu: n_e = n_ref √ó s √ó k_e √ó z.
        """
    )
    st.latex(r"n_e = n_{ref} \times s \times k_e \times z")

    # 7) √áekirdek i≈ü√ßilik ve giderlerin eklenmesi
    bih("7) √áekirdek ƒ∞≈ü√ßilik ve Giderlerin Eklenmesi","7) –Ø–¥—Ä–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç", level=4)
    st.markdown(
        """
        - √áekirdek i≈ü√ßilik (maliyet): se√ßili elemanlarƒ±n metrajƒ± ve n_e kullanƒ±larak toplanƒ±r.
        - Sarf (%), Genel Gider (%) ve Indirect (%) oranlarƒ± sƒ±rasƒ±yla uygulanƒ±r. Genel Gider i√ßin √ºst sƒ±nƒ±r (OVERHEAD_RATE_MAX) korunur.
        """
    )

    # 7.1) Metraj ve Adam-saat adƒ±m adƒ±m
    bih("7.1) Metraj ve Adam-saat","7.1) –û–±—ä—ë–º—ã –∏ —á–µ–ª–æ–≤–µ–∫–æ-—á–∞—Å—ã", level=5)
    st.markdown(
        """
        - Eleman e i√ßin metraj m_e (m¬≥) ve norm n_e (a¬∑s/m¬≥) ise toplam adam-saat: A = Œ£_e m_e √ó n_e.
        - Bir ki≈üinin aylƒ±k √ßalƒ±≈üabileceƒüi saat: H = g√ºn/say √ó saat/g√ºn. Uygulamada H = ortalama_i≈ü_g√ºn√º √ó hours_per_day.
        - Toplam ki≈üi-ay: PM = A / H.
        - Ki≈üi ba≈üƒ± aylƒ±k maliyet (extras dahil) ‚Üí (‚ÇΩ/saat) cinsinden fiyat = (M_with) / H.
        - √áekirdek m¬≥ maliyeti: core_price = (M_with / H) √ó n_e.
        """
    )
    st.latex(r"A = \sum_e m_e\, n_e\quad ;\quad H = D_{avg}\,h_d\quad ;\quad PM = \dfrac{A}{H}")
    st.latex(r"\text{core\_price}_e = \left(\dfrac{M_{with}}{H}\right) \times n_e")

    # 7.2) Gider daƒüƒ±tƒ±m form√ºlleri
    bih("7.2) Gider Daƒüƒ±tƒ±mƒ± ve Toplamlar","7.2) –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –∏ –∏—Ç–æ–≥–∏", level=5)
    st.markdown(
        """
        - √áekirdek + Genel: core_genel_e = core_price_e √ó (1 + genel_oran)
        - Sarf toplamƒ±: S = (Œ£_e core_genel_e √ó m_e) √ó consumables_oran
        - Indirect toplamƒ±: I = (Œ£_e core_genel_e √ó m_e + S) √ó indirect_oran
        - Eleman e'ye daƒüƒ±tƒ±m aƒüƒ±rlƒ±ƒüƒ±: w_e = (core_genel_e √ó m_e) / Œ£_e (core_genel_e √ó m_e)
        - Eleman e toplam (‚ÇΩ/m¬≥): total_e = core_price_e + genel_e + sarf_e + indirect_e
        """
    )
    st.latex(r"\text{genel\_e} = \min(\text{overhead\_rate}, \text{max})\times \text{core\_price}_e")
    st.latex(r"S = \left(\sum_e (\text{core\_price}_e+\text{genel}_e) m_e\right) \times c_{sarf}")
    st.latex(r"I = \left(\sum_e (\text{core\_price}_e+\text{genel}_e) m_e + S\right) \times c_{indir}")
    st.latex(r"w_e = \dfrac{(\text{core\_price}_e+\text{genel}_e) m_e}{\sum_e (\text{core\_price}_e+\text{genel}_e) m_e}")
    st.latex(r"\text{total}_e = \text{core\_price}_e + \text{genel}_e + w_e\, \dfrac{S}{m_e} + w_e\, \dfrac{I}{m_e}")

    # 8) Mantƒ±k kontrolleri
    bih("8) Mantƒ±k Kontrolleri","8) –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", level=4)
    st.markdown(
        """
        - Artan NDFL tersine √ßevirme hem SNG hem VKS i√ßin aynƒ± y√∂ntemle yapƒ±lƒ±r.
        - SNG'de patent, vergiden mahsup edilmez; bilin√ßli basitle≈ütirme. ƒ∞leride istenirse anahtarla a√ßƒ±labilir.
        - VKS'de yalnƒ±z –ù–°–∏–ü–ó uygulanƒ±r; SNG'de t√ºm sosyal primler resmi br√ºte uygulanƒ±r.
        - √úlke karmasƒ± y√ºzdeleri her satƒ±rda normalize edilir (toplam 1 olur).
        - Genel gider √ºst sƒ±nƒ±rƒ± uygulanƒ±r; UI'da da aynƒ± sƒ±nƒ±r uyarƒ±lƒ±r.
        """
    )

    # 9) Basit anlatƒ±m (m√ºhendis olmayanlar i√ßin)
    bih("9) Basit Anlatƒ±m (M√ºhendis Olmayanlar ƒ∞√ßin)","9) –ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–¥–ª—è –Ω–µ–∏–Ω–∂–µ–Ω–µ—Ä–æ–≤)", level=4)
    st.markdown(
        """
        - √ñnce √ßalƒ±≈üanƒ±n eline ge√ßen net maa≈üƒ± (N) alƒ±yoruz. Bunu yƒ±llƒ±ƒüa √ßeviriyoruz (12√óN).
        - Devletin belirlediƒüi vergi dilimlerine g√∂re (2025 i√ßin 13/15/18/20/22%) bu yƒ±llƒ±k neti geriye doƒüru **br√ºte** √ßeviriyoruz. Yani "br√ºt√ºn vergisi d√º≈ü√ºl√ºnce net ≈üu olsun" diye ters hesap yapƒ±yoruz.
        - Aylƒ±k resmi br√ºt√º (G) bulunca i≈üverenin √∂deyeceƒüi sigorta primlerini hesaplƒ±yoruz.
            - SNG i√ßin: emeklilik (OPS), sosyal (OSS), saƒülƒ±k (OMS) ve i≈ü kazasƒ± (–ù–°–∏–ü–ó) resmi br√ºt √ºzerinden.
            - VKS (T√ºrk) i√ßin: sadece i≈ü kazasƒ± (–ù–°–∏–ü–ó).
        - SNG'de resmi br√ºt i√ßin bir **tavan** var. Br√ºt bu tavanƒ± a≈üarsa, a≈üan kƒ±sƒ±m **elden** sayƒ±lƒ±r. Eldene vergi/prim eklemiyoruz; sadece nakit maliyeti ve varsa k√º√ß√ºk bir komisyon (kasa/kur/√ßekim riskleri) ekleniyor.
        - SNG'de her √ßalƒ±≈üan i√ßin aylƒ±k **patent** sabit bedeli var. Bu bedeli ayrƒ±ca ekliyoruz (vergiden d√º≈üm√ºyoruz; sizin isteƒüinizle sade model).
        - Ki≈üi ba≈üƒ±na bu maliyeti bulduktan sonra, se√ßili elemanlar i√ßin ka√ß **adam-saat** gerektiƒüini hesaplƒ±yoruz (metraj √ó norm). Bir ki≈üinin ayda ka√ß saat √ßalƒ±≈üabileceƒüini varsayarak toplam **ki≈üi-ay** ihtiyacƒ±nƒ± buluyoruz.
        - Ki≈üi saat maliyetini normlarla √ßarparak m¬≥ ba≈üƒ±na √ßekirdek maliyeti buluyoruz. Sonra √ºzerine **genel gider**, **sarf** ve **indirect** oranlarƒ±nƒ± ekleyip toplam m¬≥ maliyetini elde ediyoruz.
        """
    )

    # 10) √ñrnek hesap (basitle≈ütirilmi≈ü, rakamlar temsili)
    bih("10) √ñrnek Hesap (Basitle≈ütirilmi≈ü)","10) –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á—ë—Ç–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)", level=4)
    st.markdown(
        """
        Varsayƒ±mlar:
        - Net maa≈ü N = 100.000 ‚ÇΩ/ay (VKS).
        - –ù–°–∏–ü–ó = %1,8, diƒüer sosyal primler = 0 (VKS olduƒüu i√ßin).
        - G√ºnl√ºk √ßalƒ±≈üma saati = 10; ayda ortalama i≈ü g√ºn√º ‚âà 22 ‚Üí H ‚âà 220 saat/ki≈üi¬∑ay.
        - Eleman: Temel, norm n_e = 16 a¬∑s/m¬≥, metraj m = 100 m¬≥.

        Adƒ±mlar:
        1) Net‚ÜíBr√ºt (artan): yƒ±llƒ±k net = 1.200.000; dillere g√∂re ters √ßevirerek yakla≈üƒ±k aylƒ±k br√ºt G ‚âà 115.000 ‚ÇΩ.
        2) ƒ∞≈üveren maliyeti (VKS): G √ó (1+–ù–°–∏–ü–ó) ‚âà 115.000 √ó 1.018 ‚âà 117.070 ‚ÇΩ (extras hari√ß).
        3) Ki≈üi saat maliyeti ‚âà 117.070 / 220 ‚âà 532 ‚ÇΩ/saat.
        4) √áekirdek m¬≥ maliyeti: core_price = 532 √ó 16 ‚âà 8.512 ‚ÇΩ/m¬≥.
        5) Genel gider %15 ise: 8.512 √ó 0,15 ‚âà 1.277 ‚ÇΩ/m¬≥.
        6) Sarf %5 ise: (8.512+1.277) √ó 0,05 ‚âà 494 ‚ÇΩ/m¬≥.
        7) Indirect %12 ise: (8.512+1.277+0.494) √ó 0,12 ‚âà 1.275 ‚ÇΩ/m¬≥.
        8) Toplam ‚âà 8.512 + 1.277 + 0.494 + 1.275 ‚âà 11.558 ‚ÇΩ/m¬≥.

        Not: Bu √∂rnek temsilidir; uygulamadaki deƒüeri senaryolar, zorluk, rollerin √ºlke karmasƒ±, patent ve ekstralar etkiler.
        """
    )

    # 11) ƒ∞nfografik stil ve PDF indirme
    bih("11) G√∂rsel Yardƒ±mlar ve √áƒ±ktƒ±","11) –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∞", level=4)
    st.markdown(
        """
        - A≈üaƒüƒ±daki kutucuklar, akƒ±≈üƒ±n hangi adƒ±mlardan ge√ßtiƒüini √∂zetler.
        - ƒ∞stersen raporu PDF olarak indirebilirsin.
        """
    )

    st.markdown(
        """
        <div style='display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:12px'>
          <div style='border:1px solid #e5e7eb;border-radius:12px;padding:12px;background:#fff'>
            <div class='badge'>1</div>
            <div><b>Net ‚Üí Br√ºt</b></div>
            <div>Artan NDFL ile tersine √ßevirme</div>
          </div>
          <div style='border:1px solid #e5e7eb;border-radius:12px;padding:12px;background:#fff'>
            <div class='badge'>2</div>
            <div><b>ƒ∞≈üveren Primleri</b></div>
            <div>OPS/OSS/OMS/–ù–°–∏–ü–ó (profile g√∂re)</div>
          </div>
          <div style='border:1px solid #e5e7eb;border-radius:12px;padding:12px;background:#fff'>
            <div class='badge'>3</div>
            <div><b>Adam-saat</b></div>
            <div>Metraj √ó norm ‚Üí ki≈üi-ay</div>
          </div>
          <div style='border:1px solid #e5e7eb;border-radius:12px;padding:12px;background:#fff'>
            <div class='badge'>4</div>
            <div><b>m¬≥ √áekirdek</b></div>
            <div>Saat maliyeti √ó norm</div>
          </div>
          <div style='border:1px solid #e5e7eb;border-radius:12px;padding:12px;background:#fff'>
            <div class='badge'>5</div>
            <div><b>Giderler</b></div>
            <div>Genel + Sarf + Indirect</div>
          </div>
        </div>
        """,
        unsafe_allow_html=True,
    )

    # Basit PDF (markdown ‚Üí bytes) indirme ‚Äî kƒ±sa a√ßƒ±klama export
    cpdf1, cpdf2 = st.columns([1,1])
    with cpdf1:
        if st.button("üìÑ Hesap Mantƒ±ƒüƒ±nƒ± PDF indir (kƒ±sa)"):
            try:
                from io import BytesIO
                buf = BytesIO()
                content = "Hesap Mantƒ±ƒüƒ± ‚Äî kƒ±sa √∂zet\n\nNet‚ÜíBr√ºt (artan NDFL), i≈üveren primleri, adam-saat, m¬≥ √ßekirdek ve gider daƒüƒ±tƒ±mƒ± adƒ±mlarƒ± bu s√ºr√ºmde √∂zetlenmi≈ütir."
                buf.write(content.encode("utf-8"))
                st.download_button("ƒ∞ndir", data=buf.getvalue(), file_name="hesap_mantigi_ozet.txt", mime="text/plain")
            except Exception as e:
                st.warning(f"PDF yerine metin √ßƒ±ktƒ± √ºretildi: {e}")

with tab_sabitler:
    # RUSYA GRUBU
    with st.expander("Rusya Vatanda≈ülarƒ± (RU) / –ì—Ä–∞–∂–¥–∞–Ω–µ –†–§", expanded=False):
        st.markdown('<div class="const-grid">', unsafe_allow_html=True)
        
        # NDFL RUS
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">üí∞ Gelir Vergisi (–ù–î–§–õ)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">Rusya gelir vergisi oranƒ±</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{ratio_to_pct(eff("NDFL_RUS", NDFL_RUS)):.2f}%</div>', unsafe_allow_html=True)
        
        edit_ndfl_rus = st.toggle("D√ºzenle", key="edit_NDFL_RUS")
        if edit_ndfl_rus:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_NDFL_RUS", ratio_to_pct(eff("NDFL_RUS", NDFL_RUS)))
            st.number_input("%", min_value=0.0, max_value=100.0, step=0.1, value=cur_val, key="inp_NDFL_RUS")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_NDFL_RUS"):
                    OVR["NDFL_RUS"] = pct_to_ratio(st.session_state["inp_NDFL_RUS"])
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_NDFL_RUS"):
                    del st.session_state["inp_NDFL_RUS"]
                    st.session_state["edit_NDFL_RUS"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # OPS RUS
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">üèõÔ∏è Emeklilik (–û–ü–°)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">Emeklilik sigortasƒ± primi</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{ratio_to_pct(eff("OPS", OPS)):.2f}%</div>', unsafe_allow_html=True)
        
        edit_ops = st.toggle("D√ºzenle", key="edit_OPS")
        if edit_ops:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_OPS", ratio_to_pct(eff("OPS", OPS)))
            st.number_input("%", min_value=0.0, max_value=100.0, step=0.1, value=cur_val, key="inp_OPS")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_OPS"):
                    OVR["OPS"] = pct_to_ratio(st.session_state["inp_OPS"])
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_OPS"):
                    del st.session_state["inp_OPS"]
                    st.session_state["edit_OPS"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # OSS RUS
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">üõ°Ô∏è Sosyal Sigorta (–û–°–°)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">Sosyal sigorta primi</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{ratio_to_pct(eff("OSS", OSS)):.2f}%</div>', unsafe_allow_html=True)
        
        edit_oss = st.toggle("D√ºzenle", key="edit_OSS")
        if edit_oss:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_OSS", ratio_to_pct(eff("OSS", OSS)))
            st.number_input("%", min_value=0.0, max_value=100.0, step=0.1, value=cur_val, key="inp_OSS")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_OSS"):
                    OVR["OSS"] = pct_to_ratio(st.session_state["inp_OSS"])
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_OSS"):
                    del st.session_state["inp_OSS"]
                    st.session_state["edit_OSS"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # OMS RUS
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">üè• Saƒülƒ±k (–û–ú–°)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">Saƒülƒ±k sigortasƒ± primi</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{ratio_to_pct(eff("OMS", OMS)):.2f}%</div>', unsafe_allow_html=True)
        
        edit_oms = st.toggle("D√ºzenle", key="edit_OMS")
        if edit_oms:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_OMS", ratio_to_pct(eff("OMS", OMS)))
            st.number_input("%", min_value=0.0, max_value=100.0, step=0.1, value=cur_val, key="inp_OMS")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_OMS"):
                    OVR["OMS"] = pct_to_ratio(st.session_state["inp_OMS"])
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_OMS"):
                    del st.session_state["inp_OMS"]
                    st.session_state["edit_OMS"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # NSIPZ RUS
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">‚ö†Ô∏è ƒ∞≈ü Kazasƒ± (–ù–°–ò–ü–ó)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">ƒ∞≈ü kazasƒ± risk primi</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{ratio_to_pct(eff("NSIPZ_RISK_RUS_SNG", NSIPZ_RISK_RUS_SNG)):.2f}%</div>', unsafe_allow_html=True)
        
        edit_nsipz_rus = st.toggle("D√ºzenle", key="edit_NSIPZ_RUS_SNG")
        if edit_nsipz_rus:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_NSIPZ_RUS_SNG", ratio_to_pct(eff("NSIPZ_RISK_RUS_SNG", NSIPZ_RISK_RUS_SNG)))
            st.number_input("%", min_value=0.0, max_value=100.0, step=0.1, value=cur_val, key="inp_NSIPZ_RUS_SNG")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_NSIPZ_RUS_SNG"):
                    OVR["NSIPZ_RISK_RUS_SNG"] = pct_to_ratio(st.session_state["inp_NSIPZ_RUS_SNG"])
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_NSIPZ_RUS_SNG"):
                    del st.session_state["inp_NSIPZ_RUS_SNG"]
                    st.session_state["edit_NSIPZ_RUS_SNG"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # SNG GRUBU
    with st.expander("SNG Vatanda≈ülarƒ± / –ì—Ä–∞–∂–¥–∞–Ω–µ –°–ù–ì", expanded=False):
        st.markdown('<div class="const-grid">', unsafe_allow_html=True)
        
        # NDFL SNG
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">üí∞ Gelir Vergisi (–°–ù–ì)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">SNG gelir vergisi oranƒ±</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{ratio_to_pct(eff("NDFL_SNG", NDFL_SNG)):.2f}%</div>', unsafe_allow_html=True)
        
        edit_ndfl_sng = st.toggle("D√ºzenle", key="edit_NDFL_SNG")
        if edit_ndfl_sng:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_NDFL_SNG", ratio_to_pct(eff("NDFL_SNG", NDFL_SNG)))
            st.number_input("%", min_value=0.0, max_value=100.0, step=0.1, value=cur_val, key="inp_NDFL_SNG")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_NDFL_SNG"):
                    OVR["NDFL_SNG"] = pct_to_ratio(st.session_state["inp_NDFL_SNG"])
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_NDFL_SNG"):
                    del st.session_state["inp_NDFL_SNG"]
                    st.session_state["edit_NDFL_SNG"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Patent SNG
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">üìã Aylƒ±k Patent (–ü–∞—Ç–µ–Ω—Ç)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">Aylƒ±k patent √∂demesi</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{eff("SNG_PATENT_MONTH", SNG_PATENT_MONTH):,.0f} ‚ÇΩ</div>', unsafe_allow_html=True)
        
        edit_patent_sng = st.toggle("D√ºzenle", key="edit_SNG_PATENT")
        if edit_patent_sng:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_SNG_PATENT", eff("SNG_PATENT_MONTH", SNG_PATENT_MONTH))
            st.number_input("‚ÇΩ/ay", min_value=0.0, step=100.0, value=cur_val, key="inp_SNG_PATENT")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_SNG_PATENT"):
                    OVR["SNG_PATENT_MONTH"] = st.session_state["inp_SNG_PATENT"]
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_SNG_PATENT"):
                    del st.session_state["inp_SNG_PATENT"]
                    st.session_state["edit_SNG_PATENT"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Taxed Base SNG
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">üèõÔ∏è Resmi Br√ºt Tavan (–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">Resmi br√ºt maa≈ü tavanƒ±</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{eff("SNG_TAXED_BASE", SNG_TAXED_BASE):,.0f} ‚ÇΩ</div>', unsafe_allow_html=True)
        
        edit_base_sng = st.toggle("D√ºzenle", key="edit_SNG_BASE")
        if edit_base_sng:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_SNG_BASE", eff("SNG_TAXED_BASE", SNG_TAXED_BASE))
            st.number_input("‚ÇΩ/ay", min_value=0.0, step=1000.0, value=cur_val, key="inp_SNG_BASE")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_SNG_BASE"):
                    OVR["SNG_TAXED_BASE"] = st.session_state["inp_SNG_BASE"]
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_SNG_BASE"):
                    del st.session_state["inp_SNG_BASE"]
                    st.session_state["edit_SNG_BASE"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Cash Commission (bilgi kartƒ±)
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">üí≥ Elden √ñdeme Komisyonu (–ö–æ–º–∏—Å—Å–∏—è)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">Elden √∂deme komisyon oranƒ±</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{ratio_to_pct(eff("CASH_COMMISSION_RATE", CASH_COMMISSION_RATE)):.2f}%</div>', unsafe_allow_html=True)
        
        edit_cash_commission = st.toggle("D√ºzenle", key="edit_CASH_COMMISSION")
        if edit_cash_commission:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_CASH_COMMISSION", ratio_to_pct(eff("CASH_COMMISSION_RATE", CASH_COMMISSION_RATE)))
            st.number_input("%", min_value=0.0, max_value=100.0, step=0.1, value=cur_val, key="inp_CASH_COMMISSION")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_CASH_COMMISSION"):
                    OVR["CASH_COMMISSION_RATE"] = pct_to_ratio(st.session_state["inp_CASH_COMMISSION"])
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_CASH_COMMISSION"):
                    del st.session_state["inp_CASH_COMMISSION"]
                    st.session_state["edit_CASH_COMMISSION"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # T√úRK GRUBU
    with st.expander("T√ºrk Vatanda≈ülarƒ± (VKS) / –ì—Ä–∞–∂–¥–∞–Ω–µ –¢—É—Ä—Ü–∏–∏ (–í–ö–°)", expanded=False):
        st.markdown('<div class="const-grid">', unsafe_allow_html=True)
        
        # NDFL TUR
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">üí∞ Gelir Vergisi (–¢—É—Ä—Ü–∏—è –í–ö–°)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">T√ºrkiye gelir vergisi oranƒ±</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{ratio_to_pct(eff("NDFL_TUR", NDFL_TUR)):.2f}%</div>', unsafe_allow_html=True)
        # Progressive modda a√ßƒ±klama: bu alan sadece sabit oran modunda kullanƒ±lƒ±r
        if bool(st.session_state.get("use_progressive_ndfl", True)):
            st.caption(bi("(Artan NDFL aktif ‚Äî bu oran yalnƒ±z 'sabit oran' modu kapalƒ±yken kullanƒ±lƒ±r)",
                        "(–í–∫–ª—é—á—ë–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ù–î–§–õ ‚Äî —ç—Ç–∞ —Å—Ç–∞–≤–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏)"))
        
        edit_ndfl_tur = st.toggle("D√ºzenle", key="edit_NDFL_TUR")
        if edit_ndfl_tur:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_NDFL_TUR", ratio_to_pct(eff("NDFL_TUR", NDFL_TUR)))
            st.number_input("%", min_value=0.0, max_value=100.0, step=0.1, value=cur_val, key="inp_NDFL_TUR")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_NDFL_TUR"):
                    OVR["NDFL_TUR"] = pct_to_ratio(st.session_state["inp_NDFL_TUR"])
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_NDFL_TUR"):
                    del st.session_state["inp_NDFL_TUR"]
                    st.session_state["edit_NDFL_TUR"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # NSIPZ TUR
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">‚ö†Ô∏è ƒ∞≈ü Kazasƒ± (–ù–°–ò–ü–ó)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">ƒ∞≈ü kazasƒ± risk primi</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{ratio_to_pct(eff("NSIPZ_RISK_TUR_VKS", NSIPZ_RISK_TUR_VKS)):.2f}%</div>', unsafe_allow_html=True)
        
        edit_nsipz_tur = st.toggle("D√ºzenle", key="edit_NSIPZ_TUR_VKS")
        if edit_nsipz_tur:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_NSIPZ_TUR_VKS", ratio_to_pct(eff("NSIPZ_RISK_TUR_VKS", NSIPZ_RISK_TUR_VKS)))
            st.number_input("%", min_value=0.0, max_value=100.0, step=0.1, value=cur_val, key="inp_NSIPZ_TUR_VKS")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_NSIPZ_TUR_VKS"):
                    OVR["NSIPZ_RISK_TUR_VKS"] = pct_to_ratio(st.session_state["inp_NSIPZ_TUR_VKS"])
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_NSIPZ_TUR_VKS"):
                    del st.session_state["inp_NSIPZ_TUR_VKS"]
                    st.session_state["edit_NSIPZ_TUR_VKS"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Taxed Base TUR
        st.markdown('<div class="const-card">', unsafe_allow_html=True)
        st.markdown('<div class="card-title">üèõÔ∏è Resmi Br√ºt Tavan (–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞)</div>', unsafe_allow_html=True)
        st.markdown('<div class="card-desc">Resmi br√ºt maa≈ü tavanƒ±</div>', unsafe_allow_html=True)
        st.markdown(f'<div class="card-value">{eff("TUR_TAXED_BASE", TUR_TAXED_BASE):,.0f} ‚ÇΩ</div>', unsafe_allow_html=True)
        
        edit_base_tur = st.toggle("D√ºzenle", key="edit_TUR_BASE")
        if edit_base_tur:
            st.markdown('<div class="edit-area">', unsafe_allow_html=True)
            cur_val = st.session_state.get("inp_TUR_BASE", eff("TUR_TAXED_BASE", TUR_TAXED_BASE))
            st.number_input("‚ÇΩ/ay", min_value=0.0, step=1000.0, value=cur_val, key="inp_TUR_BASE")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Kaydet", key="save_TUR_BASE"):
                    OVR["TUR_TAXED_BASE"] = st.session_state["inp_TUR_BASE"]
                    st.rerun()
            with col2:
                if st.button("Vazge√ß", key="cancel_TUR_BASE"):
                    del st.session_state["inp_TUR_BASE"]
                    st.session_state["edit_TUR_BASE"] = False
                    st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)
# ==================== 1B) ADAM-SAAT NORMLARI (ayrƒ± ba≈ülƒ±k) ====================
with tab_genel:
    with st.expander("üë∑‚Äç‚ôÇÔ∏è Adam-saat Normlarƒ± (Senaryolar) / üë∑‚Äç‚ôÇÔ∏è –ù–æ—Ä–º—ã —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç (—Å—Ü–µ–Ω–∞—Ä–∏–∏)", expanded=False):
        st.caption(bi("Senaryolara g√∂re eleman bazƒ±nda a¬∑s/m¬≥ normlarƒ±nƒ± d√ºzenleyin. Bo≈ü bƒ±rakƒ±lanlar varsayƒ±lanƒ± kullanƒ±r.",
                      "–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–æ—Ä–º—ã a¬∑—á/–º¬≥ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü—É—Å—Ç—ã–µ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."))
        norms_map = get_effective_scenario_norms()
        scenarios = ["ƒ∞deal","Ger√ßek√ßi","K√∂t√º"]
        elements_tr = ["Grobeton","Rostverk","Temel","D√∂≈üeme","Perde","Merdiven"]
        import pandas as _pd
        rows = []
        for sc in scenarios:
            base = norms_map.get(sc, SCENARIO_NORMS["Ger√ßek√ßi"]) if isinstance(norms_map.get(sc), dict) else SCENARIO_NORMS.get(sc, {})
            row = {"Senaryo": sc}
            for et in elements_tr:
                try:
                    row[et] = float(base.get(et, SCENARIO_NORMS["Ger√ßek√ßi"][et]))
                except Exception:
                    row[et] = SCENARIO_NORMS["Ger√ßek√ßi"].get(et, 16.0)
            rows.append(row)
        df0 = _pd.DataFrame(rows)
        edited = st.data_editor(df0, hide_index=True, num_rows="fixed")
        col1, col2 = st.columns(2)
        with col1:
            if st.button(bi("Kaydet (Normlarƒ± Override Et)","–°–æ—Ö—Ä–∞–Ω–∏—Ç—å (Override –Ω–æ—Ä–º)")):
                new_map = {}
                for _, r in edited.iterrows():
                    sc = str(r["Senaryo"]) if r.get("Senaryo") in scenarios else None
                    if not sc: continue
                    new_map[sc] = {et: float(r.get(et, SCENARIO_NORMS[sc][et])) for et in elements_tr}
                st.session_state["SCENARIO_NORMS_OVR"] = new_map
                st.success(bi("Adam-saat normlarƒ± g√ºncellendi.","–ù–æ—Ä–º—ã —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã."))
        with col2:
            if st.button(bi("Override'ƒ± Temizle","–°–±—Ä–æ—Å Override")):
                st.session_state.pop("SCENARIO_NORMS_OVR", None)
                st.info(bi("Override temizlendi. Varsayƒ±lan normlar kullanƒ±lacak.","–°–±—Ä–æ—à–µ–Ω–æ. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–æ—Ä–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."))

    ### ‚úÖ √áevresel/Zorluk Fakt√∂rleri ‚Äî norm √ßarpanƒ±
    def render_difficulty_block():
        # --- ≈ûema meta (ikon + etiket) ---
        DIFF_META = {
            "winter":       ("‚ùÑÔ∏è", "Kƒ±≈ü ko≈üullarƒ±"),
            "low_formwork": ("üåø", "D√º≈ü√ºk kalƒ±p tekrarƒ±"),
            "congestion":   ("üèóÔ∏è", "Saha sƒ±kƒ±≈üƒ±klƒ±ƒüƒ±"),
            "heavy_rebar":  ("üß±", "Aƒüƒ±r donatƒ± yoƒüunluƒüu"),
            "pump_shared":  ("üöß", "Vin√ß/pompa payla≈üƒ±mƒ±"),
            "pump_height":  ("üìà", "Y√ºksek pompa kotu/mesafesi"),
        }

        # ƒ∞lk kurulum veya eski veriyi normalize et
        if "diff" not in st.session_state or not isinstance(st.session_state["diff"], dict):
            st.session_state["diff"] = {k: {"on": False, "pct": 0.0} for k in DIFF_META.keys()}

        # Eski yapƒ±da icon/label yoksa ekle; on/pct tiplerini d√ºzelt
        for k, (icon, label) in DIFF_META.items():
            rec = st.session_state["diff"].get(k, {})
            st.session_state["diff"][k] = {
                "on":    bool(rec.get("on", False)),
                "pct":   float(rec.get("pct", 0.0)),
                "icon":  icon,
                "label": label,
            }

        # Items listesini olu≈ütur
        diff_def = st.session_state.get("diff", {})
        items = []
        for k, meta in diff_def.items():
            meta = meta or {}
            items.append({
                "key": k,
                "label": str(meta.get("label", k)),
                "icon": str(meta.get("icon", "üß©")),
                "step": float(meta.get("step", 0.5)),
                "min": float(meta.get("min", 0.0)),
                "max": float(meta.get("max", 30.0)),
                "default": float(meta.get("default", 0.0)),
            })
        # Label'a g√∂re sƒ±rala
        items.sort(key=lambda it: it["label"].lower())

        # Reset i≈ülemi
        if st.session_state.pop("diff__do_reset", False):
            for it in items:
                st.session_state.pop(f"diff_on_{it['key']}", None)
                st.session_state.pop(f"diff_pct_{it['key']}", None)
            # √ñnbellekleri temizle
            st.session_state.pop("difficulty_multiplier_cache", None)
            st.rerun()

        # Widget key'lerini olu≈ütur
        for k, rec in st.session_state["diff"].items():
            st.session_state.setdefault(f"diff_on_{k}",  bool(rec["on"]))
            st.session_state.setdefault(f"diff_pct_{k}", float(rec["pct"]))

        # ---------- Ba≈ülƒ±k & yardƒ±mcƒ± d√ºƒümeler ----------

        def _clear_diff_cache():
            # T√ºretilmi≈ü/cached anahtarlarƒ± temizle
            for key in list(st.session_state.keys()):
                if key.startswith(("difficulty_", "diff_total_", "diff_cache", "_diff_total_mult_cache")):
                    st.session_state.pop(key, None)



        # ---------- Fakt√∂r kartlarƒ± ----------
        st.session_state.setdefault("difficulty_multiplier", 1.0)
        total_mult = float(st.session_state["difficulty_multiplier"])
        st.markdown(
            ("<div class='muted'>Aktif kalemler √ßarpƒ±lƒ±r ‚ûú "
             f"<b>Toplam √ó{total_mult:,.3f}</b></div>").replace(",", " "),
            unsafe_allow_html=True
        )
        # UI state anahtarlarƒ±nƒ± garanti et
        for it in items:
            on_key  = f"diff_on_{it['key']}"
            pct_key = f"diff_pct_{it['key']}"
            if on_key not in st.session_state:
                st.session_state[on_key] = False
            if pct_key not in st.session_state:
                st.session_state[pct_key] = it["default"]

        # 3 s√ºtunlu ƒ±zgarada kartlar - EXPANDER ƒ∞√áƒ∞NDE
        with st.expander("‚öôÔ∏è √áevresel/Zorluk Fakt√∂rleri ‚Äî detaylar", expanded=False):
            grid_cols = 3
            for i, it in enumerate(items):
                if i % grid_cols == 0:
                    cols = st.columns(grid_cols, gap="medium")
                with cols[i % grid_cols]:
                    st.markdown(
                        f"<div class='rowcard'><div class='diff-title'>{it['icon']} {it['label']}</div>",
                        unsafe_allow_html=True
                    )
                    on_key  = f"diff_on_{it['key']}"
                    pct_key = f"diff_pct_{it['key']}"
                    st.checkbox("Aktif", key=on_key)
                    # Y√ºzde giri≈üi
                    st.number_input(
                        "Etki %",
                        min_value=it["min"],
                        max_value=it["max"],
                        step=it["step"],
                        format="%.2f",
                        key=pct_key,
                        disabled=not st.session_state[on_key],
                    )
                    # Bu kalemin √ßarpanƒ±
                    local_mult = 1.0 + (st.session_state[pct_key] / 100.0 if st.session_state[on_key] else 0.0)
                    st.caption(f"Bu kalem √ó{local_mult:,.3f}".replace(",", " "))
                    st.markdown("</div>", unsafe_allow_html=True)

            # Sƒ±fƒ±rlama butonu
            cA, cB = st.columns([1,1])
            with cA:
                if st.button("üßº DEƒûERLERƒ∞ SIFIRLA", key="diff_reset_bottom"):
                    st.session_state["diff__do_reset"] = True
                    st.rerun()
            with cB:
                # Toplam √ßarpanƒ± hesapla
                total_mult = 1.0
                for it in items:
                    if st.session_state.get(f"diff_on_{it['key']}", False):
                        total_mult *= (1.0 + (float(st.session_state.get(f"diff_pct_{it['key']}", 0.0)) / 100.0))
                st.markdown(
                    f"<div style='text-align:right'><span class='diff-total'>Toplam √ó{total_mult:,.3f}</span></div>",
                    unsafe_allow_html=True
                )

        # Toplam √ßarpanƒ± hesapla
        total_mult = 1.0
        for it in items:
            if st.session_state.get(f"diff_on_{it['key']}", False):
                total_mult *= (1.0 + (float(st.session_state.get(f"diff_pct_{it['key']}", 0.0)) / 100.0))
        st.session_state["difficulty_multiplier"] = float(total_mult)

        # UI'dan diff s√∂zl√ºƒü√ºne aktar
        for it in items:
            on_key = f"diff_on_{it['key']}"
            pct_key = f"diff_pct_{it['key']}"
            st.session_state["diff"][it['key']]["on"] = st.session_state.get(on_key, False)
            st.session_state["diff"][it['key']]["pct"] = st.session_state.get(pct_key, 0.0)
        
        # PART 3 i√ßin d√ºz anahtarlar
        d = st.session_state["diff"]
        st.session_state["f_winter"] =  (d["winter"]["pct"]/100.0)       if d["winter"]["on"]       else 0.0
        st.session_state["f_repeat"] =  (d["low_formwork"]["pct"]/100.0) if d["low_formwork"]["on"] else 0.0
        st.session_state["f_cong"]   =  (d["congestion"]["pct"]/100.0)   if d["congestion"]["on"]   else 0.0
        st.session_state["f_heavy"]  =  (d["heavy_rebar"]["pct"]/100.0)  if d["heavy_rebar"]["on"]  else 0.0
        st.session_state["f_shared"] =  (d["pump_shared"]["pct"]/100.0)  if d["pump_shared"]["on"]  else 0.0
        st.session_state["f_pump"]   =  (d["pump_height"]["pct"]/100.0)  if d["pump_height"]["on"]  else 0.0
        

        _update_diff_cache()

    render_difficulty_block()
    _update_diff_cache()
    # END: √áevresel/Zorluk Fakt√∂rleri

# ==================== 2) ELEMAN & METRAJ ====================
with tab_eleman:
    bih("üß© Betonarme Elemanlarƒ±","üß© –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–Ω–æ–ª–∏—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç", level=3)
    cols = st.columns(3)
    sel_flags={}
    for i,k in enumerate(CANON_KEYS):
        with cols[i%3]:
            sel_flags[k]=st.checkbox(LABELS[k], value=st.session_state.get(f"sel_{k}", True), key=f"sel_{k}")
    selected_elements=[k for k,v in sel_flags.items() if v]
    if not selected_elements:
        st.warning(bi("En az bir betonarme eleman se√ßin.", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç."))

    bih("üìè Metraj","üìè –û–±—ä—ë–º—ã", level=3)
    use_metraj = st.checkbox(bi("Eleman metrajlarƒ±m mevcut, girmek istiyorum",
                                 "–£ –º–µ–Ω—è –µ—Å—Ç—å –æ–±—ä—ë–º—ã –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º, —Ö–æ—á—É –≤–≤–µ—Å—Ç–∏"),
                             value=st.session_state.get("use_metraj", False), key="use_metraj")
    if use_metraj and selected_elements:
        # Metraj tablosu i√ßin state kontrol√º
        current_keys = tuple(selected_elements)
        if ("metraj_df" not in st.session_state or 
            st.session_state.get("_met_for_keys") != current_keys or
            st.session_state["metraj_df"].empty):
            st.session_state["metraj_df"] = get_default_metraj_df(selected_elements)
            st.session_state["_met_for_keys"] = current_keys
        
        # Metraj tablosunu d√ºzenle
        with st.form(key="metraj_form", clear_on_submit=False):
            edited_metraj = st.data_editor(
                st.session_state["metraj_df"], 
                num_rows="dynamic", 
                hide_index=True, 
                key="metraj_editor_form"
            )
            if st.form_submit_button(bi("üíæ Metraj Kaydet","üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä—ë–º—ã")):
                st.session_state["metraj_df"] = edited_metraj
                st.success(bi("Metraj kaydedildi!","–û–±—ä—ë–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"))
            else:
                # Mevcut deƒüerleri kullan
                st.session_state["metraj_df"] = edited_metraj

# ==================== 3) ROLLER ====================
with tab_roller:
    bih("üõ†Ô∏è Rol Kompozisyonu (1 m¬≥ i√ßin)","üõ†Ô∏è –°–æ—Å—Ç–∞–≤ —Ä–æ–ª–µ–π (–Ω–∞ 1 –º¬≥)", level=3)
    # Roller tablosu i√ßin state kontrol√º
    if "roles_df" not in st.session_state:
        st.session_state["roles_df"] = get_default_roles_df()
    pc = st.column_config.NumberColumn(format="%.0f", min_value=0, max_value=100, step=1)
    col_cfg = {
        "Aƒüƒ±rlƒ±k (–í–µ—Å)": st.column_config.NumberColumn(format="%.3f", min_value=0.0, step=0.01),
        "%RUS": pc, "%SNG": pc, "%TUR": pc,
        "Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)": st.column_config.NumberColumn(format="%.0f", min_value=0),
    }
    # Roller tablosunu d√ºzenle
    with st.form(key="roles_form", clear_on_submit=False):
        edited_roles = st.data_editor(
            st.session_state["roles_df"],
            key="roles_editor_form",
            num_rows="dynamic",
            hide_index=True,
            column_config=col_cfg,
        )
        if st.form_submit_button(bi("üíæ Roller Kaydet","üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª–∏")):
            st.session_state["roles_df"] = edited_roles
            st.success(bi("Roller kaydedildi!","–†–æ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"))
        else:
            # Mevcut deƒüerleri kullan
            st.session_state["roles_df"] = edited_roles

    # Varsayƒ±lanlara d√∂nd√ºr
    if st.button(bi("‚Ü©Ô∏è Rolleri varsayƒ±lana d√∂nd√ºr","‚Ü©Ô∏è –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")):
        st.session_state["roles_df"]=pd.DataFrame([
            {"Rol (–†–æ–ª—å)":"brigadir","Aƒüƒ±rlƒ±k (–í–µ—Å)":0.10,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":120000,"%RUS":100,"%SNG":0,"%TUR":0},
            {"Rol (–†–æ–ª—å)":"kalfa","Aƒüƒ±rlƒ±k (–í–µ—Å)":0.20,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":110000,"%RUS":20,"%SNG":60,"%TUR":20},
            {"Rol (–†–æ–ª—å)":"usta_demirci","Aƒüƒ±rlƒ±k (–í–µ—Å)":0.60,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":100000,"%RUS":10,"%SNG":70,"%TUR":20},
            {"Rol (–†–æ–ª—å)":"usta_kalipci","Aƒüƒ±rlƒ±k (–í–µ—Å)":0.60,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":100000,"%RUS":10,"%SNG":70,"%TUR":20},
            {"Rol (–†–æ–ª—å)":"betoncu","Aƒüƒ±rlƒ±k (–í–µ—Å)":1.00,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":90000,"%RUS":10,"%SNG":70,"%TUR":20},
            {"Rol (–†–æ–ª—å)":"duz_isci","Aƒüƒ±rlƒ±k (–í–µ—Å)":0.50,"Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)":80000,"%RUS":10,"%SNG":70,"%TUR":20},
        ])
        st.success("Varsayƒ±lan roller y√ºklendi.")


# ==================== 4) Gƒ∞DERLER (sade) ====================
with tab_gider:
    bih("üë• Global Ki≈üi Ba≈üƒ± (Aylƒ±k) Giderler","üë• –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (–≤ –º–µ—Å—è—Ü)", level=3)
    c1,c2,c3 = st.columns(3)
    with c1:
        # Yemek
        st.session_state["food"] = st.number_input(bi("üç≤ Yemek (‚ÇΩ/ay)","üç≤ –ü–∏—Ç–∞–Ω–∏–µ (‚ÇΩ/–º–µ—Å)"), 0.0, value=10000.0, step=10.0, key="food_inp")
        st.session_state["food_vat"] = st.checkbox(bi("Yemek KDV dahil mi?","–ü–∏—Ç–∞–Ω–∏–µ —Å –ù–î–°?"), value=True, key="food_vat_inp")
        
        # PPE
        st.session_state["ppe"] = st.number_input(bi("ü¶∫ PPE/–°–ò–ó (‚ÇΩ/ay)","ü¶∫ –°–ò–ó (‚ÇΩ/–º–µ—Å)"), 0.0, value=1500.0, step=5.0, key="ppe_inp")
        st.session_state["ppe_vat"] = st.checkbox(bi("PPE KDV dahil mi?","–°–ò–ó —Å –ù–î–°?"), value=True, key="ppe_vat_inp")
    with c2:
        # Barƒ±nma
        st.session_state["lodging"] = st.number_input(bi("üè† Barƒ±nma (‚ÇΩ/ay)","üè† –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ (‚ÇΩ/–º–µ—Å)"), 0.0, value=12000.0, step=10.0, key="lodging_inp")
        st.session_state["lodging_vat"] = st.checkbox(bi("Barƒ±nma KDV dahil mi?","–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ —Å –ù–î–°?"), value=True, key="lodging_vat_inp")
        
        # Eƒüitim
        st.session_state["training"] = st.number_input(bi("üéì Eƒüitim (‚ÇΩ/ay)","üéì –û–±—É—á–µ–Ω–∏–µ (‚ÇΩ/–º–µ—Å)"), 0.0, value=500.0, step=5.0, key="training_inp")
        st.session_state["training_vat"] = st.checkbox(bi("Eƒüitim KDV dahil mi?","–û–±—É—á–µ–Ω–∏–µ —Å –ù–î–°?"), value=True, key="training_vat_inp")
    with c3:
        # Ula≈üƒ±m
        st.session_state["transport"] = st.number_input(bi("üöá Ula≈üƒ±m (‚ÇΩ/ay)","üöá –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (‚ÇΩ/–º–µ—Å)"), 0.0, value=3000.0, step=5.0, key="transport_inp")
        st.session_state["transport_vat"] = st.checkbox(bi("Ula≈üƒ±m KDV dahil mi?","–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –ù–î–°?"), value=False, key="transport_vat_inp")
        
        # KDV oranƒ±
        st.session_state["vat_rate"] = st.number_input(bi("KDV oranƒ± (–ù–î–°)","–°—Ç–∞–≤–∫–∞ –ù–î–°"), min_value=0.0, max_value=0.25, value=0.20, step=0.001, key="vat_rate_inp",
                                                       help="'KDV dahil' i≈üaretli kalemlerde KDV ayrƒ±≈ütƒ±rƒ±lƒ±r. / –ï—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ '—Å –ù–î–°', –ù–î–° –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ —Å—É–º–º—ã.")

    # Sarf Gruplarƒ±
    with st.expander("üß¥ Sarf Gruplarƒ± ‚Äî % (se√ß-belirle) / üß¥ –ì—Ä—É–ø–ø—ã —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ ‚Äî % (–≤—ã–±—Ä–∞—Ç—å-–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)", expanded=False):
        if "cons_groups_state" not in st.session_state:
            st.session_state["cons_groups_state"] = {name: {"on": False, "pct": float(p)} for (name,p) in CONSUMABLES_PRESET}
        cons_state = st.session_state["cons_groups_state"]
        cons_sum = 0.0
        for name, _d in CONSUMABLES_PRESET:
            c1, c2 = st.columns([0.60, 0.40])
            with c1: st.write(name)
            with c2:
                on = st.checkbox(bi("Aktif","–ê–∫—Ç–∏–≤–Ω–æ"), value=cons_state[name]["on"], key=f"cg_on_{name}")
                pct = st.number_input(bi("Etki %","–î–æ–ª—è, %"), min_value=0.0, max_value=100.0,
                                      value=float(cons_state[name]["pct"]), step=0.25, format="%.2f",
                                      key=f"cg_pct_{name}")
                cons_state[name] = {"on": bool(on), "pct": float(pct)}
                if on: cons_sum += float(pct)
        st.session_state["_cgroups_total_pct"] = float(cons_sum)
        st.markdown(f"<div class='badge'>{bi('Se√ßili toplam:','–í—ã–±—Ä–∞–Ω–æ –≤—Å–µ–≥–æ:')} <b>{cons_sum:.2f}%</b></div>", unsafe_allow_html=True)

        # √ñzel kalemler
        st.markdown(bi("**‚ûï √ñzel sarf kalemleri**","**‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏**"))
        if "cons_custom_df" not in st.session_state:
            st.session_state["cons_custom_df"] = pd.DataFrame([{"Kalem (–°—Ç–∞—Ç—å—è)":"", "Oran (%) (–î–æ–ª—è, %)":0.0, "Dahil? (–í–∫–ª—é—á–∏—Ç—å?)":False}])
        
        # √ñzel sarf kalemleri tablosunu d√ºzenle
        with st.form(key="consumables_form", clear_on_submit=False):
            edited_cons_custom = st.data_editor(
                st.session_state["cons_custom_df"],
                num_rows="dynamic", hide_index=True, key="custom_consumables_editor_form"
            )
            if st.form_submit_button(bi("üíæ Sarf Kaydet","üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏")):
                st.session_state["cons_custom_df"] = edited_cons_custom
                st.success(bi("Sarf kalemleri kaydedildi!","–ì—Ä—É–ø–ø–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"))
            else:
                # Mevcut deƒüerleri kullan
                st.session_state["cons_custom_df"] = edited_cons_custom

    # Genel Gider Gruplarƒ±
    with st.expander("üßÆ Genel Gider Gruplarƒ± ‚Äî % (se√ß-belirle) / üßÆ –ì—Ä—É–ø–ø—ã –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî % (–≤—ã–±—Ä–∞—Ç—å-–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)", expanded=False):
        if "ovh_groups_state" not in st.session_state:
            st.session_state["ovh_groups_state"] = {name: {"on": False, "pct": float(p)} for (name,p) in OVERHEAD_GROUPS_PRESET}
        ovh_state = st.session_state["ovh_groups_state"]
        ovh_sum = 0.0
        for name, _d in OVERHEAD_GROUPS_PRESET:
            c1, c2 = st.columns([0.60, 0.40])
            with c1: st.write(name)
            with c2:
                on = st.checkbox(bi("Aktif","–ê–∫—Ç–∏–≤–Ω–æ"), value=ovh_state[name]["on"], key=f"og_on_{name}")
                pct = st.number_input(bi("Etki %","–î–æ–ª—è, %"), min_value=0.0, max_value=100.0,
                                      value=float(ovh_state[name]["pct"]), step=0.25, format="%.2f",
                                      key=f"og_pct_{name}")
                ovh_state[name] = {"on": bool(on), "pct": float(pct)}
                if on: ovh_sum += float(pct)
        if ovh_sum/100.0 > OVERHEAD_RATE_MAX:
            st.warning(bi(f"Genel gider toplamƒ± {ovh_sum:.2f}% > izinli {OVERHEAD_RATE_MAX*100:.0f}% ‚Äî hesapta {OVERHEAD_RATE_MAX*100:.0f}% ile sƒ±nƒ±rlandƒ±rƒ±lƒ±r.",
                          f"–°—É–º–º–∞ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ {ovh_sum:.2f}% > –ª–∏–º–∏—Ç–∞ {OVERHEAD_RATE_MAX*100:.0f}% ‚Äî –≤ —Ä–∞—Å—á—ë—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏–º {OVERHEAD_RATE_MAX*100:.0f}%."))
        st.session_state["_ogroups_total_pct"] = float(ovh_sum)
        st.markdown(f"<div class='badge'>{bi('Se√ßili toplam:','–í—ã–±—Ä–∞–Ω–æ –≤—Å–µ–≥–æ:')} <b>{ovh_sum:.2f}%</b></div>", unsafe_allow_html=True)

        # √ñzel kalemler
        st.markdown(bi("**‚ûï √ñzel genel gider kalemleri**","**‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã**"))
        if "ovh_custom_df" not in st.session_state:
            st.session_state["ovh_custom_df"] = pd.DataFrame([{"Kalem (–°—Ç–∞—Ç—å—è)":"", "Oran (%) (–î–æ–ª—è, %)":0.0, "Dahil? (–í–∫–ª—é—á–∏—Ç—å?)":False}])
        
        # √ñzel genel gider kalemleri tablosunu d√ºzenle
        with st.form(key="overhead_form", clear_on_submit=False):
            edited_ovh_custom = st.data_editor(
                st.session_state["ovh_custom_df"],
                num_rows="dynamic", hide_index=True, key="custom_overhead_editor_form"
            )
            if st.form_submit_button(bi("üíæ Genel Gider Kaydet","üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã")):
                st.session_state["ovh_custom_df"] = edited_ovh_custom
                st.success(bi("Genel gider kalemleri kaydedildi!","–ì—Ä—É–ø–ø–∞ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"))
            else:
                # Mevcut deƒüerleri kullan
                st.session_state["ovh_custom_df"] = edited_ovh_custom

    # Indirect (Diƒüer) Gruplarƒ±
    with st.expander("üì¶ Indirect (Diƒüer) Gruplarƒ± ‚Äî % (se√ß-belirle) / üì¶ –ö–æ—Å–≤–µ–Ω–Ω—ã–µ (–ø—Ä–æ—á–∏–µ) ‚Äî % (–≤—ã–±—Ä–∞—Ç—å-–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)", expanded=False):
        st.info(bi("‚ÑπÔ∏è Not: Indirect gruplarƒ± varsayƒ±lan olarak pasif durumda. ƒ∞htiya√ß duyduƒüunuz kalemleri aktif hale getirin.",
                   "‚ÑπÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤—ã–∫–ª—é—á–µ–Ω—ã. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ."))
        st.caption("üìã **Varsayƒ±lan deƒüerler:** ≈ûantiye Genel ƒ∞dare (%7), Ekipman/Amortisman (%5), Lojistik/Sevkiyat (%3), G√ºvenlik & ƒ∞SG (%2), Ofis/GSM/ƒ∞zin-Belge (%1.5)")
        
        if "indirect_groups_state" not in st.session_state:
            st.session_state["indirect_groups_state"] = {name: {"on": False, "pct": float(p)} for (name,p) in INDIRECT_PRESET_DEFAULTS.items()}
        
        ind_state = st.session_state["indirect_groups_state"]
        ind_sum = 0.0
        
        # Indirect gruplarƒ±nƒ± g√∂ster
        for name, _d in INDIRECT_PRESET_DEFAULTS.items():
            c1, c2 = st.columns([0.65, 0.35])
            with c1: 
                st.write(name)
                # Pasif kalemler i√ßin gri renk
                if not ind_state[name]["on"]:
                    st.caption(bi("‚ö™ Pasif","‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"))
            with c2:
                on = st.checkbox(bi("Aktif","–ê–∫—Ç–∏–≤–Ω–æ"), value=ind_state[name]["on"], key=f"ig_on_{name}")
                pct = st.number_input(bi("Etki %","–î–æ–ª—è, %"), min_value=0.0, max_value=100.0,
                                      value=float(ind_state[name]["pct"]), step=0.25, format="%.2f",
                                      key=f"ig_pct_{name}")
                ind_state[name] = {"on": bool(on), "pct": float(pct)}
                if on: ind_sum += float(pct)
        
        st.session_state["_igroups_total_pct"] = float(ind_sum)
        
        # Toplam g√∂sterimi
        if ind_sum > 0:
            st.success(bi(f"‚úÖ Se√ßili Indirect Toplam: {ind_sum:.2f}%", f"‚úÖ –°—É–º–º–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Å–≤–µ–Ω–Ω—ã—Ö: {ind_sum:.2f}%"))
        else:
            st.warning(bi("‚ö†Ô∏è Indirect: Hi√ßbir kalem se√ßili deƒüil - Varsayƒ±lan olarak t√ºm kalemler pasif",
                          "‚ö†Ô∏è –ö–æ—Å–≤–µ–Ω–Ω—ã–µ: –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –≤—ã–∫–ª—é—á–µ–Ω—ã"))

        # √ñzel kalemler
        st.markdown(bi("**‚ûï √ñzel indirect kalemleri**","**‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ**"))
        st.caption(bi("√ñzel kalemler de varsayƒ±lan olarak pasif durumda. ƒ∞htiya√ß duyduƒüunuz kalemleri ekleyip aktif hale getirin.",
                      "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–∂–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ."))
        st.caption(bi("üí° ƒ∞pucu: Yeni kalem eklemek i√ßin 'Dahil?' s√ºtunundaki kutuyu i≈üaretleyin.",
                      "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É, –æ—Ç–º–µ—Ç—å—Ç–µ —á–µ–∫–±–æ–∫—Å '–í–∫–ª—é—á–∏—Ç—å?'."))
        if "ind_custom_df" not in st.session_state:
            st.session_state["ind_custom_df"] = pd.DataFrame([{"Kalem (–°—Ç–∞—Ç—å—è)":"", "Oran (%) (–î–æ–ª—è, %)":0.0, "Dahil? (–í–∫–ª—é—á–∏—Ç—å?)":False}])
        
        # √ñzel indirect kalemleri tablosunu d√ºzenle
        with st.form(key="indirect_form", clear_on_submit=False):
            edited_ind_custom = st.data_editor(
                st.session_state["ind_custom_df"],
                num_rows="dynamic", hide_index=True, key="custom_indirect_editor_form"
            )
            if st.form_submit_button(bi("üíæ Indirect Kaydet","üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Å–≤–µ–Ω–Ω—ã–µ")):
                st.session_state["ind_custom_df"] = edited_ind_custom
                st.success(bi("Indirect kalemleri kaydedildi!","–ö–æ—Å–≤–µ–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"))
            else:
                # Mevcut deƒüerleri kullan
                st.session_state["ind_custom_df"] = edited_ind_custom
    
    # Grup toplamlarƒ±nƒ± hesapla
    # Sarf toplamƒ±
    cons_total = st.session_state.get("_cgroups_total_pct", 0.0)
    cons_custom_df = st.session_state.get("cons_custom_df", pd.DataFrame())
    if isinstance(cons_custom_df, pd.DataFrame) and not cons_custom_df.empty:
        for _, rr in cons_custom_df.iterrows():
            if bool(rr.get("Dahil? (–í–∫–ª—é—á–∏—Ç—å?)", False)):
                cons_total += float(rr.get("Oran (%) (–î–æ–ª—è, %)", 0.0))
    st.session_state["consumables_rate"] = cons_total / 100.0
    
    # Genel gider toplamƒ±
    ovh_total = st.session_state.get("_ogroups_total_pct", 0.0)
    ovh_custom_df = st.session_state.get("ovh_custom_df", pd.DataFrame())
    if isinstance(ovh_custom_df, pd.DataFrame) and not ovh_custom_df.empty:
        for _, rr in ovh_custom_df.iterrows():
            if bool(rr.get("Dahil? (–í–∫–ª—é—á–∏—Ç—å?)", False)):
                ovh_total += float(rr.get("Oran (%) (–î–æ–ª—è, %)", 0.0))
    st.session_state["overhead_rate"] = min(ovh_total / 100.0, OVERHEAD_RATE_MAX)
    
    # Indirect toplamƒ±
    ind_total = st.session_state.get("_igroups_total_pct", 0.0)
    ind_custom_df = st.session_state.get("ind_custom_df", pd.DataFrame())
    if isinstance(ind_custom_df, pd.DataFrame) and not ind_custom_df.empty:
        for _, rr in ind_custom_df.iterrows():
            if bool(rr.get("Dahil? (–í–∫–ª—é—á–∏—Ç—å?)", False)):
                ind_total += float(rr.get("Oran (%) (–î–æ–ª—è, %)", 0.0))
    
    # Indirect oranƒ±nƒ± session state'e kaydet
    st.session_state["indirect_rate_total"] = ind_total / 100.0
    
    # Grup toplamlarƒ±nƒ± g√∂ster: Sarf, Overhead, Indirect + Genel Toplam
    st.markdown("---")
    cols_sum = st.columns(3)
    with cols_sum[0]:
        st.info(bi(f"Sarf Toplam: {cons_total:.2f}% ({cons_total/100.0:.3f})",
                   f"–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –≤—Å–µ–≥–æ: {cons_total:.2f}% ({cons_total/100.0:.3f})"))
    with cols_sum[1]:
        st.info(bi(f"Genel Gider Toplam: {ovh_total:.2f}% ({ovh_total/100.0:.3f})",
                   f"Overhead –≤—Å–µ–≥–æ: {ovh_total:.2f}% ({ovh_total/100.0:.3f})"))
    with cols_sum[2]:
        st.info(bi(f"Indirect Toplam: {ind_total:.2f}% ({ind_total/100.0:.3f})",
                   f"–ö–æ—Å–≤–µ–Ω–Ω—ã–µ –≤—Å–µ–≥–æ: {ind_total:.2f}% ({ind_total/100.0:.3f})"))

    grand_total = cons_total + ovh_total + ind_total
    st.success(bi(f"‚úÖ Genel Toplam: {grand_total:.2f}% ({grand_total/100.0:.3f})",
                  f"‚úÖ –ò—Ç–æ–≥–æ –ø–æ –≥—Ä—É–ø–ø–∞–º: {grand_total:.2f}% ({grand_total/100.0:.3f})"))
# ==================== 5) SORUMLULUK MATRƒ∞Sƒ∞ (≈üƒ±k) ====================
with tab_matris:
    bih("‚ú® Sorumluluk Matrisi (checkbox + % katkƒ±)", "‚ú® –ú–∞—Ç—Ä–∏—Ü–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (—á–µ–∫–±–æ–∫—Å + –≤–∫–ª–∞–¥, %)", level=4)
    bitr("Se√ßtiƒüin satƒ±rlar bize ait maliyet sayƒ±lƒ±r. Yandaki y√ºzde kutusu 'toplam maliyete oran' katkƒ±sƒ±dƒ±r.",
         "–û—Ç–º–µ—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞. –ü–æ–ª–µ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º ‚Äî –≤–∫–ª–∞–¥ –≤ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.")
    bitr("√ústteki manuel %'lerle √ßakƒ±≈ümayƒ± √∂nlemek i√ßin a≈üaƒüƒ±daki anahtarƒ± kullan.",
         "–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä—É—á–Ω—ã–º–∏ %, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∏–∂–µ.")

    use_matrix_override = st.toggle(bi("üîó Matris toplamlarƒ± manuel Sarf/Overhead/Indirect y√ºzdelerini ge√ßsin (override)",
                                       "üîó –°—É–º–º—ã –º–∞—Ç—Ä–∏—Ü—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç —Ä—É—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞–º/overhead/–∫–æ—Å–≤–µ–Ω–Ω—ã–º"),
                                    value=st.session_state.get("use_matrix_override", False))
    st.session_state["use_matrix_override"] = use_matrix_override

    # Katalog: (Grup, anahtar, TR, RU, kategori: consumables|overhead|indirect, varsayƒ±lan %, √ßakƒ±≈üma etiketi)
    # overlap: global_extras | core_labor | materials | None
    def _tr_resp_label(key: str, default_tr: str) -> str:
        mapping = {
            # General
            "gen_staff_work": "ƒ∞≈ülerin y√ºr√ºt√ºlmesi i√ßin personel",
            "gen_work_permit": "Personel i√ßin √ßalƒ±≈üma izni",
            "gen_visa_rf": "Yabancƒ± √ßalƒ±≈üanlar i√ßin RF √ßalƒ±≈üma vizeleri",
            "gen_migration_resp": "RF g√∂√ß mevzuatƒ±na uyum (ceza/hukuk/sƒ±nƒ±r dƒ±≈üƒ± riskleri)",
            "gen_social_payments": "Personel ve alt y√ºkleniciler i√ßin sosyal √∂demeler/vergiler",
            "gen_staff_transport_domintl": "Personelin ta≈üƒ±nmasƒ± (yurti√ßi/yurtdƒ±≈üƒ±)",
            "gen_staff_transport_local": "Personelin yerel ta≈üƒ±nmasƒ±",
            "gen_accom_food": "Personelin barƒ±nma ve yemek giderleri",
            "gen_transport_mounting": "Montaj malzemeleri/ekipmanlarƒ±nƒ±n yerel ta≈üƒ±nmasƒ± (y√ºklenici)",
            "gen_transport_wh_to_site": "M√º≈üteri deposundan ≈üantiyeye yerel ta≈üƒ±ma",
            "gen_risk_loss_customer_ware": "M√º≈üteri malzemelerinin depolarda kayƒ±p riski",
            "gen_risk_loss_customer_to_finish": "Montaja verilen m√º≈üteri malzemelerinin bitime kadar kayƒ±p riski",
            "gen_risk_own_materials_equipment": "Y√ºklenicinin kendi malzeme/ekipmanƒ±nƒ±n kayƒ±p riski (kablolar d√¢hil)",
            "gen_required_licenses": "ƒ∞≈ü t√ºrleri i√ßin gerekli lisanslar (RF d√ºzenlemeleri)",
            "gen_insurance_equip_staff": "Ekipman ve personel sigortasƒ±",
            "gen_workplace_facilities": "√áalƒ±≈üma alanƒ± donanƒ±mƒ±: mobilya, telefon, internet, yazƒ±cƒ±",
            # H&S
            "hs_engineer_on_site": "ƒ∞SG m√ºhendisi ‚Äì sahada daimi temsilci",
            "hs_action_plan": "ƒ∞SG eylem planƒ±",
            "hs_meetings": "ƒ∞SG koordinasyon toplantƒ±larƒ±na katƒ±lƒ±m (talebe baƒülƒ±)",
            "hs_initial_briefing": "T√ºm personel i√ßin ilk ƒ∞SG bilgilendirmesi",
            "hs_full_responsibility": "Y√ºklenici alanlarƒ±nda ƒ∞SG kurallarƒ±na tam sorumluluk",
            "hs_guarding_openings": "A√ßƒ±klƒ±klarƒ±n korunmasƒ± ve kapatƒ±lmasƒ± (y√ºklenici alanlarƒ±)",
            "hs_site_med_station": "≈ûantiye reviri (ilk yardƒ±m; hem≈üire g√ºnd√ºz/gece)",
            "hs_medical_costs": "Tƒ±bbi giderler (ila√ß, hastane vb.)",
            "hs_first_aid_kits": "ƒ∞lk yardƒ±m ekipmanlarƒ± (√ßalƒ±≈üma alanlarƒ±nda setler)",
            "hs_ppe": "Sƒ∞Z, i≈ü kƒ±yafeti ve ayakkabƒ±",
            "hs_firefighting_eq": "Yangƒ±nla m√ºcadele ekipmanƒ± (t√ºp/√∂rt√º/su)",
            "hs_safety_labeling": "G√ºvenlik i≈üaretlemeleri/uyarƒ± levhalarƒ±",
            "hs_wind_panels": "R√ºzg√¢r panelleri",
            "hs_protective_nets": "Koruyucu-yakalama aƒülarƒ± (–ó–£–°)",
            "hs_worker_certs": "√áalƒ±≈üanlar i√ßin gerekli sertifika/ehliyetler",
            "hs_consumables": "ƒ∞SG i√ßin t√ºm sarf malzemeleri",
            "hs_lifting_consumables": "Kaldƒ±rma i≈üleri (bkz. kule vin√ßler) i√ßin sarf malzemeleri",
            "hs_lifting_supervisors": "Kaldƒ±rma ekipmanƒ± i√ßin i≈üaret√ßi/rigging sorumlularƒ±",
            # Site
            "site_power_conn": "Enerji baƒülantƒ± noktalarƒ± (genel plana g√∂re)",
            "site_power_distribution": "Y√ºklenici alanlarƒ±na enerji daƒüƒ±tƒ±mƒ±",
            "site_power_costs": "Elektrik giderleri",
            "site_water_conn": "Prosess suyu baƒülantƒ± noktalarƒ± (genel plana g√∂re)",
            "site_water_distribution": "Y√ºklenici alanlarƒ±na su daƒüƒ±tƒ±mƒ±",
            "site_water_costs": "Su giderleri",
            "site_generator": "Gerekirse jenerat√∂r",
            "site_main_lighting": "Alan/bina ana aydƒ±nlatmasƒ± (t√ºm d√∂nem)",
            "site_add_lighting": "Ek aydƒ±nlatma (y√ºklenici alanlarƒ±)",
            "site_covered_storage": "Montaja verilmi≈ü malzemeler i√ßin kapalƒ± stok alanƒ±",
            "site_closed_storage": "Montaj malzemeleri i√ßin kapalƒ± depo/ambar",
            "site_temp_roads": "Yalnƒ±z y√ºklenici kullanƒ±mƒ±na ge√ßici yollar",
            "site_add_fencing": "Y√ºklenici alanƒ± i√ßin ek √ßit (gerekirse)",
            "site_scrap_place": "≈ûantiyede hurda metal depolama alanƒ±",
            "site_lockers": "Soyunma odalarƒ±",
            "site_office": "Ofis alanlarƒ±",
            "site_toilets": "Y√ºklenici i√ßin tuvaletler",
            "site_fire_access": "Yangƒ±n m√ºdahale yollarƒ± ve ≈üantiyeye s√ºrekli eri≈üim",
            "site_gate_guard": "Giri≈ü kapƒ±sƒ±nda g√ºvenlik",
            "site_add_guard": "Ek g√ºvenlik (gerekirse)",
            "site_full_fencing": "T√ºm ≈üantiye alanƒ±nƒ±n √ßevrilmesi",
            # Works
            "w_proj_docs": "Sayƒ±sal proje dok√ºmanlarƒ±",
            "w_mos": "Y√∂ntem bildirimi (PPR) hazƒ±rlanmasƒ±",
            "w_handover_docs": "Teslim dosyalarƒ± (as-built/protokoller) hazƒ±rlanmasƒ±",
            "w_docs_archive": "Ar≈üiv/Elektronik sistemden dok√ºmanlar",
            "w_handover_site_coord": "≈ûantiye aƒülarƒ±nƒ±n ve koordinat sisteminin devri",
            "w_rep_present": "Y√ºklenici temsilcisinin sahada s√ºrekli bulunmasƒ±",
            "w_rep_coord_meet": "Koordinasyon toplantƒ±larƒ±na katƒ±lƒ±m (y√ºklenici temsilcisi)",
            "w_detailed_schedule": "Y√ºklenici i≈ülerinin ayrƒ±ntƒ±lƒ± i≈ü programƒ±",
            "w_weekly_reports": "Haftalƒ±k ilerleme raporlarƒ± (kaynaklar dahil)",
            "w_weekly_safety": "Haftalƒ±k ƒ∞SG raporlarƒ±",
            "w_concrete_proc": "Beton tedariki",
            "w_rebar_proc": "Donatƒ± √ßeliƒüi tedariki",
            "w_scaff_form": "ƒ∞skele ve kalƒ±p sistemleri (t√ºm√º)",
            "w_tower_cranes": "Kule vin√ßler (operat√∂rl√º)",
            "w_temp_lifts": "Ge√ßici ≈üantiye asans√∂rleri (operat√∂rl√º)",
            "w_concrete_pumps": "Beton pompalarƒ± (t√ºm borular ile)",
            "w_pump_operators": "Pompa operat√∂rleri, hat montajƒ± ve bakƒ±mƒ±",
            "w_hyd_dist": "Hidrolik beton daƒüƒ±tƒ±cƒ±lar",
            "w_hyd_dist_ops": "Hidrolik daƒüƒ±tƒ±cƒ± operat√∂rleri",
            "w_aux_lifting": "Hareketli & yardƒ±mcƒ± kaldƒ±rma ara√ßlarƒ± (kamyon, vin√ß, manlift)",
            "w_wheel_wash": "Tekerlek yƒ±kama (operat√∂rl√º)",
            "w_all_equipment": "ƒ∞≈ülerin icrasƒ± i√ßin her t√ºr ekipman",
            "w_aux_heat_insul": "Betonda kullanƒ±lan yardƒ±mcƒ± ƒ±sƒ± yalƒ±tƒ±m malzemeleri",
            "w_consumables": "ƒ∞malat sarflarƒ± (gaz, disk, tel vb.)",
            "w_measurements": "√ñl√ß√ºmler ve evrak (as-built d√¢hil)",
            "w_radios": "El telsizleri",
            "w_concrete_care": "Beton bakƒ±m i≈üleri (kƒ±≈üƒ±n ƒ±sƒ±tma d√¢hil)",
            "w_lab_tests": "Gerekli t√ºm laboratuvar testleri",
            "w_cleaning": "Y√ºklenici alanlarƒ±nƒ±n temizliƒüi, atƒ±klarƒ±n uzakla≈ütƒ±rƒ±lmasƒ±",
            "w_snow_fire_access": "Ana g√ºzerg√¢hlar ve yangƒ±n yollarƒ±ndan kar/buz temizliƒüi",
            "w_snow_local": "Y√ºklenici alanlarƒ±/depolar/ge√ßici yollardan kar/buz temizliƒüi",
            "w_stormwater_site": "≈ûantiye sahasƒ±ndan yaƒümur suyu drenajƒ±",
            "w_stormwater_contractor": "Y√ºklenici alanlarƒ±ndan yaƒümur suyu drenajƒ±",
            "w_load_unload": "Malzemelerin sahada y√ºkleme/bo≈üaltmasƒ± (d√º≈üey/yatay)",
            "w_transport_inside": "Saha i√ßi malzeme ta≈üƒ±malarƒ±",
            "w_rebar_couplings": "Di≈üli/sƒ±kma muflar + hazƒ±rlƒ±k ekipmanƒ± (donatƒ±)",
            "w_rebar_coupling_works": "Muflu donatƒ± hazƒ±rlƒ±k/baƒülantƒ± √ßalƒ±≈ümalarƒ±",
            "w_material_overspend": "Malzeme israfƒ±nƒ±n mali sorumluluƒüu",
            "w_repair_for_handover": "Teslim i√ßin gerekli onarƒ±m i≈üleri",
        }
        return mapping.get(key, default_tr)
    resp_catalog = [
        # ---------- 1) General ----------
        ("General","gen_staff_work","Staff for work implementation","–ü–µ—Ä—Å–æ–Ω–∞–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç","overlap_only",0.0,"core_labor"),
        ("General","gen_work_permit","Work permit for the staff","–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞","overhead",0.0,None),
        ("General","gen_visa_rf","Russian working visas for foreign employees","–í–∏–∑—ã –†–§ –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞","overhead",0.0,None),
        ("General","gen_migration_resp","Employees follow RF migration legislation (penalties/legal/deportation)","–°–æ–±–ª—é–¥–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§‚Ä¶","overhead",0.0,None),
        ("General","gen_social_payments","Social payments/taxes for Contractor's staff & subs","–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è, –Ω–∞–ª–æ–≥–∏‚Ä¶","overlap_only",0.0,"core_labor"),
        ("General","gen_staff_transport_domintl","Transportation costs of the staff (Domestic & International)","–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ/–º–µ–∂–¥—É–Ω–∞—Ä.)","indirect",0.0,None),
        ("General","gen_staff_transport_local","Local transportation of the staff","–ú–µ—Å—Ç–Ω–∞—è –ø–µ—Ä–µ–≤–æ–∑–∫–∞ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞","overlap_only",0.0,"global_extras"),
        ("General","gen_accom_food","Accommodation & feeding of the staff","–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –∏ –ø–∏—Ç–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞","overlap_only",0.0,"global_extras"),
        ("General","gen_transport_mounting","Local transportation of mounting materials/equipment (Contractor)","–ú–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–æ–Ω—Ç–∞–∂–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞","indirect",0.0,None),
        ("General","gen_transport_wh_to_site","Local transport from Customer warehouse to site","–ú–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ —Å–∫–ª–∞–¥–∞ –ó–∞–∫–∞–∑—á–∏–∫–∞ –¥–æ –ø–ª–æ—â–∞–¥–∫–∏","indirect",0.0,None),
        ("General","gen_risk_loss_customer_ware","Risk of loss of Customer's materials in warehouses","–†–∏—Å–∫ —É—Ç—Ä–∞—Ç—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö‚Ä¶","indirect",0.0,None),
        ("General","gen_risk_loss_customer_to_finish","Risk of loss of Customer's materials delivered for mounting till finish","–†–∏—Å–∫ —É—Ç—Ä–∞—Ç—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫—É‚Ä¶","indirect",0.0,None),
        ("General","gen_risk_own_materials_equipment","Risk of loss of Contractor's own materials & equipment incl. cables","–†–∏—Å–∫ —É—Ç—Ä–∞—Ç—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞‚Ä¶","indirect",0.0,None),
        ("General","gen_required_licenses","Required licenses per work types (RF regulations)","–¢—Ä–µ–±—É–µ–º—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ –≤–∏–¥–∞–º —Ä–∞–±–æ—Ç‚Ä¶","overhead",0.0,None),
        ("General","gen_insurance_equip_staff","Insurance of the Contractor's equipment and staff","–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞","indirect",0.0,None),
        ("General","gen_workplace_facilities","Workplace Facilities: furniture, phone, internet, printer","–û—Å–Ω–∞—â–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç: –º–µ–±–µ–ª—å, —Ç–µ–ª–µ—Ñ–æ–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ø—Ä–∏–Ω—Ç–µ—Ä","indirect",0.0,None),

        # ---------- 2) H&S ----------
        ("H&S","hs_engineer_on_site","H&S engineer ‚Äì permanent representative","–ò–Ω–∂–µ–Ω–µ—Ä –¢–ë ‚Äì –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞","overhead",0.0,None),
        ("H&S","hs_action_plan","H&S action plan","–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –û–¢ –∏ –¢–ë","overhead",0.0,None),
        ("H&S","hs_meetings","Participation in coordination meetings on H&S (on request)","–£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–≤–µ—â–∞–Ω–∏—è—Ö –ø–æ –û–¢ –∏ –¢–ë‚Ä¶","overhead",0.0,None),
        ("H&S","hs_initial_briefing","Initial briefing for Contractor's entire staff","–ü–µ—Ä–≤–∏—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ –û–¢ –∏ –¢–ë‚Ä¶","overhead",0.0,None),
        ("H&S","hs_full_responsibility","Full responsibility for observance of H&S in Contractor areas","–ü–æ–ª–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –û–¢ –∏ –¢–ë‚Ä¶","overhead",0.0,None),
        ("H&S","hs_guarding_openings","Guarding and closing of openings (Contractor areas)","–ó–∞—â–∏—Ç–Ω—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–º–æ–≤‚Ä¶","indirect",0.0,None),
        ("H&S","hs_site_med_station","Site medical station (first aid; nurse day/night)","–ú–µ–¥–ø—É–Ω–∫—Ç –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ ‚Äì –ø–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å‚Ä¶","indirect",0.0,None),
        ("H&S","hs_medical_costs","Medical costs (medicine, hospital, etc.)","–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (–ª–µ–∫–∞—Ä—Å—Ç–≤–æ, –±–æ–ª—å–Ω–∏—Ü–∞ –∏ —Ç. –¥.)","indirect",0.0,None),
        ("H&S","hs_first_aid_kits","Equipment for first aid (kits at working area)","–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏ (–∞–ø—Ç–µ—á–∫–∏)","indirect",0.0,None),
        ("H&S","hs_ppe","PPE, clothing & shoes for Contractor employees","–°–ò–ó, –æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ü–æ–¥—Ä—è–¥—á–∏–∫–∞","overlap_only",0.0,"global_extras"),
        ("H&S","hs_firefighting_eq","Firefighting equipment (extinguisher/blanket/water)","–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ‚Ä¶","indirect",0.0,None),
        ("H&S","hs_safety_labeling","Safety labeling / warning signs","–û—Å–Ω–∞—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–º–∏ —Ç–∞–±–ª–∏—á–∫–∞–º–∏","indirect",0.0,None),
        ("H&S","hs_wind_panels","Wind Panels","–ó–∞—â–∏—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω","indirect",0.0,None),
        ("H&S","hs_protective_nets","Protective-trapping nets (–ó–£–°)","–ó–∞—â–∏—Ç–Ω–æ-—É–ª–∞–≤–ª–∏–≤–∞—é—â–∏–µ —Å–µ—Ç–∫–∏ (–ó–£–°)","indirect",0.0,None),
        ("H&S","hs_worker_certs","All necessary certificates/attestations for workers","–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã/–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö","overhead",0.0,None),
        ("H&S","hs_consumables","All consumables for H&S","–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –û–¢ –∏ –¢–ë","consumables",0.0,None),
        ("H&S","hs_lifting_consumables","All consumables for lifting (incl. tower cranes)","–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –¥–ª—è —Ç–∞–∫–µ–ª–∞–∂–Ω—ã—Ö —Ä–∞–±–æ—Ç (–≤ —Ç.—á. –±–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–∞–Ω—ã)","consumables",0.0,None),
        ("H&S","hs_lifting_supervisors","Lifting supervisors for all lifting equipment","–°—Ç—Ä–æ–ø–∞–ª—å—â–∏–∫–∏/—Ä–∏–≥–≥–µ—Ä—ã/—Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä—ã –ø–æ –ø–æ–¥—ä—ë–º–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º","indirect",0.0,None),

        # ---------- 3) Site equipment ----------
        ("Site","site_power_conn","Power connection points (per master plan)","–¢–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≥–µ–Ω–ø–ª–∞–Ω—É","indirect",0.0,None),
        ("Site","site_power_distribution","Distribution of power to Contractor's site","–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –¥–æ –∑–æ–Ω –ü–æ–¥—Ä—è–¥—á–∏–∫–∞","indirect",0.0,None),
        ("Site","site_power_costs","Electricity costs","–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ","indirect",0.0,None),
        ("Site","site_water_conn","Process water connection points (per master plan)","–¢–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Ö. –≤–æ–¥—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≥–µ–Ω–ø–ª–∞–Ω—É","indirect",0.0,None),
        ("Site","site_water_distribution","Distribution of process water to Contractor's site","–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–¥—ã –¥–æ –∑–æ–Ω –ü–æ–¥—Ä—è–¥—á–∏–∫–∞","indirect",0.0,None),
        ("Site","site_water_costs","Process water costs","–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –≤–æ–¥—É","indirect",0.0,None),
        ("Site","site_generator","Generator if needed","–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏","indirect",0.0,None),
        ("Site","site_main_lighting","Main lighting of areas/buildings (entire period)","–û—Å–Ω–æ–≤–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–æ–∫ –∏ –∑–¥–∞–Ω–∏–π","indirect",0.0,None),
        ("Site","site_add_lighting","Additional lighting (Contractor territories)","–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –ø–æ–¥—Ä—è–¥—á–∏–∫–∞","indirect",0.0,None),
        ("Site","site_covered_storage","Covered storage for materials delivered for mounting","–ö—Ä—ã—Ç—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ —Å–∫–ª–∞–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–Ω—Ç–∞–∂)","indirect",0.0,None),
        ("Site","site_closed_storage","Closed storage/warehouses for mounting materials","–ó–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ / —Å–∫–ª–∞–¥—ã (–≤—ã–¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–Ω—Ç–∞–∂)","indirect",0.0,None),
        ("Site","site_temp_roads","Temporary roads only for contractor use","–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞","indirect",0.0,None),
        ("Site","site_add_fencing","Additional fencing of contractor territory (if needed)","–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞","indirect",0.0,None),
        ("Site","site_scrap_place","Scrap metal storage place on site","–ü–ª–æ—â–∞–¥–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–ª–ª–æ–ª–æ–º–∞","indirect",0.0,None),
        ("Site","site_lockers","Locker","–†–∞–∑–¥–µ–≤–∞–ª–∫–∏","indirect",0.0,None),
        ("Site","site_office","Office premises","–û—Ñ–∏—Å–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è","indirect",0.0,None),
        ("Site","site_toilets","Toilets for contractor","–¢—É–∞–ª–µ—Ç—ã —Å—É–±–ø–æ–¥—Ä—è–¥—á–∏–∫–∞","indirect",0.0,None),
        ("Site","site_fire_access","Fire-fighting access, permanent access to site","–ü–æ–∂–∞—Ä–Ω—ã–µ –ø–æ–¥—ä–µ–∑–¥—ã –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø","indirect",0.0,None),
        ("Site","site_gate_guard","Safeguarding at the front gate","–û—Ö—Ä–∞–Ω–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–π","indirect",0.0,None),
        ("Site","site_add_guard","Additional safeguarding (if needed)","–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ö—Ä–∞–Ω–∞ (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)","indirect",0.0,None),
        ("Site","site_full_fencing","Fencing of the whole construction site","–û–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤—Å–µ–π —Å—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–∏","indirect",0.0,None),

        # ---------- 4) Works implementation ----------
        ("Works","w_proj_docs","Project documentation in digital form","–ü—Ä–æ–µ–∫—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ","overhead",0.0,None),
        ("Works","w_mos","Preparing method of statement","–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ü–ü–†","overhead",0.0,None),
        ("Works","w_handover_docs","Preparing handover documents (as-built/protocols)","–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–∫—Ç—ã –∏ –ò–î","overhead",0.0,None),
        ("Works","w_docs_archive","Documents from archive or electronic system","–î–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞ –∏–ª–∏ –∏–∑ –≠–î–û","overhead",0.0,None),
        ("Works","w_handover_site_coord","Handover site & coordinate network","–ü–µ—Ä–µ–¥–∞—á–∞ —Å–µ—Ç–µ–π —Å—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–∏ –∏ —Ä–µ–ø–µ—Ä–Ω—ã—Ö —Ç–æ—á–µ–∫","overhead",0.0,None),
        ("Works","w_rep_present","Responsible contractor representative always on site","–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ","overhead",0.0,None),
        ("Works","w_rep_coord_meet","Contractor representative in coordination meetings","–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–≤–µ—â–∞–Ω–∏—è—Ö","overhead",0.0,None),
        ("Works","w_detailed_schedule","Detailed schedule of Contractor's work","–î–µ—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞","overhead",0.0,None),
        ("Works","w_weekly_reports","Weekly reports on work completion (incl. resources)","–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç‚Ä¶","overhead",0.0,None),
        ("Works","w_weekly_safety","Weekly safety reports","–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –û–¢ –∏ –¢–ë","overhead",0.0,None),

        ("Works","w_concrete_proc","Concrete procurement","–ó–∞–∫—É–ø–∫–∞ –±–µ—Ç–æ–Ω–∞","overlap_only",0.0,"materials"),
        ("Works","w_rebar_proc","Reinforcement bars procurement","–ó–∞–∫—É–ø–∫–∞ –∞—Ä–º–∞—Ç—É—Ä—ã","overlap_only",0.0,"materials"),
        ("Works","w_scaff_form","Scaffolding and formwork (all systems)","–õ–µ—Å–∞ –∏ –æ–ø–∞–ª—É–±–∫–∏ (–≤—Å–µ —Å–∏—Å—Ç–µ–º—ã)","indirect",0.0,None),
        ("Works","w_tower_cranes","Tower cranes with operators","–ë–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–∞–Ω—ã —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏","indirect",0.0,None),
        ("Works","w_temp_lifts","Temporary construction lifts with operators","–í—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–µ –ª–∏—Ñ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏","indirect",0.0,None),
        ("Works","w_concrete_pumps","Concrete pumps with all needed pipes","–ë–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å—ã —Å–æ –≤—Å–µ–º–∏ —Ç—Ä—É–±–∞–º–∏","indirect",0.0,None),
        ("Works","w_pump_operators","Concrete pump operators, pump line montage & maintenance","–û–ø–µ—Ä–∞—Ç–æ—Ä—ã, –º–æ–Ω—Ç–∞–∂ –∏ –¢–û –Ω–∞—Å–æ—Å–Ω—ã—Ö –ª–∏–Ω–∏–π","indirect",0.0,None),
        ("Works","w_hyd_dist","Hydraulic concrete distributors","–ì–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏–µ –±–µ—Ç–æ–Ω–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–∏","indirect",0.0,None),
        ("Works","w_hyd_dist_ops","Hydraulic concrete distributor operators","–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≥–∏–¥—Ä. –±–µ—Ç–æ–Ω–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–µ–π","indirect",0.0,None),
        ("Works","w_aux_lifting","Movable & auxiliary lifting devices (trucks, cranes, manlifts)","–ü–µ—Ä–µ–¥–≤–∏–∂–Ω—ã–µ –∏ –≤—Å–ø–æ–º. –≥—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã","indirect",0.0,None),
        ("Works","w_wheel_wash","Wheel wash with operators","–ú–æ–π–∫–∞ –∫–æ–ª–µ—Å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏","indirect",0.0,None),
        ("Works","w_all_equipment","All kind of equipment for works implementation","–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç","indirect",0.0,None),

        ("Works","w_aux_heat_insul","All auxiliary hard heat-insulation materials in concrete","–í—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–≤–µ—Ä–¥—ã–µ —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã‚Ä¶","overlap_only",0.0,"materials"),
        ("Works","w_consumables","Consumables for works (gas, discs, tie wires etc.)","–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç","consumables",0.0,None),
        ("Works","w_measurements","Measurements including documentation","–ò–∑–º–µ—Ä–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é","indirect",0.0,None),
        ("Works","w_radios","Suitable portable radios (walkie-talkie)","–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ (—Ä–∞—Ü–∏–∏)","indirect",0.0,None),
        ("Works","w_concrete_care","Concrete care incl. heating in winter","–£—Ö–æ–¥ –∑–∞ –±–µ—Ç–æ–Ω–æ–º, –≤–∫–ª—é—á–∞—è –ø–æ–¥–æ–≥—Ä–µ–≤ –∑–∏–º–æ–π","indirect",0.0,None),
        ("Works","w_lab_tests","All necessary laboratory tests","–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è","indirect",0.0,None),
        ("Works","w_cleaning","Cleaning contractor's territory incl. waste removal","–£–±–æ—Ä–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –ø–æ–¥—Ä—è–¥—á–∏–∫–∞, –≤—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞","indirect",0.0,None),
        ("Works","w_snow_fire_access","Snow/ice removal from main tracks & fire access roads","–£–±–æ—Ä–∫–∞ —Å–Ω–µ–≥–∞ –∏ –ª—å–¥–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—É—Ç–µ–π –∏ –ø–æ–∂–∞—Ä–Ω—ã—Ö –ø–æ–¥—ä–µ–∑–¥–æ–≤","indirect",0.0,None),
        ("Works","w_snow_local","Snow/ice removal from Contractor areas/storage/temp roads","–£–±–æ—Ä–∫–∞ —Å–Ω–µ–≥–∞ –∏ –ª—å–¥–∞ —Å –∑–æ–Ω –ø–æ–¥—Ä—è–¥—á–∏–∫–∞/—Å–∫–ª–∞–¥–æ–≤/–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π","indirect",0.0,None),
        ("Works","w_stormwater_site","Discharge storm/rainwater from construction site","–°–ª–∏–≤ –ª–∏–≤–Ω–µ–≤–æ–π –≤–æ–¥—ã —Å –ø–ª–æ—â–∞–¥–æ–∫","indirect",0.0,None),
        ("Works","w_stormwater_contractor","Discharge storm/rainwater from Contractor areas","–°–ª–∏–≤ –ª–∏–≤–Ω–µ–≤–æ–π –≤–æ–¥—ã —Å –∑–æ–Ω –ø–æ–¥—Ä—è–¥—á–∏–∫–∞","indirect",0.0,None),
        ("Works","w_load_unload","Loading/unloading materials on site (vertical/horizontal)","–ü–æ–≥—Ä—É–∑–∫–∞-—Ä–∞–∑–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ","indirect",0.0,None),
        ("Works","w_transport_inside","Transportation of materials within construction site","–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–µ","indirect",0.0,None),

        ("Works","w_rebar_couplings","Threaded/crimp couplings + tools for rebar preparation","–†–µ–∑—å–±–æ–≤—ã–µ/–æ–±–∂–∏–º–Ω—ã–µ –º—É—Ñ—Ç—ã + –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—Ä–º–∞—Ç—É—Ä—ã","overlap_only",0.0,"materials"),
        ("Works","w_rebar_coupling_works","Preparation/connection works with couplings (rebar)","–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∞—Ä–º–∞—Ç—É—Ä—ã —Å –º—É—Ñ—Ç–∞–º–∏","overlap_only",0.0,"core_labor"),
        ("Works","w_material_overspend","Financial responsibility of material overspending","–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞","overlap_only",0.0,"materials"),
        ("Works","w_repair_for_handover","Repair works necessary to handover the work","–†–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Å–¥–∞—á–∏","indirect",0.0,None),
    ]

    if "resp_matrix_state" not in st.session_state:
        st.session_state["resp_matrix_state"] = {k: {"on": False, "pct": dflt} for _,k,_,_,_,dflt,_ in resp_catalog}

    current = st.session_state["resp_matrix_state"]

    # State integrity check - ensure all required keys exist
    for k in current:
        if "cat" not in current[k]:
            current[k]["cat"] = "consumables"
        elif current[k]["cat"] == "overlap_only":
            current[k]["cat"] = "indirect"  # Map overlap_only to indirect
        if "overlap" not in current[k]:
            current[k]["overlap"] = None

    # √áakƒ±≈üma kontrol√º ve uyarƒ± sistemi
    def check_conflicts():
        conflicts = {
            "global_extras": [],
            "core_labor": [],
            "materials": []
        }
        
        for _,k,tr,_,_,_,overlap in resp_catalog:
            if current[k]["on"] and overlap in conflicts:
                conflicts[overlap].append(tr)
        
        return conflicts

    conflicts = check_conflicts()
    
    # √áakƒ±≈üma uyarƒ±larƒ±
    if conflicts["global_extras"]:
        st.warning(f"‚ö†Ô∏è **√áakƒ±≈üma Uyarƒ±sƒ±:** A≈üaƒüƒ±daki kalemler ki≈üi-ba≈üƒ± global giderlerde mevcut ‚Üí √ßakƒ±≈üma olmamasƒ± i√ßin hesapta eklenmez:\n" + 
                  "\n".join([f"‚Ä¢ {item}" for item in conflicts["global_extras"]]))
    
    if conflicts["core_labor"]:
        st.info(f"‚ÑπÔ∏è **Bilgi:** A≈üaƒüƒ±daki kalemler √ßekirdek i≈ü√ßilik maliyetinde dahil ‚Üí ayrƒ±ca eklenmez:\n" + 
                "\n".join([f"‚Ä¢ {item}" for item in conflicts["core_labor"]]))
    
    if conflicts["materials"]:
        st.info(f"‚ÑπÔ∏è **Bilgi:** A≈üaƒüƒ±daki kalemler malzeme maliyetinde dahil ‚Üí ayrƒ±ca eklenmez:\n" + 
                "\n".join([f"‚Ä¢ {item}" for item in conflicts["materials"]]))

    last_group = None
    mat_cols = st.columns([0.40, 0.40, 0.20])
    with mat_cols[0]: st.markdown("**A√ßƒ±klama (TR)**")
    with mat_cols[1]: st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ (RU)**")
    with mat_cols[2]: st.markdown("**Bizde? ¬∑ %**")

    for group,k, tr, ru, cat, dflt, overlap in resp_catalog:
        tr = _tr_resp_label(k, tr)
        if group != last_group:
            last_group = group
            st.markdown(f"### üìã {group}")
            st.markdown("---")
        
        # √áakƒ±≈üma kontrol√º
        is_conflict = overlap in ["global_extras", "core_labor", "materials"]
        
        # Modern satƒ±r g√∂r√ºn√ºm√º - sadece Streamlit kontrolleri
        with st.container():
            # Ana satƒ±r container
            st.markdown(f"""
            <div style="background: white; border: 1px solid #e9ecef; border-radius: 12px; padding: 1rem; margin: 0.5rem 0; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
                <div style="display: flex; align-items: center; gap: 1rem;">
                    <div style="flex: 3;">
                        <strong style="font-size: 1.1rem; color: #333;">{tr}</strong><br>
                        <small style="color: #666; font-style: italic; font-size: 0.9rem;">{ru}</small>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Kontroller - 3 s√ºtun halinde
            col1, col2, col3 = st.columns([1, 1, 1])
            
            with col1:
                st.markdown("**Aktif**")
                on = st.checkbox("", value=current[k]["on"], key=f"mx_on_{k}", disabled=is_conflict, label_visibility="collapsed")
            
            with col2:
                st.markdown("**Y√ºzde (%)**")
                pct = st.number_input("", min_value=0.0, max_value=100.0, value=float(current[k]["pct"]), step=0.1, key=f"mx_pct_{k}", disabled=is_conflict, label_visibility="collapsed")
            
            with col3:
                st.markdown("**Kategori**")
                current_cat = current[k].get("cat", "consumables")
                # Handle overlap_only category - map it to indirect
                if current_cat == "overlap_only":
                    current_cat = "indirect"
                cat_index = ["consumables", "overhead", "indirect"].index(current_cat)
                cat_sel = st.selectbox("", options=["consumables", "overhead", "indirect"], index=cat_index, key=f"mx_cat_{k}", disabled=is_conflict, label_visibility="collapsed")
                
                # Kategori badge'i
                if not is_conflict:
                    badge_color = "category-" + cat_sel
                else:
                    badge_color = "category-overlap"
                
                st.markdown(f'<span class="category-badge {badge_color}">{cat_sel}</span>', unsafe_allow_html=True)
            
            # √áakƒ±≈üma uyarƒ±sƒ±
            if is_conflict:
                if overlap == "global_extras":
                    st.warning("‚ö†Ô∏è **√áakƒ±≈üma:** Ki≈üi-ba≈üƒ± global giderlerde mevcut ‚Üí hesapta eklenmez")
                elif overlap == "core_labor":
                    st.info("‚ÑπÔ∏è **Bilgi:** √áekirdek i≈ü√ßilik maliyetinde dahil")
                elif overlap == "materials":
                    st.info("‚ÑπÔ∏è **Bilgi:** Malzeme maliyetinde dahil")
            
            # State g√ºncelleme
            current[k] = {"on": bool(on), "pct": float(pct), "cat": cat_sel, "overlap": overlap}

    mx_sums = {"consumables":0.0, "overhead":0.0, "indirect":0.0}
    for k, v in current.items():
        if v.get("on") and v.get("overlap")!="global_extras":
            cat = v["cat"]
            if cat == "overlap_only":
                cat = "indirect"  # Map overlap_only to indirect for calculations
            mx_sums[cat] += float(v["pct"])

    # Modern toplam kartlarƒ±
    st.markdown("---")
    bih("üìä Matris Toplamlarƒ±","üìä –ò—Ç–æ–≥–æ –ø–æ –º–∞—Ç—Ä–∏—Ü–µ", level=3)
    
    col_sum1, col_sum2, col_sum3 = st.columns(3)
    
    with col_sum1:
        st.markdown(f"""
        <div class="metric-card">
            <h3>üß¥ Sarf</h3>
            <div class="val">{mx_sums['consumables']:.2f}%</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col_sum2:
        st.markdown(f"""
        <div class="metric-card">
            <h3>üßÆ Overhead</h3>
            <div class="val">{mx_sums['overhead']:.2f}%</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col_sum3:
        st.markdown(f"""
        <div class="metric-card">
            <h3>üßæ Indirect</h3>
            <div class="val">{mx_sums['indirect']:.2f}%</div>
        </div>
        """, unsafe_allow_html=True)

    # Override kontrol√º
    st.markdown("---")
    bih("‚öôÔ∏è Matris Override Kontrol√º","‚öôÔ∏è –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–∞—Ç—Ä–∏—Ü–µ–π", level=3)
    
    if use_matrix_override:
        st.session_state["consumables_rate_eff"]   = mx_sums["consumables"]/100.0
        st.session_state["overhead_rate_eff"]      = mx_sums["overhead"]/100.0
        st.session_state["indirect_rate_total_eff"]= mx_sums["indirect"]/100.0
        st.success(bi("‚úÖ Override aktif: manuel Sarf/Overhead/Indirect oranlarƒ± yok sayƒ±lƒ±r; hesapta matris toplamlarƒ± kullanƒ±lacak.",
                      "‚úÖ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: —Ä—É—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è; –≤ —Ä–∞—Å—á—ë—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—É–º–º—ã –º–∞—Ç—Ä–∏—Ü—ã."))
    else:
        st.session_state.pop("consumables_rate_eff", None)
        st.session_state.pop("overhead_rate_eff", None)
        st.session_state.pop("indirect_rate_total_eff", None)
        st.info(bi("‚ÑπÔ∏è Override kapalƒ±: Manuel Sarf/Overhead/Indirect oranlarƒ± kullanƒ±lacak; –º–∞—Ç—Ä–∏—Ü–∞ sadece –≥√∂sterim ama√ßlƒ±.",
                   "‚ÑπÔ∏è –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä—É—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã; —Å—É–º–º—ã –º–∞—Ç—Ä–∏—Ü—ã ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."))
# ==================== 6) SONU√áLAR: T√ºm Hesaplama Sonu√ßlarƒ± ====================
with tab_sonuclar:
    left, right = st.columns([0.8,0.2])
    with left:
        bih("üìä Hesap Sonu√ßlarƒ± √ñzeti","üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á—ë—Ç–∞", level=2)
    with right:
        if st.button(bi("üßπ Sonu√ßlarƒ± Temizle","üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"), type="secondary"):
            # Varsayƒ±lan/bo≈ü hal
            st.session_state["calculation_results"] = None
            # Bazƒ± t√ºretilmi≈ü cache/state alanlarƒ±nƒ± sƒ±fƒ±rla
            st.session_state.pop("roles_calc", None)
            st.session_state.pop("elements_df", None)
            st.session_state.pop("metraj_df", None)
            st.session_state.pop("_met_for_keys", None)
            try:
                st.rerun()
            except Exception:
                st.toast(bi("Sayfa yenilendi.","–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
    
    # --- Hesaplama butonu ---
    if "calculation_results" not in st.session_state:
        st.session_state["calculation_results"] = None

    # Hesaplama butonu
    if st.button(bi("üßÆ HESAPLA","üßÆ –†–ê–°–°–ß–ò–¢–ê–¢–¨"), type="primary", use_container_width=True, key="hesapla_sonuclar", help="Hesaplamayƒ± ba≈ülat"):
        # Modern loading animasyonu
        ph = get_loading_placeholder()
        with ph.container():
            st.markdown("""
            <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 20px; margin: 1rem 0;">
                <h3 style="margin: 0; color: white;">‚ö° Hesaplama ƒ∞≈ülemi / ‚ö° –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á—ë—Ç–∞</h3>
                <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">L√ºtfen bekleyin, sonu√ßlar hazƒ±rlanƒ±yor... / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚Ä¶</p>
            </div>
            """, unsafe_allow_html=True)
        with st.spinner("üöÄ Hesaplamalar yapƒ±lƒ±yor... / üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç—ã‚Ä¶"):
            try:
                # G√ºvenli deƒüi≈üken eri≈üimi
                roles_df = st.session_state.get("roles_df", pd.DataFrame())
                
                # selected_elements'i doƒüru ≈üekilde al - CANONICAL KEYS kullanarak
                selected_elements = []
                for k in CANON_KEYS:
                    if st.session_state.get(f"sel_{k}", True):  # Default to True if not set
                        selected_elements.append(k)
                
                if not selected_elements:
                    st.warning(bi("En az bir betonarme eleman se√ßin.","–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç."))
                    st.stop()
                
                if len(selected_elements) > 0 and len(roles_df) > 0:
                    # Temel parametreleri al
                    start_date = st.session_state.get("start_date", date.today().replace(day=1))
                    end_date = st.session_state.get("end_date", date.today().replace(day=30))
                    holiday_mode = st.session_state.get("holiday_mode", "her_pazar")
                    hours_per_day = st.session_state.get("hours_per_day", 10.0)
                    scenario = st.session_state.get("scenario", "Ger√ßek√ßi")
                    
                    # SENARYO NORMALARI VE ZORLUK - TAM ALGORƒ∞TMA
                    # Senaryoya g√∂re temel norm (Temel i√ßin)
                    # Senaryo bazƒ± ‚Äî override destekli
                    _norms_map = get_effective_scenario_norms()
                    scenario_base = float((_norms_map.get(scenario) or SCENARIO_NORMS["Ger√ßek√ßi"]) ["Temel"])
                    
                    # Zorluk √ßarpanƒ± tek merkezden hesaplanƒ±r ve cache'e yazƒ±lƒ±r
                    z_mult = get_difficulty_multiplier_cached()
                    difficulty_multiplier = z_mult  # norm hesaplarƒ± bunu kullanƒ±yor
                    
                    # Eleman normlarƒ± - g√∂reli katsayƒ±lar (Temel'e oranlanƒ±r) - CANONICAL KEYS kullanarak
                    element_relative_factors = {
                        "grobeton": 0.8,   # Grobeton
                        "rostverk": 0.9,   # Rostverk
                        "temel": 1.0,      # Temel (baz)
                        "doseme": 1.1,     # D√∂≈üeme
                        "perde": 1.2,      # Perde
                        "merdiven": 1.3    # Merdiven
                    }
                    
                    # Se√ßili elemanlar arasƒ±nda normalize et (ortalama 1 olacak ≈üekilde)
                    selected_factors = {k: element_relative_factors.get(k, 1.0) for k in selected_elements if k in element_relative_factors}
                    if selected_factors:
                        avg_factor = sum(selected_factors.values()) / len(selected_factors)
                        norm_mult = {k: v / avg_factor for k, v in selected_factors.items()}
                    else:
                        norm_mult = {"temel": 1.0}  # varsayƒ±lan
                    
                    # Metraj kontrol√º
                    use_metraj = st.session_state.get("use_metraj", False)
                    metraj_df = st.session_state.get("metraj_df", pd.DataFrame())
                    
                    if use_metraj and not metraj_df.empty:
                        iterable = metraj_df.to_dict(orient="records")
                        col_ele = "Eleman (–≠–ª–µ–º–µ–Ω—Ç)"
                        col_met = "Metraj (m¬≥) (–û–±—ä—ë–º, –º¬≥)"
                        st.success("‚úÖ Metraj verileri kullanƒ±lƒ±yor!")
                    else:
                        # Use canonical keys and safe label helpers
                        iterable = []
                        for k in selected_elements:
                            if k in LABELS:
                                iterable.append({"Eleman (–≠–ª–µ–º–µ–Ω—Ç)": LABELS[k], "Metraj (m¬≥) (–û–±—ä—ë–º, –º¬≥)": 1.0})
                            else:
                                st.warning(f"Tanƒ±msƒ±z eleman anahtarƒ± atlandƒ±: {k}")
                        if not iterable:
                            st.error("Hi√ß ge√ßerli eleman kalmadƒ±!")
                            st.stop()
                        col_ele = "Eleman (–≠–ª–µ–º–µ–Ω—Ç)"
                        col_met = "Metraj (m¬≥) (–û–±—ä—ë–º, –º¬≥)"
                        st.warning("‚ö†Ô∏è Metraj verileri kullanƒ±lmƒ±yor - varsayƒ±lan 1.0 m¬≥ deƒüerleri kullanƒ±lƒ±yor")
                    
                    # Norm √ó Metraj hesaplamasƒ± - D√úZELTƒ∞LDƒ∞
                    norms_used = {}
                    total_metraj = 0.0
                    total_adamsaat = 0.0
                    
                    # Rus√ßa etiketleri T√ºrk√ße anahtarlara e≈üle≈ütir - CANONICAL KEYS kullanarak
                    russian_to_turkish = {
                        "–ü–æ–¥–±–µ—Ç–æ–Ω–∫–∞": "grobeton",
                        "–†–æ—Å—Ç–≤–µ—Ä–∫": "rostverk", 
                        "–§—É–Ω–¥–∞–º–µ–Ω—Ç": "temel",
                        "–ü–ª–∏—Ç–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è": "doseme",
                        "–°—Ç–µ–Ω–∞/–¥–∏–∞—Ñ—Ä–∞–≥–º–∞": "perde",
                        "–õ–µ—Å—Ç–Ω–∏—Ü–∞": "merdiven",
                        # Tam etiket e≈üle≈ütirmesi - metraj_df'den gelen tam etiketler i√ßin
                        "Grobeton (–ü–æ–¥–±–µ—Ç–æ–Ω–∫–∞)": "grobeton",
                        "Rostverk (–†–æ—Å—Ç–≤–µ—Ä–∫)": "rostverk",
                        "Temel (–§—É–Ω–¥–∞–º–µ–Ω—Ç)": "temel",
                        "D√∂≈üeme (–ü–ª–∏—Ç–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è)": "doseme",
                        "Perde (–°—Ç–µ–Ω–∞/–¥–∏–∞—Ñ—Ä–∞–≥–º–∞)": "perde",
                        "Merdiven (–õ–µ—Å—Ç–Ω–∏—Ü–∞)": "merdiven"
                    }
                    
                    # NORM HESAPLAMASI - TAM ALGORƒ∞TMA
                    
                    for r in iterable:
                        lbl = str(r[col_ele])
                        met = float(r.get(col_met, 0.0) or 0.0)
                        
                        # Rus√ßa etiketi T√ºrk√ße anahtara √ßevir
                        turkish_key = russian_to_turkish.get(lbl, lbl)
                        norm_multiplier = norm_mult.get(turkish_key, 1.0)
                        
                        # Eleman normu: n_e = senaryo_temel * g√∂reli_katsayƒ± * difficulty_multiplier
                        n_e = scenario_base * norm_multiplier * difficulty_multiplier
                        norms_used[lbl] = n_e
                        total_metraj += met
                        total_adamsaat += met * n_e
                        

                    

                    # TAKVƒ∞M HESAPLAMASI - TAM ALGORƒ∞TMA
                    
                    workdays = workdays_between(start_date, end_date, holiday_mode)
                    project_days = max((end_date - start_date).days + 1, 1)
                    
                    avg_workdays_per_month = workdays * 30.0 / project_days
                    hours_per_person_month = max(avg_workdays_per_month * hours_per_day, 1e-9)
                    
                    # Rol maliyeti hesaplamasƒ± - YENƒ∞ ALGORƒ∞TMA
                    sum_w = float(roles_df["Aƒüƒ±rlƒ±k (–í–µ—Å)"].clip(lower=0.0).sum()) if not roles_df.empty else 0.0
                    month_wd_df = workdays_in_month_range(start_date, end_date, holiday_mode)
                    n_months = len(month_wd_df) if not month_wd_df.empty else 1
                    person_months_total = total_adamsaat / hours_per_person_month
                    
                    # PRIM ve gider parametreleri
                    PRIM_SNG = st.session_state.get("prim_sng", True)
                    PRIM_TUR = st.session_state.get("prim_tur", True)
                    
                    # Global ki≈üi-ba≈üƒ± giderler (giderler sekmesinden hesapla)
                    food = float(st.session_state.get("food", 10000.0))
                    lodging = float(st.session_state.get("lodging", 12000.0))
                    transport = float(st.session_state.get("transport", 3000.0))
                    ppe = float(st.session_state.get("ppe", 1500.0))
                    training = float(st.session_state.get("training", 500.0))
                    
                    # KDV i≈üaretleri (giderler sekmesinden al)
                    food_vat = bool(st.session_state.get("food_vat", True))
                    lodging_vat = bool(st.session_state.get("lodging_vat", True))
                    transport_vat = bool(st.session_state.get("transport_vat", False))
                    ppe_vat = bool(st.session_state.get("ppe_vat", True))
                    training_vat = bool(st.session_state.get("training_vat", True))
                    
                    # Toplam KDV'li giderler
                    extras_base = food + lodging + transport + ppe + training
                    
                    # KDV ayrƒ±≈ütƒ±rma (i≈üaretli ise)
                    def net_of_vat(x, tick):
                        vat_rate = float(st.session_state.get("vat_rate", 0.20))
                        return x / (1 + vat_rate) if tick else x
                    
                    # Toplam KDV'siz ek giderler (ger√ßek deƒüerlerden hesapla)
                    extras_per_person = sum([
                        net_of_vat(food, food_vat),           # Yemek
                        net_of_vat(lodging, lodging_vat),     # Barƒ±nma
                        net_of_vat(transport, transport_vat), # Ula≈üƒ±m
                        net_of_vat(ppe, ppe_vat),            # PPE
                        net_of_vat(training, training_vat)    # Eƒüitim
                    ])
                    
                    # YENƒ∞ ADAM-SAAT ALGORƒ∞TMASI - KUR≈ûUN GE√áƒ∞RMEZ
                    # 1. √úlke y√ºzdelerini normalize et (0-0-0 ise e≈üit b√∂l)
                    def _normalize_country(p_rus, p_sng, p_tur):
                        vals = [max(float(p_rus), 0.0), max(float(p_sng), 0.0), max(float(p_tur), 0.0)]
                        s = sum(vals)
                        if s <= 0:  # hepsi 0 ise e≈üit b√∂l
                            return (1/3.0, 1/3.0, 1/3.0)
                        return (vals[0]/s, vals[1]/s, vals[2]/s)
                    
                    # 2. A¬∑S fiyatƒ±nƒ± doƒürudan hesapla (ara "ki≈üi-ay" daƒüƒ±tƒ±mƒ± olmadan)
                    M_with = 0.0
                    M_bare = 0.0
                    
                    if not roles_df.empty and sum_w > 0:
                        for _, row in roles_df.iterrows():
                            share = float(row["Aƒüƒ±rlƒ±k (–í–µ—Å)"]) / sum_w
                            
                            # √úlke y√ºzdelerini normalize et
                            p_rus, p_sng, p_tur = _normalize_country(row["%RUS"], row["%SNG"], row["%TUR"])
                            
                            # monthly_role_cost_multinational fonksiyonunu kullan
                            with_ex = monthly_role_cost_multinational(row, PRIM_SNG, PRIM_TUR, extras_per_person)["per_person"]["BLENDED"]
                            bare_ex = monthly_role_cost_multinational(row, PRIM_SNG, PRIM_TUR, 0.0)["per_person"]["BLENDED"]
                            
                            M_with += share * with_ex
                            M_bare += share * bare_ex
                    
                    # 3. A¬∑S fiyatlarƒ± - TEK SATIRLIK FORM√úL
                    with_extras_as_price = M_with / hours_per_person_month
                    bare_as_price = M_bare / hours_per_person_month

                    # --- NEW: price follows productivity (scenario + difficulty) ---
                    s_mult  = get_scenario_multiplier_for_price(scenario)   # senaryo etkisi
                    z_mult  = get_difficulty_multiplier_cached()            # √ßevresel zorluk etkisi
                    # Ayarlanabilir katsayƒ±lar (ileride istersen UI ekleyebilirsin)
                    BETA_SCENARIO_TO_PRICE  = 1.0    # 0..1 (1=tam, 0=sƒ±zdƒ±rma)
                    BETA_DIFFICULTY_TO_PRICE= 1.0    # 0..1 (1=tam, 0=sƒ±zdƒ±rma)

                    price_mult = (1 + BETA_SCENARIO_TO_PRICE  * (s_mult - 1)) \
                               * (1 + BETA_DIFFICULTY_TO_PRICE* (z_mult - 1))

                    bare_as_price        *= price_mult
                    with_extras_as_price *= price_mult

                    core_as_price        = with_extras_as_price  # m¬≥ maliyetleri bu fiyattan √ºretilecek
                    
                    # Roller hesaplama tablosu i√ßin
                    roles_calc = []
                    if not roles_df.empty and sum_w > 0:
                        for _, row in roles_df.iterrows():
                            w = max(float(row["Aƒüƒ±rlƒ±k (–í–µ—Å)"]), 0.0)
                            share = (w / sum_w)
                            persons_role = (person_months_total / n_months) * share
                            
                            # √úlke y√ºzdelerini normalize et
                            p_rus, p_sng, p_tur = _normalize_country(row["%RUS"], row["%SNG"], row["%TUR"])
                            
                            # monthly_role_cost_multinational kullan
                            bundle_with = monthly_role_cost_multinational(row, PRIM_SNG, PRIM_TUR, extras_per_person)
                            bundle_bare = monthly_role_cost_multinational(row, PRIM_SNG, PRIM_TUR, 0.0)
                            per_with = bundle_with["per_person"]["BLENDED"]
                            per_bare = bundle_bare["per_person"]["BLENDED"]
                            
                            roles_calc.append({
                                "Rol (–†–æ–ª—å)": row["Rol (–†–æ–ª—å)"],
                                "Aƒüƒ±rlƒ±k (–í–µ—Å)": f"{w:.3f}",
                                "Pay (%) (–î–æ–ª—è, %)": f"{share * 100:.2f}",
                                "Ortalama Ki≈üi (–°—Ä–µ–¥–Ω—è—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å)": f"{persons_role:.3f}",
                                "Maliyet/ay (‚ÇΩ)": f"{per_with:,.2f}",
                                "%RUS": f"{p_rus * 100:.1f}",
                                "%SNG": f"{p_sng * 100:.1f}",
                                "%TUR": f"{p_tur * 100:.1f}",
                                "Net Maa≈ü (‚ÇΩ/ay)": f"{float(row.get('Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)', 0)):,.0f}"
                            })
                    
                    roles_calc_df = pd.DataFrame(roles_calc)
                    
                    # m¬≥ maliyetleri - ELEMAN √ñZG√ú NORM KULLAN
                    # Matrix override kontrol√º ile oranlarƒ± al
                    use_matrix_override = st.session_state.get("use_matrix_override", False)
                    if use_matrix_override:
                        # Matrix override aktif - effective rates kullan
                        overhead_rate_eff = st.session_state.get("overhead_rate_eff", OVERHEAD_RATE_DEFAULT/100.0)
                        consumables_rate_eff = st.session_state.get("consumables_rate_eff", CONSUMABLES_RATE_DEFAULT/100.0)
                        indirect_rate_total = st.session_state.get("indirect_rate_total_eff", 0.12)
                    else:
                        # Matrix override kapalƒ± - grup hesaplanan rates kullan
                        overhead_rate_eff = st.session_state.get("overhead_rate", OVERHEAD_RATE_DEFAULT/100.0)
                        consumables_rate_eff = st.session_state.get("consumables_rate", CONSUMABLES_RATE_DEFAULT/100.0)
                        indirect_rate_total = st.session_state.get("indirect_rate_total", 0.12)
                    
                    sum_core_overhead_total = 0.0
                    tmp_store = []
                    
                    for r in iterable:
                        lbl = str(r[col_ele])
                        met = float(r.get(col_met, 0.0) or 0.0)
                        n = norms_used[lbl]  # Eleman √∂zg√º norm
                        core_m3 = with_extras_as_price * n  # Eleman √∂zg√º norm ile √ßarp
                        genel_m3 = min(max(overhead_rate_eff, 0.0), OVERHEAD_RATE_MAX/100.0) * core_m3
                        total_m3_core_genel = core_m3 + genel_m3
                        sum_core_overhead_total += total_m3_core_genel * met
                        tmp_store.append((lbl, met, total_m3_core_genel, core_m3, genel_m3, n))
                    
                    # Sarf + Indirect - (core_m3 + genel_m3) * metraj tabanƒ± √ºzerinden
                    consumables_total = sum_core_overhead_total * max(consumables_rate_eff, 0.0)
                    indirect_total = (sum_core_overhead_total + consumables_total) * max(indirect_rate_total, 0.0)
                    
                    # Elemanlara daƒüƒ±t - oransal daƒüƒ±tƒ±m
                    elem_rows = []
                    project_total_cost = 0.0
                    
                    for (lbl, met, base_total, core_m3, genel_m3, n) in tmp_store:
                        # Sarf ve indirect daƒüƒ±tƒ±mƒ±: (core_m3 + genel_m3) * metraj oranƒ±
                        weight = (base_total * met) / max(sum_core_overhead_total, 1e-9)
                        sarf_alloc = consumables_total * weight
                        indir_alloc = indirect_total * weight
                        sarf_m3 = sarf_alloc / max(met, 1e-9) if met > 0 else 0.0
                        indir_m3 = indir_alloc / max(met, 1e-9) if met > 0 else 0.0
                        total_m3 = core_m3 + genel_m3 + sarf_m3 + indir_m3
                        project_total_cost += total_m3 * max(met, 0.0)
                        
                        elem_rows.append({
                            "Eleman (–≠–ª–µ–º–µ–Ω—Ç)": lbl,
                            "Norm (a¬∑s/m¬≥) (–ù–æ—Ä–º–∞, —á–µ–ª¬∑—á/–º¬≥)": f"{n:.2f}",
                            "Metraj (m¬≥) (–û–±—ä—ë–º, –º¬≥)": f"{met:,.3f}",
                            "√áekirdek (‚ÇΩ/m¬≥) (–Ø–¥—Ä–æ, ‚ÇΩ/–º¬≥)": f"{core_m3:,.2f}",
                            "Genel (‚ÇΩ/–º¬≥) (–ù–∞–∫–ª–∞–¥–Ω—ã–µ, ‚ÇΩ/–º¬≥)": f"{genel_m3:,.2f}",
                            "Sarf (‚ÇΩ/–º¬≥) (–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏, ‚ÇΩ/–º¬≥)": f"{sarf_m3:,.2f}",
                            "Indirect (‚ÇΩ/–º¬≥) (–ö–æ—Å–≤–µ–Ω–Ω—ã–µ, ‚ÇΩ/–º¬≥)": f"{indir_m3:,.2f}",
                            "Toplam (‚ÇΩ/–º¬≥) (–ò—Ç–æ–≥–æ, ‚ÇΩ/–º¬≥)": f"{total_m3:,.2f}"
                        })
                    
                    elements_df = pd.DataFrame(elem_rows)
                    
                    # √ñzet metrikler
                    general_avg_m3 = project_total_cost / max(total_metraj, 1e-9) if total_metraj > 0 else 0.0
                    fully_loaded_as_price = project_total_cost / max(total_adamsaat, 1e-9) if total_adamsaat > 0 else 0.0
                    avg_norm_per_m3 = total_adamsaat / max(total_metraj, 1e-9) if total_metraj > 0 else 0.0
                    indirect_share = indirect_total / max(project_total_cost, 1e-9) if project_total_cost > 0 else 0.0
                    
                    # Sonu√ßlarƒ± session state'e kaydet
                    st.session_state["calculation_results"] = {
                        "success": True,
                        "data": {
                            "bare_as_price": bare_as_price,
                            "with_extras_as_price": with_extras_as_price,
                            "fully_loaded_as_price": fully_loaded_as_price,
                            "total_adamsaat": total_adamsaat,
                            "avg_norm_per_m3": avg_norm_per_m3,
                            "general_avg_m3": general_avg_m3,
                            "total_metraj": total_metraj,
                            "project_total_cost": project_total_cost,
                            "consumables_rate_eff": consumables_rate_eff,
                            "overhead_rate_eff": overhead_rate_eff,
                            "indirect_rate_total": indirect_rate_total,
                            "indirect_total": indirect_total,
                            "indirect_share": indirect_share,
                            "elements_df": elements_df,
                            "roles_calc_df": roles_calc_df,
                            "month_wd_df": month_wd_df,
                            "person_months_total": person_months_total,
                            "hours_per_person_month": hours_per_person_month,
                            "norms_used": norms_used,
                            "difficulty_multiplier": difficulty_multiplier
                        }
                    }
                    
                    st.success("‚úÖ Hesaplamalar tamamlandƒ±!")
                    st.balloons()
                    
                    # √ñzet bilgiler
                    st.info(f"üìä **Proje √ñzeti:** {len(selected_elements)} eleman, {len(roles_df)} rol, {total_metraj:.1f} m¬≥, {total_adamsaat:.0f} a¬∑s")
                    
                    # Detaylara Bak expander'ƒ± - Debug bilgileri burada
                    with st.expander("üîç Detaylara Bak - Hesaplama Parametreleri", expanded=False):
                        st.markdown("### üìä Hesaplama Parametreleri")
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("**üéØ Temel Parametreler**")
                            st.write(f"‚Ä¢ Senaryo: {scenario}")
                            st.write(f"‚Ä¢ Temel norm: {scenario_base} a¬∑s/m¬≥")
                            st.write(f"‚Ä¢ Zorluk √ßarpanƒ±: {difficulty_multiplier:.3f}")
                            st.write(f"‚Ä¢ G√ºnl√ºk √ßalƒ±≈üma: {hours_per_day} saat")
                            st.write(f"‚Ä¢ Tatil modu: {holiday_mode}")
                            st.write(f"‚Ä¢ ƒ∞≈ü g√ºn√º: {workdays} g√ºn")
                            st.write(f"‚Ä¢ Proje s√ºresi: {project_days} g√ºn")
                        
                        with col2:
                            st.markdown("**üí∞ Gider Parametreleri**")
                            st.write(f"‚Ä¢ Yemek: {food:.0f} ‚ÇΩ/ay (KDV: {'Dahil' if food_vat else 'Hari√ß'})")
                            st.write(f"‚Ä¢ Barƒ±nma: {lodging:.0f} ‚ÇΩ/ay (KDV: {'Dahil' if lodging_vat else 'Hari√ß'})")
                            st.write(f"‚Ä¢ Ula≈üƒ±m: {transport:.0f} ‚ÇΩ/ay (KDV: {'Dahil' if transport_vat else 'Hari√ß'})")
                            st.write(f"‚Ä¢ PPE: {ppe:.0f} ‚ÇΩ/ay (KDV: {'Dahil' if ppe_vat else 'Hari√ß'})")
                            st.write(f"‚Ä¢ Eƒüitim: {training:.0f} ‚ÇΩ/ay (KDV: {'Dahil' if training_vat else 'Hari√ß'})")
                            st.write(f"‚Ä¢ **Toplam KDV'li: {extras_base:.0f} ‚ÇΩ/ay**")
                            st.write(f"‚Ä¢ **Toplam KDV'siz: {extras_per_person:.2f} ‚ÇΩ/ay**")
                        
                        st.markdown("### üßÆ Adam-Saat Hesaplama Detaylarƒ±")
                        
                        col3, col4 = st.columns(2)
                        with col3:
                            st.markdown("**‚è∞ Takvim Hesaplamasƒ±**")
                            st.write(f"‚Ä¢ Ortalama i≈ü g√ºn√º/ay: {avg_workdays_per_month:.2f} g√ºn")
                            st.write(f"‚Ä¢ Saat/ki≈üi-ay: {hours_per_person_month:.2f} saat")
                            st.write(f"‚Ä¢ Toplam ki≈üi-ay: {person_months_total:.2f}")
                            st.write(f"‚Ä¢ Ay sayƒ±sƒ±: {n_months}")
                        
                        with col4:
                            st.markdown("**üíµ Maliyet Hesaplamasƒ±**")
                            st.write(f"‚Ä¢ M_with (extras dahil): {M_with:.2f} ‚ÇΩ")
                            st.write(f"‚Ä¢ M_bare (extras hari√ß): {M_bare:.2f} ‚ÇΩ")
                            st.write(f"‚Ä¢ **A¬∑S fiyatƒ± (with): {with_extras_as_price:.2f} ‚ÇΩ/a¬∑s**")
                            st.write(f"‚Ä¢ **A¬∑S fiyatƒ± (bare): {bare_as_price:.2f} ‚ÇΩ/a¬∑s**")
                        
                        # Norm hesaplama detaylarƒ±
                        st.markdown("### üìè Norm Hesaplama Detaylarƒ±")
                        st.write("**Eleman √∂zg√º normlar:**")
                        for lbl, norm in norms_used.items():
                            st.write(f"‚Ä¢ {lbl}: {norm:.2f} a¬∑s/m¬≥")
                        
                        st.write("**Norm √ßarpanlarƒ±:**")
                        for key, mult in norm_mult.items():
                            st.write(f"‚Ä¢ {key}: {mult:.3f}")
                        
                        # Roller detaylarƒ±
                        if not roles_df.empty:
                            st.markdown("### üë• Rol Bazƒ±nda Detaylar")
                            for _, row in roles_df.iterrows():
                                p_rus, p_sng, p_tur = _normalize_country(row["%RUS"], row["%SNG"], row["%TUR"])
                                bundle_with = monthly_role_cost_multinational(row, PRIM_SNG, PRIM_TUR, extras_per_person)
                                bundle_bare = monthly_role_cost_multinational(row, PRIM_SNG, PRIM_TUR, 0.0)
                                
                                st.markdown(f"**{row['Rol (–†–æ–ª—å)']}** (Aƒüƒ±rlƒ±k: {row['Aƒüƒ±rlƒ±k (–í–µ—Å)']})")
                                st.write(f"  ‚Ä¢ %RUS: {p_rus:.1%}, %SNG: {p_sng:.1%}, %TUR: {p_tur:.1%}")
                                st.write(f"  ‚Ä¢ Net maa≈ü: {row.get('Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)', 0):.0f} ‚ÇΩ/ay")
                                st.write(f"  ‚Ä¢ Maliyet (with extras): {bundle_with['per_person']['BLENDED']:.2f} ‚ÇΩ/ay")
                                st.write(f"  ‚Ä¢ Maliyet (bare): {bundle_bare['per_person']['BLENDED']:.2f} ‚ÇΩ/ay")
                                st.write("---")
                    
                else:
                    st.error("‚ùå Hesaplama i√ßin gerekli veriler eksik!")
                    st.info(f"üí° Se√ßili eleman sayƒ±sƒ±: {len(selected_elements)}, Rol sayƒ±sƒ±: {len(roles_df)}")
                    st.session_state["calculation_results"] = None
                    
            except Exception as e:
                st.error(f"‚ùå Hesaplama hatasƒ±: {e}")
                st.session_state["calculation_results"] = None
            finally:
                clear_loading_placeholder()
    if st.session_state.get("calculation_results"):
        results = st.session_state["calculation_results"]
        data = results["data"]
        
        # Ana metrikler - Modern kartlar
        bih("üí∞ Adam-Saat Fiyatlarƒ±","üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–æ-—á–∞—Å–∞", level=2)
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üèÉ √áƒ±plak a¬∑s Fiyatƒ± / –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —á¬∑—á</h3>
                <div class="val">{data['bare_as_price']:,.2f} ‚ÇΩ/a¬∑s</div>
            </div>
            """, unsafe_allow_html=True)
        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üçΩÔ∏è Genel Giderli a¬∑s / –° —á¬∑—á —Å –æ–±—â–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏</h3>
                <div class="val">{data['with_extras_as_price']:,.2f} ‚ÇΩ/a¬∑s</div>
            </div>
            """, unsafe_allow_html=True)
        with col3:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üéØ Her ≈ûey Dahil a¬∑s / –ü–æ–ª–Ω–∞—è —á¬∑—á (–≤—Å—ë –≤–∫–ª—é—á–µ–Ω–æ)</h3>
                <div class="val">{data['fully_loaded_as_price']:,.2f} ‚ÇΩ/a¬∑s</div>
            </div>
            """, unsafe_allow_html=True)

        # Proje √∂zeti - Modern kartlar
        bih("üèóÔ∏è Proje √ñzeti","üèóÔ∏è –°–≤–æ–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞", level=3)
        colA, colB, colC = st.columns(3)
        with colA:
            st.markdown(f"""
            <div class="metric-card">
                <h3>‚è∞ Toplam Adam-Saat / –ò—Ç–æ–≥–æ —á¬∑—á</h3>
                <div class="val">{data['total_adamsaat']:,.2f} —á–µ–ª¬∑—á</div>
            </div>
            """, unsafe_allow_html=True)
        with colB:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üìè m¬≥ Ba≈üƒ±na Ort. a¬∑s / –°—Ä. —á¬∑—á –Ω–∞ –º¬≥</h3>
                <div class="val">{data['avg_norm_per_m3']:,.2f} a¬∑s/m¬≥</div>
            </div>
            """, unsafe_allow_html=True)
        with colC:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üí∞ Genel Ortalama / –°—Ä–µ–¥–Ω–µ–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É</h3>
                <div class="val">{data['general_avg_m3']:,.2f} ‚ÇΩ/m¬≥</div>
            </div>
            """, unsafe_allow_html=True)
        
        colD, colE = st.columns(2)
        with colD:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üìä Toplam Metraj / –û–±—â–∏–π –æ–±—ä—ë–º</h3>
                <div class="val">{data['total_metraj']:,.3f} m¬≥</div>
            </div>
            """, unsafe_allow_html=True)
        with colE:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üíµ Toplam Maliyet / –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</h3>
                <div class="val">{data['project_total_cost']:,.2f} ‚ÇΩ</div>
            </div>
            """, unsafe_allow_html=True)

        # Loading mesajƒ±nƒ± gizle
        clear_loading_placeholder()
        
        # Oranlar
        bih("üìä Etkili Oranlar","üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–∏", level=3)
        _mode_override = bool(st.session_state.get("use_matrix_override", False))
        if _mode_override:
            st.markdown("<div style='display:inline-block;padding:2px 8px;border-radius:9999px;background:#e6fffa;border:1px solid #99f6e4;color:#065f46;font-weight:600;margin-bottom:8px;'>"+bi("Mod: Matris Override","–†–µ–∂–∏–º: –ú–∞—Ç—Ä–∏—Ü–∞ override")+"</div>", unsafe_allow_html=True)
        else:
            st.markdown("<div style='display:inline-block;padding:2px 8px;border-radius:9999px;background:#eff6ff;border:1px solid #bfdbfe;color:#1e3a8a;font-weight:600;margin-bottom:8px;'>"+bi("Mod: Manuel %","–†–µ–∂–∏–º: –†—É—á–Ω—ã–µ %")+"</div>", unsafe_allow_html=True)
        st.markdown(bi(f"**üß¥ Sarf:** {data['consumables_rate_eff']*100:.2f}%",
                       f"**üß¥ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏:** {data['consumables_rate_eff']*100:.2f}%"))
        st.markdown(bi(f"**üßÆ Overhead:** {data['overhead_rate_eff']*100:.2f}%",
                       f"**üßÆ Overhead:** {data['overhead_rate_eff']*100:.2f}%"))
        st.markdown(f"**üßæ Indirect:** {data['indirect_rate_total']*100:.2f}%")
        st.markdown(f"**Indirect toplam:** {data['indirect_total']:,.2f} ‚ÇΩ ¬∑ **Pay:** {data['indirect_share']:.1%}")

        # Tablolar
        st.markdown("""
        <div class="table-header">
            <h3>üìä Eleman Bazƒ±nda m¬≥ Maliyeti</h3>
        </div>
        """, unsafe_allow_html=True)
        st.markdown('<div class="custom-table-wrapper">', unsafe_allow_html=True)
        st.dataframe(data['elements_df'], use_container_width=True, hide_index=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown("""
        <div class="table-header">
            <h3>üßë‚Äçüîß Rol Daƒüƒ±lƒ±mƒ± ‚Äî Aylƒ±k Ortalama</h3>
        </div>
        """, unsafe_allow_html=True)
        st.markdown('<div class="custom-table-wrapper">', unsafe_allow_html=True)
        st.dataframe(data['roles_calc_df'], use_container_width=True, hide_index=True)
        st.markdown('</div>', unsafe_allow_html=True)

        # Aylƒ±k Manpower Distribution grafiƒüi
        st.markdown("""
        <div class="table-header">
            <h3>üìà Manpower Distribution</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Daƒüƒ±tƒ±m t√ºr√º se√ßimi ve a√ßƒ±klamalar
        st.markdown("**üìä Aylƒ±k Adam Daƒüƒ±lƒ±mƒ± (Manpower Distribution):**")
        st.markdown("*≈ûantiye ger√ßeklerine uygun, yumu≈üak ge√ßi≈üli daƒüƒ±lƒ±m t√ºrleri - Varsayƒ±lan: Klasik Parabolik*")
        
        col_dist1, col_dist2 = st.columns([2, 1])
        with col_dist1:
            distribution_type = st.selectbox(
                "üìä Daƒüƒ±tƒ±m T√ºr√º",
                ["Klasik Parabolik", "Geli≈ümi≈ü Parabolik", "Sigmoid", "√ú√ßgen"],
                index=0,
                help="≈ûantiye ger√ßeklerine en uygun daƒüƒ±tƒ±m t√ºr√ºn√º se√ßin (Varsayƒ±lan: Klasik Parabolik)"
            )
        
        # Daƒüƒ±tƒ±m t√ºr√º a√ßƒ±klamasƒ±
        with col_dist2:
            if distribution_type == "Klasik Parabolik":
                st.info("üìà Varsayƒ±lan parabolik")
            elif distribution_type == "Geli≈ümi≈ü Parabolik":
                st.info("üèóÔ∏è Hazƒ±rlƒ±k ‚Üí Yoƒüun ‚Üí Kapanƒ±≈ü")
            elif distribution_type == "Sigmoid":
                st.info("üîÑ √áok yumu≈üak ge√ßi≈üler")
            elif distribution_type == "√ú√ßgen":
                st.info("üìê Doƒürusal artƒ±≈ü/azalƒ±≈ü")
        
        # Daƒüƒ±tƒ±m t√ºr√º detay a√ßƒ±klamasƒ±
        if distribution_type == "Klasik Parabolik":
            st.success("‚úÖ **Klasik Parabolik:** Varsayƒ±lan daƒüƒ±lƒ±m. ≈ûantiye ger√ßeklerine uygun, orta noktada maksimum, ba≈ülangƒ±√ß ve sonda yumu≈üak azalƒ±≈ü.")
        elif distribution_type == "Geli≈ümi≈ü Parabolik":
            st.info("üèóÔ∏è **Geli≈ümi≈ü Parabolik:** Geli≈ümi≈ü parametrelerle. Hazƒ±rlƒ±k d√∂neminde yumu≈üak artƒ±≈ü, yoƒüun √ßalƒ±≈üma d√∂neminde maksimum, kapanƒ±≈ü d√∂neminde yumu≈üak azalƒ±≈ü.")
        elif distribution_type == "Sigmoid":
            st.info("üîÑ **Sigmoid:** √áok yumu≈üak ge√ßi≈üler. Keskin deƒüi≈üimler olmaz, doƒüal ≈üantiye profili.")
        elif distribution_type == "√ú√ßgen":
            st.info("üìê **√ú√ßgen:** Doƒürusal artƒ±≈ü ve azalƒ±≈ü. Basit ama etkili, orta noktada maksimum.")
        
        # Geli≈ümi≈ü parametreler (sadece Geli≈ümi≈ü Parabolik i√ßin)
        if distribution_type == "Geli≈ümi≈ü Parabolik":
            st.markdown("**‚öôÔ∏è Geli≈ümi≈ü Parametreler (Geli≈ümi≈ü Parabolik):**")
            st.markdown("*Hazƒ±rlƒ±k, yoƒüun √ßalƒ±≈üma ve kapanƒ±≈ü d√∂nemlerinin karakterini ayarlayƒ±n*")
            col_param1, col_param2, col_param3 = st.columns(3)
            
            with col_param1:
                peak_position = st.slider(
                    "üìç Maksimum Nokta (%)",
                    min_value=30.0,
                    max_value=70.0,
                    value=45.0,
                    step=5.0,
                    help="Proje s√ºresinin hangi y√ºzdesinde maksimum ki≈üi sayƒ±sƒ±na ula≈üƒ±lacak"
                ) / 100.0
            
            with col_param2:
                left_smoothness = st.slider(
                    "üîÑ Sol Yumu≈üaklƒ±k",
                    min_value=1.5,
                    max_value=4.0,
                    value=2.5,
                    step=0.1,
                    help="Hazƒ±rlƒ±k d√∂nemi ge√ßi≈ü yumu≈üaklƒ±ƒüƒ± (y√ºksek = daha yumu≈üak)"
                )
            
            with col_param3:
                right_smoothness = st.slider(
                    "üîÑ Saƒü Yumu≈üaklƒ±k",
                    min_value=1.0,
                    max_value=3.0,
                    value=1.8,
                    step=0.1,
                    help="Kapanƒ±≈ü d√∂nemi ge√ßi≈ü yumu≈üaklƒ±ƒüƒ± (y√ºksek = daha yumu≈üak)"
                )
        
        # Minimum aƒüƒ±rlƒ±k parametresi (t√ºm daƒüƒ±tƒ±mlar i√ßin)
        st.markdown("**üìâ Genel Parametreler:**")
        if distribution_type != "√ú√ßgen":
            min_weight = st.slider(
                "üìâ Minimum Aƒüƒ±rlƒ±k (%)",
                min_value=5.0,
                max_value=25.0,
                value=15.0,
                step=1.0,
                help="En d√º≈ü√ºk ay i√ßin minimum aƒüƒ±rlƒ±k y√ºzdesi (√ßok keskin ge√ßi≈üleri √∂nler)"
            ) / 100.0
        else:
            min_weight = 0.1  # √ú√ßgen i√ßin sabit
            st.info("üìê √ú√ßgen daƒüƒ±lƒ±m i√ßin minimum aƒüƒ±rlƒ±k %10 olarak sabit")
        
        if not data['month_wd_df'].empty:
            n_months = len(data['month_wd_df'])
            
            # Farklƒ± daƒüƒ±tƒ±m t√ºrleri - ≈üantiye ger√ßeklerine uygun
            def get_distribution_weights(n_months, dist_type, peak_pos=0.45, left_smooth=2.5, right_smooth=1.8, min_weight=0.15):
                if n_months <= 1:
                    return [1.0]
                
                if dist_type == "Geli≈ümi≈ü Parabolik":
                    # Geli≈ümi≈ü parabolik: Hazƒ±rlƒ±k, yoƒüun √ßalƒ±≈üma, kapanƒ±≈ü
                    
                    weights = []
                    for i in range(n_months):
                        x = i / (n_months - 1) if n_months > 1 else 0.5
                        
                        if x <= peak_pos:
                            # Hazƒ±rlƒ±k d√∂nemi: Yumu≈üak artƒ±≈ü
                            normalized_x = x / peak_pos
                            weight = (normalized_x ** left_smooth) * (1 - min_weight) + min_weight
                        else:
                            # Kapanƒ±≈ü d√∂nemi: Yumu≈üak azalƒ±≈ü
                            normalized_x = (x - peak_pos) / (1 - peak_pos)
                            weight = ((1 - normalized_x) ** right_smooth) * (1 - min_weight) + min_weight
                        
                        weights.append(weight)
                
                elif dist_type == "Klasik Parabolik":
                    # Klasik parabolik: y = -4(x-0.5)¬≤ + 1
                    weights = []
                    for i in range(n_months):
                        x = i / (n_months - 1) if n_months > 1 else 0.5
                        weight = -4 * (x - 0.5)**2 + 1
                        weights.append(max(weight, min_weight))
                
                elif dist_type == "Sigmoid":
                    # Sigmoid: √áok yumu≈üak ge√ßi≈üler
                    weights = []
                    for i in range(n_months):
                        x = i / (n_months - 1) if n_months > 1 else 0.5
                        # Sigmoid fonksiyonu: 1 / (1 + e^(-k(x-0.5)))
                        k = 6.0  # Yumu≈üaklƒ±k parametresi
                        sigmoid = 1 / (1 + math.exp(-k * (x - 0.5)))
                        weights.append(max(sigmoid, min_weight))
                
                elif dist_type == "√ú√ßgen":
                    # √ú√ßgen: Doƒürusal artƒ±≈ü ve azalƒ±≈ü
                    weights = []
                    for i in range(n_months):
                        x = i / (n_months - 1) if n_months > 1 else 0.5
                        if x <= 0.5:
                            weight = 2 * x  # 0'dan 1'e doƒürusal artƒ±≈ü
                        else:
                            weight = 2 * (1 - x)  # 1'den 0'a doƒürusal azalƒ±≈ü
                        weights.append(max(weight, min_weight))
                
                else:
                    # Varsayƒ±lan: E≈üit daƒüƒ±lƒ±m
                    weights = [1.0] * n_months
                
                # Toplamƒ± 1'e normalize et
                total_weight = sum(weights)
                normalized_weights = [w / total_weight for w in weights]
                return normalized_weights
            
            # Parametreleri daƒüƒ±tƒ±m fonksiyonuna ge√ßir
            if distribution_type == "Geli≈ümi≈ü Parabolik":
                weights = get_distribution_weights(n_months, distribution_type, peak_position, left_smoothness, right_smoothness, min_weight)
            else:
                weights = get_distribution_weights(n_months, distribution_type, min_weight=min_weight)
            headcounts_float = [data['person_months_total'] * wi for wi in weights]
            
            # Toplam adam-ay korunmalƒ± - yuvarlama hatasƒ± d√ºzeltmesi
            def round_preserve_sum(values):
                """Toplamƒ± koruyarak yuvarlama"""
                rounded = [round(v) for v in values]
                total_diff = sum(values) - sum(rounded)
                
                if abs(total_diff) >= 1:
                    # En b√ºy√ºk farkƒ± olan deƒüeri d√ºzelt
                    diffs = [(i, abs(v - r)) for i, (v, r) in enumerate(zip(values, rounded))]
                    diffs.sort(key=lambda x: x[1], reverse=True)
                    
                    for i, _ in diffs:
                        if total_diff > 0:
                            rounded[i] += 1
                            total_diff -= 1
                        elif total_diff < 0:
                            rounded[i] -= 1
                            total_diff += 1
                        if abs(total_diff) < 1:
                            break
                
                return rounded
            
            headcounts_int = round_preserve_sum(headcounts_float)
            
            month_wd_df_copy = data['month_wd_df'].copy()
            month_wd_df_copy["Manpower (–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å)"] = headcounts_int

            # Daha estetik grafik
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # Bar grafiƒüi
            bars = ax.bar(month_wd_df_copy["Ay (–ú–µ—Å—è—Ü)"], month_wd_df_copy["Manpower (–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å)"], 
                         color='skyblue', alpha=0.7, edgecolor='navy', linewidth=1)
            
            # √áizgi grafiƒüi (trend)
            ax.plot(range(n_months), headcounts_int, 'o-', color='red', linewidth=2, 
                   markersize=8, markerfacecolor='white', markeredgecolor='red')
            
            # Deƒüer etiketleri
            for rect, val in zip(bars, headcounts_int):
                ax.text(rect.get_x() + rect.get_width()/2, rect.get_height() + 0.5, 
                       f"{int(val)}", ha="center", va="bottom", fontsize=11, 
                       fontweight='bold', color='darkblue')
            
            # Grafik stilleri
            ax.set_xlabel("Ay (–ú–µ—Å—è—Ü)", fontsize=12, fontweight='bold')
            ax.set_ylabel("Ki≈üi (–ß–µ–ª–æ–≤–µ–∫)", fontsize=12, fontweight='bold')
            ax.set_title(f"Manpower Distribution - Aylƒ±k Adam Daƒüƒ±lƒ±mƒ± ({distribution_type})", 
                        fontsize=14, fontweight='bold', pad=20)
            
            # Grid ve eksen
            ax.grid(True, axis="y", alpha=0.3, linestyle='--')
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            
            # X ekseni etiketleri
            plt.xticks(rotation=45, ha="right", fontsize=10)
            plt.yticks(fontsize=10)
            
            # Y ekseni ba≈ülangƒ±cƒ± 0'dan ba≈ülasƒ±n
            ax.set_ylim(bottom=0)
            
            plt.tight_layout()
            st.pyplot(fig)
            
            # Daƒüƒ±tƒ±m bilgileri
            st.markdown(f"**üìä Daƒüƒ±tƒ±m Detaylarƒ± ({distribution_type}):**")
            col_info1, col_info2, col_info3 = st.columns(3)
            
            with col_info1:
                st.metric("üèóÔ∏è Ba≈ülangƒ±√ß", f"{headcounts_int[0]} ki≈üi", 
                         f"{weights[0]*100:.1f}%")
            with col_info2:
                max_idx = headcounts_int.index(max(headcounts_int))
                st.metric("üìà Maksimum", f"{headcounts_int[max_idx]} ki≈üi", 
                         f"{weights[max_idx]*100:.1f}%")
            with col_info3:
                st.metric("üèÅ Biti≈ü", f"{headcounts_int[-1]} ki≈üi", 
                         f"{weights[-1]*100:.1f}%")
            
            # Toplam kontrol
            st.info(f"‚úÖ **Toplam Adam-Ay:** {data['person_months_total']:.2f} ‚Üí **Daƒüƒ±tƒ±lan:** {sum(headcounts_int)} ki≈üi")
            
        else:
            st.info("Grafik i√ßin tarih aralƒ±ƒüƒ±nda en az bir ay olmalƒ±.")

        # Rapor indirme b√∂l√ºm√º kaldƒ±rƒ±ldƒ±; indirmeler 'Import' sekmesine ta≈üƒ±ndƒ±.

    else:
        st.info("üí° Hesaplama yapmak i√ßin yukarƒ±daki **HESAPLA** butonuna tƒ±klayƒ±n.")
        st.markdown("**Gerekli adƒ±mlar:**")
        st.markdown("1. **Genel** sekmesinde tarih ve parametreleri ayarlayƒ±n")
        st.markdown("2. **Eleman & Metraj** sekmesinde betonarme elemanlarƒ± se√ßin")
        st.markdown("3. **Roller** sekmesinde rol kompozisyonunu belirleyin")
        st.markdown("4. **HESAPLA** butonuna tƒ±klayarak sonu√ßlarƒ± g√∂r√ºn")
# ==================== 7.1) IMPORT: Geli≈ümi≈ü Veri ƒ∞√ße Aktarma ====================
with tab_import:
    bih("üì• ƒ∞√ße Aktar (CSV/Excel/JSON)","üì• –ò–º–ø–æ—Ä—Ç (CSV/Excel/JSON)", level=3)
    bitr(
        "Projeye ait metraj, roller veya √∂zel giderleri dƒ±≈ü dosyalardan alabilirsiniz.",
        "–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä—ë–º—ã, —Ä–æ–ª–∏ –∏–ª–∏ –ø—Ä–æ—á–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤."
    )

    import_option = st.radio(
        bi("Hedef tablo","–¶–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞"),
        [bi("Eleman & Metraj","–≠–ª–µ–º–µ–Ω—Ç—ã –∏ –æ–±—ä—ë–º—ã"), bi("Roller","–†–æ–ª–∏"), bi("√ñzel Giderler","–ü—Ä–æ—á–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã")],
        horizontal=True
    )

    uploaded_file = st.file_uploader(bi("Dosya se√ßin","–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª"), type=["csv","xlsx","xls","json"])

    with st.expander(bi("Kolon e≈üle≈ütirme","–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫"), expanded=False):
        st.caption(bi("Sol: beklenen, Saƒü: dosyadaki kar≈üƒ±lƒ±k","–°–ª–µ–≤–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è, —Å–ø—Ä–∞–≤–∞ ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"))
        if import_option.startswith("üß©") or "Eleman" in import_option:
            expected_cols = ["Eleman","Metraj (m3)"]
        elif import_option.startswith("üë•") or "Rol" in import_option:
            expected_cols = ["Rol","Aƒüƒ±rlƒ±k (–í–µ—Å)","Net Maa≈ü (‚ÇΩ)"]
        else:
            expected_cols = ["Kalem","Tutar (‚ÇΩ)","Grup"]
        mapping = {}
        for col in expected_cols:
            mapping[col] = st.text_input(col, col)

    if uploaded_file:
        try:
            if uploaded_file.name.lower().endswith((".xlsx",".xls")):
                df_in = pd.read_excel(uploaded_file)
            elif uploaded_file.name.lower().endswith(".csv"):
                df_in = pd.read_csv(uploaded_file)
            else:
                df_in = pd.read_json(uploaded_file)

            st.dataframe(df_in.head(50), use_container_width=True)

            if st.button(bi("ƒ∞√ße aktar","–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"), type="primary"):
                df = df_in.rename(columns=mapping)
                if "Eleman" in mapping:
                    # Eleman & Metraj
                    need = ["Eleman","Metraj (m3)"]
                    if all(c in df.columns for c in need):
                        met_df = pd.DataFrame({k: st.session_state.get(k, False) for k in CANON_KEYS}, index=[0])
                        for _, r in df.iterrows():
                            key = canon_key(str(r["Eleman"])) if "Eleman" in r else None
                            if key in CANON_KEYS:
                                st.session_state[f"sel_{key}"] = True
                                st.session_state[f"met_{key}"] = float(r["Metraj (m3)"])
                        st.success(bi("Metraj g√ºncellendi","–û–±—ä—ë–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"))
                    else:
                        st.error(bi("Kolonlar eksik","–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫"))
                elif "Rol" in mapping:
                    need = ["Rol","Aƒüƒ±rlƒ±k (–í–µ—Å)","Net Maa≈ü (‚ÇΩ)"]
                    if all(c in df.columns for c in need):
                        roles_df = st.session_state.get("roles_df", get_default_roles_df())
                        for _, r in df.iterrows():
                            name = str(r["Rol"]).strip()
                            w = float(r["Aƒüƒ±rlƒ±k (–í–µ—Å)"])
                            net = float(r["Net Maa≈ü (‚ÇΩ)"])
                            if name in roles_df["Rol"].values:
                                roles_df.loc[roles_df["Rol"]==name,["Aƒüƒ±rlƒ±k (–í–µ—Å)","Net Maa≈ü (‚ÇΩ)"]] = [w, net]
                            else:
                                roles_df.loc[len(roles_df)] = [name,w,net]
                        st.session_state["roles_df"] = roles_df
                        st.success(bi("Roller g√ºncellendi","–†–æ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"))
                    else:
                        st.error(bi("Kolonlar eksik","–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫"))
                else:
                    st.info(bi("√ñzel gider aktarƒ±mƒ± i√ßin ayrƒ± ≈üablon eklenecek","–®–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ—á–∏—Ö –∑–∞—Ç—Ä–∞—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω"))
        except Exception as e:
            st.error(bi(f"ƒ∞√ße aktarma hatasƒ±: {e}", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}"))

    st.markdown("---")
    bih("üìä Y√∂netici √ñzeti Excel","üìä Excel-–æ—Ç—á—ë—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞", level=4)
    bitr("≈ûƒ±k formatlƒ± √∂zet rapor √ºretir.","–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç.")

    if st.button(bi("üì• Excel √ºret","üì• –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Excel"), type="primary"):
        try:
            buf = io.BytesIO()
            with ExcelWriter(buf, engine="xlsxwriter") as xw:
                wb = xw.book
                fmt_title = wb.add_format({"bold": True, "font_size": 18})
                fmt_kpi = wb.add_format({"bold": True, "font_size": 14, "bg_color": "#EEF3FF", "border":1})
                fmt_hdr = wb.add_format({"bold": True, "bg_color": "#DCE6F1", "border":1})
                fmt_num = wb.add_format({"num_format": "#,##0.00", "border":1})
                fmt_int = wb.add_format({"num_format": "#,##0", "border":1})

                sheet = wb.add_worksheet("Summary")
                sheet.write(0,0, bi("ƒ∞≈ü√ßilik √ñzet Raporu","–°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞–º"), fmt_title)

                data = st.session_state.get("calculation_results") or {}
                total_pm = float(data.get("person_months_total", 0.0))
                roles_df = st.session_state.get("roles_calc_df", pd.DataFrame())
                elements_df = st.session_state.get("elements_df", pd.DataFrame())

                sheet.write(2,0, bi("Toplam Adam-Ay","–í—Å–µ–≥–æ —á–µ–ª-–º–µ—Å—è—Ü–µ–≤"), fmt_kpi); sheet.write_number(2,1, total_pm, fmt_kpi)
                sheet.write(3,0, bi("Rol sayƒ±sƒ±","–ö–æ–ª-–≤–æ —Ä–æ–ª–µ–π"), fmt_kpi); sheet.write_number(3,1, 0 if roles_df is None or roles_df is pd.DataFrame() or roles_df.empty else len(roles_df), fmt_kpi)
                sheet.write(4,0, bi("Eleman sayƒ±sƒ±","–ö–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"), fmt_kpi); sheet.write_number(4,1, 0 if elements_df is None or elements_df is pd.DataFrame() or elements_df.empty else len(elements_df), fmt_kpi)

                if elements_df is not None and not elements_df.empty:
                    elements_df.to_excel(xw, sheet_name="Elements", index=False)
                    ws = xw.sheets["Elements"]
                    for col_i, col in enumerate(elements_df.columns):
                        ws.write(0, col_i, str(col), fmt_hdr)
                    ws.set_column(0, len(elements_df.columns)-1, 18, fmt_num)
                if roles_df is not None and not roles_df.empty:
                    roles_df.to_excel(xw, sheet_name="Roles", index=False)
                    ws2 = xw.sheets["Roles"]
                    for col_i, col in enumerate(roles_df.columns):
                        ws2.write(0, col_i, str(col), fmt_hdr)
                    ws2.set_column(0, len(roles_df.columns)-1, 18, fmt_num)

            st.download_button(
                bi("üì• Excel ƒ∞ndir (.xlsx)","üì• –°–∫–∞—á–∞—Ç—å Excel (.xlsx)"),
                data=buf.getvalue(),
                file_name="yonetici_ozeti.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )
        except Exception as e:
            st.error(bi(f"Excel olu≈üturma hatasƒ±: {e}", f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è Excel: {e}"))
# ==================== 7) ASƒ∞STAN: GPT √ñneri + Oran Kontrol + RAG + DEV CONSOLE ====================
with tab_asistan:
    # ---------- GPT √∂neri / web doƒürulama (mevcut) ----------
    st.markdown("### ü§ñ GPT √ñneri Pilotu")
    payload = {
        "consumables_pct": float((st.session_state.get("consumables_rate_eff",
                                st.session_state.get("consumables_rate", CONSUMABLES_RATE_DEFAULT/100.0)))*100.0),
        "overhead_pct": float((st.session_state.get("overhead_rate_eff",
                                st.session_state.get("overhead_rate", OVERHEAD_RATE_DEFAULT)))*100.0),
        "hours_per_day": float(st.session_state.get("hours_per_day",10.0)),
        "scenario": st.session_state.get("scenario","Ger√ßek√ßi"),
        "difficulty_multiplier": float(
            (1+st.session_state.get("f_winter",0.0))*
            (1+st.session_state.get("f_heavy",0.0))*
            (1+st.session_state.get("f_repeat",0.0))*
            (1+st.session_state.get("f_shared",0.0))*
            (1+st.session_state.get("f_cong",0.0))*
            (1+st.session_state.get("f_pump",0.0))
        )
    }
    gpt_can = get_openai_client() is not None
    colg1, colg2 = st.columns(2)
    with colg1:
        if st.button("ü§ñ GPT'den √∂neri iste", disabled=not gpt_can):
            resp = gpt_propose_params(payload)
            if not resp:
                st.error("GPT √∂nerisi alƒ±namadƒ±.")
            else:
                st.json(resp)
                if st.button("‚úÖ √ñnerileri uygula (√ºstteki oranlarƒ± g√ºnceller)"):
                    st.session_state["consumables_rate"] = float(resp.get("consumables_pct", payload["consumables_pct"]))
                    st.session_state["overhead_rate"]    = float(resp.get("overhead_pct", payload["overhead_pct"]))
                    st.session_state["hours_per_day"]    = float(resp.get("hours_per_day", payload["hours_per_day"]))
                    st.session_state["scenario"]         = str(resp.get("scenario", payload["scenario"]))
                    st.success("Uygulandƒ±. Yeniden hesaplayƒ±n (alt sekmede).")
    with colg2:
        if st.button("üåê ƒ∞nternetten oranlarƒ± kontrol et (beta)", disabled=not gpt_can):
            queries=[
                "–†–æ—Å—Å–∏—è —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã 2024 –û–ü–° –û–°–° –û–ú–° –ø—Ä–æ—Ü–µ–Ω—Ç—ã",
                "–ù–°–∏–ü–ó —Ç–∞—Ä–∏—Ñ 2024 –†–æ—Å—Å–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–≤–º–∞—Ç–∏–∑–º",
                "–ù–î–§–õ —Å—Ç–∞–≤–∫–∞ –†–æ—Å—Å–∏—è 2024",
                "–ø–∞—Ç–µ–Ω—Ç –º–∏–≥—Ä–∞–Ω—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü 2024 –†–æ—Å—Å–∏—è",
                "VKS —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã –†–æ—Å—Å–∏—è 2024",
            ]
            found = gpt_verify_rates_via_web(queries)
            if found:
                st.json(found)
            else:
                st.warning("√áevrimi√ßi doƒürulama yapƒ±lamadƒ± (ya da anahtar eksik).")

    # ---------- RAG ----------
    bih("üìö RAG: Dosya y√ºkle ‚Üí indeksle ‚Üí ara","üìö RAG: –∑–∞–≥—Ä—É–∑–∏—Ç—å ‚Üí –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å ‚Üí –∏—Å–∫–∞—Ç—å", level=3)
    uploads = st.file_uploader(bi("Dosya y√ºkle (.txt, .csv, .xlsx)","–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã (.txt, .csv, .xlsx)"), type=["txt","csv","xlsx"], accept_multiple_files=True, key="rag_up")
    cR1, cR2, cR3 = st.columns(3)
    with cR1:
        if st.button(bi("üì• ƒ∞ndeksle (Embed + Kaydet)","üì• –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å (—ç–º–±–µ–¥ + —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å)")):
            if not uploads:
                st.warning(bi("Dosya se√ßin.","–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª(—ã)."))
            else:
                chunks=[]
                for up in uploads: chunks += file_to_chunks(up)
                if not chunks:
                    st.warning(bi("Par√ßa yok.","–ù–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤."))
                else:
                    texts=[c["text"] for c in chunks]
                    embs=embed_texts(texts)
                    if not embs:
                        st.error(bi("Embed alƒ±namadƒ± (OpenAI anahtarƒ± gerekli).","–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (–Ω—É–∂–µ–Ω –∫–ª—é—á OpenAI)."))
                    else:
                        recs=[{"id":str(uuid.uuid4()),"text":t,"embedding":e,"meta":c.get("meta",{})} for t,e,c in zip(texts,embs,chunks)]
                        save_rag_records(recs); st.success(bi(f"ƒ∞ndekslendi: {len(recs)}", f"–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {len(recs)}"))
    with cR2:
        if st.button(bi("üßπ RAG temizle","üßπ –û—á–∏—Å—Ç–∏—Ç—å RAG")):
            ensure_rag_dir()
            try:
                if os.path.exists(RAG_FILE): os.remove(RAG_FILE)
                open(RAG_FILE,"a").close()
                st.success(bi("RAG temizlendi.","RAG –æ—á–∏—â–µ–Ω."))
            except Exception as e:
                st.error(bi(f"Hata: {e}", f"–û—à–∏–±–∫–∞: {e}"))
    with cR3:
        q = st.text_input(bi("üîé RAG' de ara","üîé –ü–æ–∏—Å–∫ –≤ RAG"), value=st.session_state.get("rag_q",""))
        if st.button(bi("Ara","–ù–∞–π—Ç–∏"), key="rag_search_btn"):
            hits = rag_search(q.strip(), topk=6) if q.strip() else []
            st.session_state["rag_hits"] = hits or []
    for it in st.session_state.get("rag_hits", []):
        st.caption(f"‚Ä¢ {it.get('meta',{}).get('filename','?')} ‚Äî {it.get('meta',{})}")
        st.code(it.get("text","")[:700])

    # ---------- üí¨ GPT Dev Console (Kod Y√∂neticisi) ----------
    bih("üí¨ GPT Dev Console (Kod Y√∂neticisi)","üí¨ GPT Dev Console (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–æ–º)", level=3)
    st.caption("Buradan GPT'ye doƒüal dille komut ver: deƒüi≈üiklik teklifini JSON patch olarak √ßƒ±karƒ±r; **sen onaylamadan uygulanmaz**.")

    # k√º√ß√ºk yardƒ±mcƒ±lar (lokal ‚Äî Part 1'e dokunmuyoruz)
    import difflib
    from datetime import datetime

    def _read_text(p):
        try:
            with open(p, "r", encoding="utf-8") as f: return f.read()
        except Exception as e:
            return ""

    def _write_text(p, s):
        with open(p, "w", encoding="utf-8") as f: f.write(s)

    def _ts():
        return datetime.now().strftime("%Y%m%d_%H%M%S")

    def _ensure_dir(d):
        os.makedirs(d, exist_ok=True)

    def _diff(a, b, fname="app.py"):
        return "".join(difflib.unified_diff(a.splitlines(keepends=True), b.splitlines(keepends=True),
                                            fromfile=f"{fname} (old)", tofile=f"{fname} (new)"))

    def _extract_section(full_text:str, part_tag:str):
        tags = {
            "PART1": "# app.py ‚Äî PART 1/3",
            "PART2": "# ========= PART 2/3",
            "PART3": "# ========= PART 3/3",
        }
        start_tag = tags["PART1"]
        mid_tag   = tags["PART2"]
        end_tag   = tags["PART3"]
        start = 0; end = len(full_text)
        if part_tag == "PART1":
            start = full_text.find(start_tag)
            end   = full_text.find(mid_tag)
        elif part_tag == "PART2":
            start = full_text.find(mid_tag)
            end   = full_text.find(end_tag)
        elif part_tag == "PART3":
            start = full_text.find(end_tag)
            end   = len(full_text)
        else:
            return full_text, 0, len(full_text), start_tag, end_tag
        if start < 0: start = 0
        if end < 0: end = len(full_text)
        return full_text[start:end], start, end, (mid_tag if part_tag!="PART1" else start_tag), (end_tag if part_tag!="PART3" else "")

    # hedef dosya se√ßimi
    default_target = st.session_state.get("TARGET_FILE", os.path.abspath(__file__))
    st.session_state["TARGET_FILE"] = st.text_input("üéØ Hedef dosya yolu", value=default_target, key="target_file_inp")
    target_path = st.session_state["TARGET_FILE"]
    file_text = _read_text(target_path)
    st.caption(f"Dosya uzunluƒüu: {len(file_text):,} karakter".replace(",", " "))

    # se√ßenekler
    part_choice = st.selectbox(bi("Deƒüi≈üiklik kapsamƒ±","–û–±–ª–∞—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π"), ["PART2 (UI)", "PART1 (Helpers/Tax/Logic)", "PART3 (Hesap/√áƒ±ktƒ±)", "WHOLE FILE"], index=0)
    part_key = {"PART2 (UI)":"PART2","PART1 (Helpers/Tax/Logic)":"PART1","PART3 (Hesap/√áƒ±ktƒ±)":"PART3","WHOLE FILE":"WHOLE"}[part_choice]

    protect_crit = st.toggle(bi("üõ°Ô∏è Kritik alanlarƒ± koru (vergi/prim sabitleri vs.)","üõ°Ô∏è –ó–∞—â–∏—Ç–∏—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (—Å—Ç–∞–≤–∫–∏ –Ω–∞–ª–æ–≥–æ–≤/–≤–∑–Ω–æ—Å–æ–≤ –∏ —Ç.–ø.)"), value=st.session_state.get("protect_crit", True))
    st.session_state["protect_crit"] = protect_crit
    dry_run = st.toggle(bi("üß™ √ñnce sandboxa yaz (dry-run)","üß™ –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ø–µ—Å–æ—á–Ω–∏—Ü—É (dry-run)"), value=st.session_state.get("dry_run", True))
    st.session_state["dry_run"] = dry_run

    # baƒülamƒ± olu≈ütur
    if part_key == "WHOLE":
        ctx = file_text
        start_marker = "# app.py ‚Äî PART 1/3"
        end_marker   = ""  # dosya sonu
    else:
        ctx, start_idx, end_idx, start_marker, end_marker = _extract_section(file_text, part_key)

    guard_text = (
        "Kurallar:\n"
        "1) Deƒüi≈üiklik teklifini sadece JSON olarak ver: {\"notes\":\"...\",\"changes\":[{\"mode\":\"replace_between\",\"start_marker\":\"...\",\"end_marker\":\"...\",\"new_text\":\"...\",\"file\":\"optional\"}]}.\n"
        "2) M√ºmk√ºnse **replace_between** m√≥dunu kullan; start_marker ve end_marker a√ßƒ±k√ßa ver.\n"
        "3) new_text, tam yeni b√∂l√ºm i√ßeriƒüi olsun (eksiksiz, √ßalƒ±≈üƒ±r durumda).\n"
        "4) Vergi/sigorta sabitlerine dokunma, sadece istenirse (protect_crit=True ise ASLA dokunma).\n"
        "5) Kod stilini ve mevcut API'leri koru; Streamlit widget key'leri reset yaratmayacak ≈üekilde kullan.\n"
    )
    if protect_crit:
        guard_text += "6) NDFL_*, OPS/OSS/OMS, NSIPZ_*, SNG_PATENT_MONTH, *_TAXED_BASE, CASH_COMMISSION_RATE sabitlerini DEƒûƒ∞≈ûTƒ∞RME.\n"

    bih("üó£Ô∏è GPT'ye Komutun","üó£Ô∏è –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è GPT", level=4)
    user_cmd = st.text_area(bi("Prompt","–ü—Ä–æ–º–ø—Ç"), height=160, key="dev_prompt",
                            placeholder="√ñrn: 'Asistan sekmesindeki RAG bloƒüunun ba≈üƒ±na kƒ±sa bir a√ßƒ±klama ekle ve tablo fontunu %10 b√ºy√ºt.' / –ü—Ä–∏–º–µ—Ä: '–î–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–ª–æ–∫ RAG –∏ —É–≤–µ–ª–∏—á—å —à—Ä–∏—Ñ—Ç —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ 10%'.")

    if st.button(bi("üß© Patch √ñnerisi √úret","üß© –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å patch"), disabled=not gpt_can):
        if not user_cmd.strip():
            st.warning(bi("Bir komut yaz.","–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É."))
        else:
            client = get_openai_client()
            try:
                system = "Kƒ±demli Python/Streamlit geli≈ütiricisisin. Sadece JSON d√∂nd√ºr, a√ßƒ±klama yok."
                user = (
                    f"HEDEF DOSYA: {os.path.basename(target_path)}\n"
                    f"KAPSAM: {part_key}\n"
                    f"START_MARKER: {start_marker}\nEND_MARKER: {end_marker or '[EOF]'}\n\n"
                    f"MEVCUT B√ñL√úM ƒ∞√áERƒ∞ƒûƒ∞ (referans):\n```\n{ctx[:20000]}\n```\n\n"
                    f"{guard_text}\n"
                    f"KULLANICI ƒ∞STEK:\n{user_cmd}"
                )
                r = client.chat.completions.create(
                    model="gpt-4o-mini", temperature=0.2,
                    messages=[{"role":"system","content":system},{"role":"user","content":user}]
                )
                raw = r.choices[0].message.content or "{}"
                try:
                    st.session_state["dev_patch_json"] = json.loads(extract_json_block(raw))
                    st.success(bi("Patch alƒ±ndƒ±.","Patch –ø–æ–ª—É—á–µ–Ω."))
                except Exception:
                    st.error(bi("JSON parse edilemedi. D√∂nen i√ßerik:","JSON –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω. –û—Ç–≤–µ—Ç:"))
                    st.code(raw)
            except Exception as e:
                st.error(f"Hata: {e}")

    patch = st.session_state.get("dev_patch_json")
    if patch:
        bih("üì¶ Patch JSON","üì¶ –ü–∞—Ç—á JSON", level=4)
        st.code(json.dumps(patch, ensure_ascii=False, indent=2), language="json")

        # tek dosya/sƒ±ralƒ± replace_between desteƒüi
        new_text_total = file_text
        try:
            for ch in patch.get("changes", []):
                mode = ch.get("mode","replace_between")
                fpath = ch.get("file", target_path)
                if fpath != target_path:
                    st.warning(f"≈ûimdilik tek dosya uygulanƒ±yor: {os.path.basename(target_path)}. (ƒ∞stekte: {fpath})")
                if mode == "replace_between":
                    sm = ch.get("start_marker") or start_marker
                    em = ch.get("end_marker") or (end_marker if end_marker else None)
                    block = ch.get("new_text","")
                    txt = new_text_total
                    sidx = txt.find(sm) if sm else 0
                    eidx = (txt.find(em, sidx) if em else len(txt))
                    if sidx < 0: sidx = 0
                    if eidx < 0: eidx = len(txt)
                    new_text_total = txt[:sidx] + (sm + "\n" if sm and not txt[sidx:sidx+len(sm)]==sm else "") + block + ("\n"+em if em else "") + txt[eidx + (len(em) if em else 0):]
                elif mode == "whole_file":
                    new_text_total = ch.get("new_text","")
                else:
                    st.error(f"Desteklenmeyen mode: {mode}")

            diff = _diff(file_text, new_text_total, fname=os.path.basename(target_path))
            bih("üßÆ Diff","üßÆ –†–∞–∑–Ω–∏—Ü–∞", level=4)
            st.code(diff or "# (fark yok)")

            # Uygula / ƒ∞ptal
            cA, cB, cC = st.columns(3)
            with cA:
                if st.button(bi("‚úÖ Uygula (yedek alarak)","‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å (—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π)")):
                    # yedekle
                    bdir = "_gpt_backups"; _ensure_dir(bdir)
                    bname = f"{os.path.basename(target_path)}.{_ts()}.bak"
                    with open(os.path.join(bdir, bname), "w", encoding="utf-8") as f:
                        f.write(file_text)
                    # dry-run mƒ±?
                    if dry_run:
                        sdir = "_gpt_sandboxes"; _ensure_dir(sdir)
                        sname = f"{os.path.basename(target_path)}.sandbox.{_ts()}"
                        with open(os.path.join(sdir, sname), "w", encoding="utf-8") as f:
                            f.write(new_text_total)
                        st.success(f"Sandbox'a yazƒ±ldƒ±: {os.path.join(sdir, sname)}")
                    else:
                        _write_text(target_path, new_text_total)
                        st.success("Uygulandƒ±. (Deƒüi≈üiklikler aktif olmasƒ± i√ßin uygulamayƒ± yeniden √ßalƒ±≈ütƒ±rmanƒ±z gerekebilir.)")
                        # Tablolarƒ± korumak i√ßin rerun kullanmƒ±yoruz
            with cB:
                if st.button(bi("üóëÔ∏è Patch'i sil","üóëÔ∏è –£–¥–∞–ª–∏—Ç—å patch")):
                    st.session_state.pop("dev_patch_json", None)
                    st.info(bi("Patch silindi.","Patch —É–¥–∞–ª—ë–Ω."))
            with cC:
                if st.button(bi("‚Ü©Ô∏è Son yedeƒüi geri y√ºkle","‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø")):
                    bdir = "_gpt_backups"
                    if not os.path.isdir(bdir):
                        st.warning(bi("Yedek klas√∂r√º yok.","–ü–∞–ø–∫–∞ —Å –±—ç–∫–∞–ø–∞–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."))
                    else:
                        files = sorted([f for f in os.listdir(bdir) if f.startswith(os.path.basename(target_path))], reverse=True)
                        if not files:
                            st.warning(bi("Geri y√ºklenecek yedek bulunamadƒ±.","–ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."))
                        else:
                            last_bak = os.path.join(bdir, files[0])
                            _write_text(target_path, _read_text(last_bak))
                            st.success(bi(f"Geri y√ºklendi: {files[0]}", f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {files[0]}"))
                            # Tablolarƒ± korumak i√ßin rerun kullanmƒ±yoruz
        except Exception as e:
            st.error(f"Patch uygula hazƒ±rlƒ±ƒüƒ±nda hata: {e}")


# ========= PART 3/3 ‚Äî HESAPLAR, TABLOLAR, GRAFƒ∞K, √áIKTILAR =========

# --- G√ºvenli yardƒ±mcƒ±: KDV ayrƒ±≈ütƒ±rma (Part 1'de yoksa ekle) ---
if "net_of_vat" not in globals():
    def net_of_vat(x, tick):
        vr = float(st.session_state.get("vat_rate", 0.20))
        return float(x)/(1.0+vr) if bool(tick) else float(x)

# KDV ayrƒ±≈ütƒ±rma (i≈üaretli ise) - Part 3 i√ßin
def net_of_vat_part3(x, tick):
    vat_rate = float(st.session_state.get("vat_rate", 0.20))
    return x / (1 + vat_rate) if tick else x

# --- Kƒ±sa alias'lar (state'ten oku) ---
PRIM_SNG = bool(st.session_state.get("prim_sng", True))
PRIM_TUR = bool(st.session_state.get("prim_tur", True))

start_date   = st.session_state.get("start_date", date.today().replace(day=1))
end_date     = st.session_state.get("end_date", date.today().replace(day=30))
holiday_mode = st.session_state.get("holiday_mode","her_pazar")
hours_per_day= float(st.session_state.get("hours_per_day",10.0))
scenario     = st.session_state.get("scenario","Ger√ßek√ßi")



# --- Difficulty multiplier: single source of truth ---
def get_difficulty_multiplier_cached() -> float:
    try:
        return float(st.session_state.get("_diff_total_mult_cache", 1.0))
    except Exception:
        return 1.0

# Zorluk √ßarpanƒ± tek merkezden hesaplanƒ±r ve cache'e yazƒ±lƒ±r
z_mult = get_difficulty_multiplier_cached()
difficulty_multiplier = z_mult  # norm hesaplarƒ± bunu kullanƒ±yor

# Se√ßili elemanlar
selected_elements = [k for k in ELEMENT_ORDER if st.session_state.get(f"sel_{k}", True)]
if not selected_elements:
    st.warning("En az bir betonarme eleman se√ßin."); st.stop()

# Norm √ßarpanlarƒ±nƒ± olu≈ütur
as_norm_base_from_scn, norm_mult = build_norms_for_scenario(scenario, selected_elements)

# Metraj DF (varsa)
use_metraj = bool(st.session_state.get("use_metraj", False))
metraj_df  = st.session_state.get("metraj_df", pd.DataFrame(columns=["Eleman (–≠–ª–µ–º–µ–Ω—Ç)","Metraj (m¬≥) (–û–±—ä—ë–º, –º¬≥)"]))

# Global ki≈üi-ba≈üƒ± giderleri (KDV ayrƒ±≈ütƒ±r)
food       = float(st.session_state.get("food",10000.0))
food_vat   = bool(st.session_state.get("food_vat",True))
ppe        = float(st.session_state.get("ppe",1500.0))
ppe_vat    = bool(st.session_state.get("ppe_vat",True))
lodging    = float(st.session_state.get("lodging",12000.0))
lodging_vat= bool(st.session_state.get("lodging_vat",True))
training   = float(st.session_state.get("training",500.0))
training_vat=bool(st.session_state.get("training_vat",True))
transport  = float(st.session_state.get("transport",3000.0))
transport_vat=bool(st.session_state.get("transport_vat",False))

extras_per_person = sum([
    net_of_vat_part3(food,food_vat),
    net_of_vat_part3(lodging,lodging_vat),
    net_of_vat_part3(transport,transport_vat),
    net_of_vat_part3(ppe,ppe_vat),
    net_of_vat_part3(training,training_vat),
])

# Manuel √ºst oranlar (sade): sarf, overhead, indirect
# Not: Part 2'deki "override" a√ßƒ±ksa *_eff deƒüerleri yazƒ±lmƒ±≈ü olur; onlarƒ± kullan.
consumables_rate = float(st.session_state.get("consumables_rate", CONSUMABLES_RATE_DEFAULT/100.0))          # 0..1
overhead_rate    = float(st.session_state.get("overhead_rate", OVERHEAD_RATE_DEFAULT))                      # 0..1
ind_rows         = st.session_state.get("ind_rows", [])
ind_custom_rows  = st.session_state.get("ind_custom_rows", [])

# Etkili oranlar (override'a bak)
# Session state'ten oranlarƒ± al (0-1), yoksa default kullan
consumables_rate_eff = float(st.session_state.get("consumables_rate", CONSUMABLES_RATE_DEFAULT/100.0))
overhead_rate_eff    = float(st.session_state.get("overhead_rate", OVERHEAD_RATE_DEFAULT/100.0))

# Indirect toplamƒ±nƒ± topla (sade)
indirect_rate_total = 0.0
for r in ind_rows:
    if r.get("On"): indirect_rate_total += float(r.get("Rate",0.0))
for rr in ind_custom_rows:
    if rr.get("on"): indirect_rate_total += float(rr.get("rate",0.0))
# override varsa ge√ß
indirect_rate_total = float(st.session_state.get("indirect_rate_total_eff", indirect_rate_total))

# ----------------- TAKVƒ∞M & SAATLER -----------------

# Tatil g√ºnleri deƒüi≈üikliƒüinde hesaplamalarƒ± g√ºncelle
if st.session_state.get("_holiday_mode_changed", False):
    st.session_state["_holiday_mode_changed"] = False

# Tarih hesaplama mantƒ±ƒüƒ±: Her zaman ger√ßek tarihler kullan, metraj sadece m¬≥ deƒüerlerini etkiler
workdays = workdays_between(start_date, end_date, holiday_mode)
project_days = max((end_date-start_date).days+1, 1)

avg_workdays_per_month = workdays * 30.0 / project_days
hours_per_person_month = max(avg_workdays_per_month * hours_per_day, 1e-9)
                    
# ----------------- NORM √ó METRAJ -----------------
if use_metraj and not metraj_df.empty:
    iterable = metraj_df.to_dict(orient="records"); col_ele="Eleman (–≠–ª–µ–º–µ–Ω—Ç)"; col_met="Metraj (m¬≥) (–û–±—ä—ë–º, –º¬≥)"
else:
    iterable = [{"Eleman (–≠–ª–µ–º–µ–Ω—Ç)": LABELS[k], "Metraj (m¬≥) (–û–±—ä—ë–º, –º¬≥)": 1.0} for k in selected_elements]
    col_ele="Eleman (–≠–ª–µ–º–µ–Ω—Ç)"; col_met="Metraj (m¬≥) (–û–±—ä—ë–º, –º¬≥)"

# Rus√ßa etiketleri T√ºrk√ße anahtarlara e≈üle≈ütir - Part 3 i√ßin
russian_to_turkish_part3 = {
    "–ö–æ–ª–æ–Ω–Ω–∞": "kolon", "–ë–∞–ª–∫–∞": "kiri≈ü", "–ü–ª–∏—Ç–∞": "d√∂≈üeme", 
    "–°—Ç–µ–Ω–∞": "duvar", "–õ–µ—Å—Ç–Ω–∏—Ü–∞": "merdiven", "–§—É–Ω–¥–∞–º–µ–Ω—Ç": "temel", 
    "–ö—Ä—ã—à–∞": "√ßatƒ±", "–õ–∏—Ñ—Ç": "asans√∂r", "–ü–æ–¥–±–µ—Ç–æ–Ω–∫–∞": "grobeton",
    "–ü–ª–∏—Ç–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è": "d√∂≈üeme", "–°—Ç–µ–Ω–∞/–¥–∏–∞—Ñ—Ä–∞–≥–º–∞": "perde",
    # Tam etiket e≈üle≈ütirmesi - metraj_df'den gelen tam etiketler i√ßin
    "Grobeton (–ü–æ–¥–±–µ—Ç–æ–Ω–∫–∞)": "grobeton",
    "Temel (–§—É–Ω–¥–∞–º–µ–Ω—Ç)": "temel",
    "D√∂≈üeme (–ü–ª–∏—Ç–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è)": "d√∂≈üeme",
    "Perde (–°—Ç–µ–Ω–∞/–¥–∏–∞—Ñ—Ä–∞–≥–º–∞)": "perde",
    "Merdiven (–õ–µ—Å—Ç–Ω–∏—Ü–∞)": "merdiven"
}

norms_used={}; total_metraj=0.0; total_adamsaat=0.0
for r in iterable:
    lbl=str(r[col_ele]); met=float(r.get(col_met,0.0) or 0.0)
    
    # Rus√ßa etiketi T√ºrk√ße anahtara √ßevir
    turkish_key = russian_to_turkish_part3.get(lbl, lbl)
    norm_multiplier = norm_mult.get(turkish_key, 1.0)
    
    n_e = as_norm_base_from_scn * norm_multiplier * get_difficulty_multiplier_cached()
    norms_used[lbl]=n_e
    total_metraj += met
    total_adamsaat += met*n_e

# ----------------- ROL MALƒ∞YETƒ∞ (PRIM VERGƒ∞Sƒ∞ YOK!) -----------------
# √ñNEMLƒ∞: Sigorta/vakƒ±f kesintileri yalnƒ±z "resm√Æ br√ºt" √ºzerinden; 'prim' (elden) kƒ±sma vergi/prim YOK.

# Global ki≈üi-ba≈üƒ± giderler (giderler sekmesinden hesapla)
food = float(st.session_state.get("food", 10000.0))
lodging = float(st.session_state.get("lodging", 12000.0))
transport = float(st.session_state.get("transport", 3000.0))
ppe = float(st.session_state.get("ppe", 1500.0))
training = float(st.session_state.get("training", 500.0))

# KDV i≈üaretleri (giderler sekmesinden al)
food_vat = bool(st.session_state.get("food_vat", True))
lodging_vat = bool(st.session_state.get("lodging_vat", True))
transport_vat = bool(st.session_state.get("transport_vat", False))
ppe_vat = bool(st.session_state.get("ppe_vat", True))
training_vat = bool(st.session_state.get("training_vat", True))

# KDV ayrƒ±≈ütƒ±rma (i≈üaretli ise)
def net_of_vat(x, tick):
    vat_rate = float(st.session_state.get("vat_rate", 0.20))
    return x / (1 + vat_rate) if tick else x

# Toplam KDV'siz ek giderler (ger√ßek deƒüerlerden hesapla)
extras_per_person = sum([
    net_of_vat(food, food_vat),           # Yemek
    net_of_vat(lodging, lodging_vat),     # Barƒ±nma
    net_of_vat(transport, transport_vat), # Ula≈üƒ±m
    net_of_vat(ppe, ppe_vat),            # PPE
    net_of_vat(training, training_vat)    # Eƒüitim
])

roles_df = st.session_state.get("roles_df", pd.DataFrame())
sum_w = float(roles_df["Aƒüƒ±rlƒ±k (–í–µ—Å)"].clip(lower=0.0).sum()) if not roles_df.empty else 0.0
month_wd_df = workdays_in_month_range(start_date, end_date, holiday_mode)
n_months = len(month_wd_df) if not month_wd_df.empty else 1
person_months_total = total_adamsaat / hours_per_person_month



# YENƒ∞ ADAM-SAAT ALGORƒ∞TMASI - KUR≈ûUN GE√áƒ∞RMEZ (Part 3 i√ßin)
# 1. √úlke y√ºzdelerini normalize et (0-0-0 ise e≈üit b√∂l)
def _normalize_country_part3(p_rus, p_sng, p_tur):
    vals = [max(float(p_rus), 0.0), max(float(p_sng), 0.0), max(float(p_tur), 0.0)]
    s = sum(vals)
    if s <= 0:  # hepsi 0 ise e≈üit b√∂l
        return (1/3.0, 1/3.0, 1/3.0)
    return (vals[0]/s, vals[1]/s, vals[2]/s)

# 2. A¬∑S fiyatƒ±nƒ± doƒürudan hesapla (ara "ki≈üi-ay" daƒüƒ±tƒ±mƒ± olmadan)
M_with = 0.0
M_bare = 0.0

if not roles_df.empty and sum_w > 0:
    for _, row in roles_df.iterrows():
        share = float(row["Aƒüƒ±rlƒ±k (–í–µ—Å)"]) / sum_w
        
        # √úlke y√ºzdelerini normalize et
        p_rus, p_sng, p_tur = _normalize_country_part3(row["%RUS"], row["%SNG"], row["%TUR"])
        
        # monthly_role_cost_multinational fonksiyonunu kullan
        with_ex = monthly_role_cost_multinational(row, PRIM_SNG, PRIM_TUR, extras_per_person)["per_person"]["BLENDED"]
        bare_ex = monthly_role_cost_multinational(row, PRIM_SNG, PRIM_TUR, 0.0)["per_person"]["BLENDED"]
        
        M_with += share * with_ex
        M_bare += share * bare_ex

# 3. A¬∑S fiyatlarƒ± - TEK SATIRLIK FORM√úL
with_extras_as_price = M_with / hours_per_person_month
bare_as_price = M_bare / hours_per_person_month



# --- NEW: price follows productivity (scenario + difficulty) ---
s_mult  = get_scenario_multiplier_for_price(scenario)   # senaryo etkisi
z_mult  = get_difficulty_multiplier_cached()            # √ßevresel zorluk etkisi
# Ayarlanabilir katsayƒ±lar (ileride istersen UI ekleyebilirsin)
BETA_SCENARIO_TO_PRICE  = 1.0    # 0..1 (1=tam, 0=sƒ±zdƒ±rma)
BETA_DIFFICULTY_TO_PRICE= 1.0    # 0..1 (1=tam, 0=sƒ±zdƒ±rma)

price_mult = (1 + BETA_SCENARIO_TO_PRICE  * (s_mult - 1)) \
           * (1 + BETA_DIFFICULTY_TO_PRICE* (z_mult - 1))
bare_as_price        *= price_mult
with_extras_as_price *= price_mult

core_as_price        = with_extras_as_price  # m¬≥ maliyetleri bu fiyattan √ºretilecek



# Part 3 hesaplama tamamlandƒ±

# Roller hesaplama tablosu i√ßin
roles_calc = []
if not roles_df.empty and sum_w > 0:
    for _, row in roles_df.iterrows():
        w = max(float(row["Aƒüƒ±rlƒ±k (–í–µ—Å)"]), 0.0)
        share = (w / sum_w)
        persons_role = (person_months_total / n_months) * share
        
        # √úlke y√ºzdelerini normalize et
        p_rus, p_sng, p_tur = _normalize_country_part3(row["%RUS"], row["%SNG"], row["%TUR"])
        
        # monthly_role_cost_multinational kullan
        bundle_with = monthly_role_cost_multinational(row, PRIM_SNG, PRIM_TUR, extras_per_person)
        bundle_bare = monthly_role_cost_multinational(row, PRIM_SNG, PRIM_TUR, 0.0)
        per_with = bundle_with["per_person"]["BLENDED"]
        per_bare = bundle_bare["per_person"]["BLENDED"]
        
        roles_calc.append({
            "Rol (–†–æ–ª—å)": row["Rol (–†–æ–ª—å)"],
            "Aƒüƒ±rlƒ±k (–í–µ—Å)": w,
            "Pay (%) (–î–æ–ª—è, %)": f"{share * 100:.2f}",
            "Ortalama Ki≈üi (–°—Ä–µ–¥–Ω—è—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å)": f"{persons_role:.3f}",
            "Maliyet/ay (‚ÇΩ)": f"{per_with:,.2f}",
            "%RUS": f"{p_rus * 100:.1f}",
            "%SNG": f"{p_sng * 100:.1f}",
            "%TUR": f"{p_tur * 100:.1f}",
            "Net Maa≈ü (‚ÇΩ/ay)": f"{float(row.get('Net Maa≈ü (‚ÇΩ, na ruki) (–ß–∏—Å—Ç–∞—è –∑/–ø, ‚ÇΩ)', 0)):,.0f}"
        })
roles_calc_df = pd.DataFrame(roles_calc)

# ----------------- m¬≥ MALƒ∞YETLERƒ∞ - ELEMAN √ñZG√ú NORM KULLAN -----------------
sum_core_overhead_total=0.0; tmp_store=[]
for r in iterable:
    lbl=str(r[col_ele]); met=float(r.get(col_met,0.0) or 0.0); n=norms_used[lbl]
    core_m3  = with_extras_as_price * n  # Eleman √∂zg√º norm ile √ßarp
    genel_m3 = min(max(overhead_rate_eff,0.0), OVERHEAD_RATE_MAX/100.0) * core_m3  # √ºst sƒ±nƒ±r
    total_m3_core_genel = core_m3 + genel_m3
    sum_core_overhead_total += total_m3_core_genel * met
    tmp_store.append((lbl,met,total_m3_core_genel,core_m3,genel_m3,n))
                    
# Sarf + Indirect - (core_m3 + genel_m3) * metraj tabanƒ± √ºzerinden
consumables_total = sum_core_overhead_total * max(consumables_rate_eff,0.0)
indirect_total    = (sum_core_overhead_total + consumables_total) * max(indirect_rate_total,0.0)
                    
# Elemanlara daƒüƒ±t - oransal daƒüƒ±tƒ±m
elem_rows=[]; project_total_cost=0.0
for (lbl,met,base_total,core_m3,genel_m3,n) in tmp_store:
    # Sarf ve indirect daƒüƒ±tƒ±mƒ±: (core_m3 + genel_m3) * metraj oranƒ±
    weight    = (base_total*met) / max(sum_core_overhead_total,1e-9)
    sarf_alloc  = consumables_total * weight
    indir_alloc = indirect_total    * weight
    sarf_m3  = sarf_alloc / max(met,1e-9) if met > 0 else 0.0
    indir_m3 = indir_alloc/ max(met,1e-9) if met>0 else 0.0
    total_m3 = core_m3 + genel_m3 + sarf_m3 + indir_m3
    project_total_cost += total_m3 * max(met,0.0)
    elem_rows.append({
        "Eleman (–≠–ª–µ–º–µ–Ω—Ç)":lbl,
        "Norm (a¬∑s/m¬≥) (–ù–æ—Ä–º–∞, —á–µ–ª¬∑—á/–º¬≥)":f"{n:.2f}",
        "Metraj (m¬≥) (–û–±—ä—ë–º, –º¬≥)":f"{met:,.3f}",
        "√áekirdek (‚ÇΩ/–º¬≥) (–Ø–¥—Ä–æ, ‚ÇΩ/–º¬≥)":f"{core_m3:,.2f}",
        "Genel (‚ÇΩ/–º¬≥) (–ù–∞–∫–ª–∞–¥–Ω—ã–µ, ‚ÇΩ/–º¬≥)":f"{genel_m3:,.2f}",
        "Sarf (‚ÇΩ/–º¬≥) (–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏, ‚ÇΩ/–º¬≥)":f"{sarf_m3:,.2f}",
        "Indirect (‚ÇΩ/–º¬≥) (–ö–æ—Å–≤–µ–Ω–Ω—ã–µ, ‚ÇΩ/–º¬≥)":f"{indir_m3:,.2f}",
        "Toplam (‚ÇΩ/–º¬≥) (–ò—Ç–æ–≥–æ, ‚ÇΩ/–º¬≥)":f"{total_m3:,.2f}"
    })
elements_df = pd.DataFrame(elem_rows)

# √ñzet metrikler
general_avg_m3      = project_total_cost / max(total_metraj,1e-9) if total_metraj>0 else 0.0
fully_loaded_as_price = project_total_cost / max(total_adamsaat,1e-9) if total_adamsaat>0 else 0.0
avg_norm_per_m3       = total_adamsaat / max(total_metraj,1e-9) if total_metraj>0 else 0.0
indirect_share        = indirect_total / max(project_total_cost,1e-9) if project_total_cost>0 else 0.0

# ----------------- PARABOLƒ∞K MANPOWER DAƒûILIMI (Part 3 i√ßin) -----------------
# ≈ûantiye ger√ßeklerine uygun parabolik daƒüƒ±tƒ±m
def parabolic_distribution_part3(n_months):
    if n_months <= 1:
        return [1.0]
    
    # Parabolik aƒüƒ±rlƒ±klar: y = -4(x-0.5)¬≤ + 1
    # Ba≈ülangƒ±√ß: d√º≈ü√ºk, orta: y√ºksek, son: d√º≈ü√ºk
    weights = []
    for i in range(n_months):
        x = i / (n_months - 1) if n_months > 1 else 0.5
        weight = -4 * (x - 0.5)**2 + 1
        weights.append(max(weight, 0.1))  # Minimum %10
    
    # Toplamƒ± 1'e normalize et
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]
    return normalized_weights

# Parabolik daƒüƒ±tƒ±m hesapla
if not month_wd_df.empty:
    n_months_part3 = len(month_wd_df)
    weights_part3 = parabolic_distribution_part3(n_months_part3)
    headcounts_float_part3 = [person_months_total * wi for wi in weights_part3]
    
    # Toplam adam-ay korunmalƒ± - yuvarlama hatasƒ± d√ºzeltmesi
    def round_preserve_sum_part3(values):
        rounded = [round(v) for v in values]
        total_diff = sum(values) - sum(rounded)
        
        if abs(total_diff) >= 1:
            diffs = [(i, abs(v - r)) for i, (v, r) in enumerate(zip(values, rounded))]
            diffs.sort(key=lambda x: x[1], reverse=True)
            
            for i, _ in diffs:
                if total_diff > 0:
                    rounded[i] += 1
                    total_diff -= 1
                elif total_diff < 0:
                    rounded[i] -= 1
                    total_diff += 1
                if abs(total_diff) < 1:
                    break
        
        return rounded
    
    headcounts_int_part3 = round_preserve_sum_part3(headcounts_float_part3)
    
    # month_wd_df'ye parabolik daƒüƒ±tƒ±m ekle
    month_wd_df["Manpower (–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å)"] = headcounts_int_part3

# Sonu√ßlar yeni sekmede g√∂sterilecek